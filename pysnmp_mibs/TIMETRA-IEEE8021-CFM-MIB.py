#
# PySNMP MIB module TIMETRA-IEEE8021-CFM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/rob/Code/pysnmp-mibs/mibs/nokia/TIMETRA-IEEE8021-CFM-MIB
# Produced by pysmi-1.1.12 at Mon Aug  4 17:12:37 2025
# On host macmini.vegmond.io platform Darwin version 24.5.0 by user rob
# Using Python version 3.12.8 (main, Dec  3 2024, 18:42:41) [Clang 16.0.0 (clang-1600.0.26.4)]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
Dot1agCfmPortStatus, Dot1agCfmMepIdOrZero, VlanId, Dot1agCfmMDLevel, Dot1agCfmMaintAssocName, dot1agCfmMepTransmitLbmDestMacAddress, Dot1agCfmMpDirection, dot1agCfmMepDbEntry, dot1agCfmMaIndex, dot1agCfmMepEntry, dot1agCfmMaNetEntry, dot1agCfmMaCompEntry, dot1agCfmDefaultMdEntry, dot1agCfmMaMepListEntry, dot1agCfmMepTransmitLtmSeqNumber, VlanIdOrNone, Dot1agCfmLowestAlarmPri, dot1agCfmMepIdentifier, Dot1agCfmMaintDomainNameType, dot1agCfmMdIndex, Dot1agCfmMepId, dot1agCfmMdEntry, Dot1agCfmInterfaceStatus = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "Dot1agCfmPortStatus", "Dot1agCfmMepIdOrZero", "VlanId", "Dot1agCfmMDLevel", "Dot1agCfmMaintAssocName", "dot1agCfmMepTransmitLbmDestMacAddress", "Dot1agCfmMpDirection", "dot1agCfmMepDbEntry", "dot1agCfmMaIndex", "dot1agCfmMepEntry", "dot1agCfmMaNetEntry", "dot1agCfmMaCompEntry", "dot1agCfmDefaultMdEntry", "dot1agCfmMaMepListEntry", "dot1agCfmMepTransmitLtmSeqNumber", "VlanIdOrNone", "Dot1agCfmLowestAlarmPri", "dot1agCfmMepIdentifier", "Dot1agCfmMaintDomainNameType", "dot1agCfmMdIndex", "Dot1agCfmMepId", "dot1agCfmMdEntry", "Dot1agCfmInterfaceStatus")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
LldpChassisIdSubtype, = mibBuilder.importSymbols("LLDP-MIB", "LldpChassisIdSubtype")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32, Integer32, ModuleIdentity, TimeTicks, NotificationType, Counter32, Bits, IpAddress, iso, ObjectIdentity, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32", "Integer32", "ModuleIdentity", "TimeTicks", "NotificationType", "Counter32", "Bits", "IpAddress", "iso", "ObjectIdentity", "Counter64", "Gauge32")
DateAndTime, TimeInterval, MacAddress, TextualConvention, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TimeInterval", "MacAddress", "TextualConvention", "DisplayString", "RowStatus", "TruthValue")
tmnxSRConfs, timetraSRMIBModules, tmnxSRNotifyPrefix, tmnxSRObjs = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRConfs", "timetraSRMIBModules", "tmnxSRNotifyPrefix", "tmnxSRObjs")
SdpId, = mibBuilder.importSymbols("TIMETRA-SERV-MIB", "SdpId")
TLNamedItem, TFCSet, TItemDescription, TmnxServId, TmnxEnabledDisabled, TmnxCreateOrigin, TLNamedItemOrEmpty, TNamedItem = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TLNamedItem", "TFCSet", "TItemDescription", "TmnxServId", "TmnxEnabledDisabled", "TmnxCreateOrigin", "TLNamedItemOrEmpty", "TNamedItem")
timetraIEEE8021CfmMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 52))
timetraIEEE8021CfmMIBModule.setRevisions(('2016-03-11 00:00', '2016-01-01 00:00', '2015-01-01 00:00', '2014-01-01 00:00', '2011-02-01 00:00', '2009-02-28 00:00', '2008-01-01 00:00',))
if mibBuilder.loadTexts: timetraIEEE8021CfmMIBModule.setLastUpdated('201603110000Z')
if mibBuilder.loadTexts: timetraIEEE8021CfmMIBModule.setOrganization('Nokia')
class Dot1agCfmStatisticOpcodeName(TextualConvention, Integer32):
    reference = 'Y.1731 clauses 7 and 8'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))
    namedValues = NamedValues(("other", 1), ("ccm", 2), ("lbr", 3), ("lbm", 4), ("ltr", 5), ("ltm", 6), ("ais", 7), ("lck", 8), ("tst", 9), ("laps", 10), ("raps", 11), ("mcc", 12), ("lmr", 13), ("lmm", 14), ("odm", 15), ("dmr", 16), ("dmm", 17), ("exr", 18), ("exm", 19), ("csf", 20), ("vsr", 21), ("vsm", 22), ("osl", 23), ("slr", 24), ("slm", 25), ("gnm", 26))

class TmnxDot1agCfmMepFclty(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("port", 1), ("lag", 2), ("networkInterface", 3), ("qinqPortTunnelSap", 4), ("qinqLagTunnelSap", 5))

class TmnxDot1agCfmMaintDomainNameOrEmpty(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 43)

class TmnxDot1agCfmMaintAssocNameType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 32))
    namedValues = NamedValues(("primaryVid", 1), ("charString", 2), ("unsignedInt16", 3), ("rfc2865VpnId", 4), ("iccBased", 32))

class TmnxDot1agCfmMhfCreation(TextualConvention, Integer32):
    reference = '802.1ag clause 12.14.5.1.3:c and 22.2.3'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 32))
    namedValues = NamedValues(("defMHFnone", 1), ("defMHFdefault", 2), ("defMHFexplicit", 3), ("defMHFstatic", 32))

class TmnxDot1agCfmIdPermission(TextualConvention, Integer32):
    reference = '802.1ag clause 12.14.6.1.3:d and 21.5.3'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sendIdNone", 1), ("sendIdChassis", 2))

class TmnxDot1agCfmCcmInterval(TextualConvention, Integer32):
    reference = '802.1ag clauses 12.14.6.1.3:e, 20.8.1 and 21.6.1.3'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("interval300Hz", 1), ("interval10ms", 2), ("interval100ms", 3), ("interval1s", 4), ("interval10s", 5), ("interval1min", 6), ("interval10min", 7))

class TmnxDot1agCfmMdIndexOrNone(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), )
class TmnxDot1agCfmMaIndexOrNone(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), )
tmnxDot1agMIBObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52))
tmnxDot1agCfmStack = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1))
tmnxDot1agCfmSdpBindStackTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackTable.setStatus('current')
tmnxDot1agCfmSdpBindStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackSdpId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackVcId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackMdLevel"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackDirection"))
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackEntry.setStatus('current')
tmnxDot1agCfmSdpBindStackSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 1), SdpId())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackSdpId.setStatus('current')
tmnxDot1agCfmSdpBindStackVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackVcId.setStatus('current')
tmnxDot1agCfmSdpBindStackMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 3), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMdLevel.setStatus('current')
tmnxDot1agCfmSdpBindStackDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 4), Dot1agCfmMpDirection())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackDirection.setStatus('current')
tmnxDot1agCfmSdpBindStackMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMdIndex.setStatus('current')
tmnxDot1agCfmSdpBindStackMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMaIndex.setStatus('current')
tmnxDot1agCfmSdpBindStackMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 7), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMepId.setStatus('current')
tmnxDot1agCfmSdpBindStackMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMacAddress.setStatus('current')
tmnxDot1agCfmStackTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2), )
if mibBuilder.loadTexts: tmnxDot1agCfmStackTable.setStatus('current')
tmnxDot1agCfmStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackifIndex"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackVlanIdOrNone"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMdLevel"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackDirection"))
if mibBuilder.loadTexts: tmnxDot1agCfmStackEntry.setStatus('current')
tmnxDot1agCfmStackifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tmnxDot1agCfmStackifIndex.setStatus('current')
tmnxDot1agCfmStackVlanIdOrNone = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmStackVlanIdOrNone.setStatus('current')
tmnxDot1agCfmStackMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 3), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: tmnxDot1agCfmStackMdLevel.setStatus('current')
tmnxDot1agCfmStackDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 4), Dot1agCfmMpDirection())
if mibBuilder.loadTexts: tmnxDot1agCfmStackDirection.setStatus('current')
tmnxDot1agCfmStackMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmStackMdIndex.setStatus('current')
tmnxDot1agCfmStackMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmStackMaIndex.setStatus('current')
tmnxDot1agCfmStackMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 7), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmStackMepId.setStatus('current')
tmnxDot1agCfmStackMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmStackMacAddress.setStatus('current')
tmnxDot1agCfmStackMPType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sap", 1), ("ethTun", 2), ("ethRing", 3), ("facPort", 4), ("facInterface", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmStackMPType.setStatus('current')
tmnxDot1agCfmVStackTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3), )
if mibBuilder.loadTexts: tmnxDot1agCfmVStackTable.setStatus('current')
tmnxDot1agCfmVStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackSvcId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackMdLevel"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackDirection"))
if mibBuilder.loadTexts: tmnxDot1agCfmVStackEntry.setStatus('current')
tmnxDot1agCfmVStackSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 1), TmnxServId())
if mibBuilder.loadTexts: tmnxDot1agCfmVStackSvcId.setStatus('current')
tmnxDot1agCfmVStackMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 2), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMdLevel.setStatus('current')
tmnxDot1agCfmVStackDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 3), Dot1agCfmMpDirection())
if mibBuilder.loadTexts: tmnxDot1agCfmVStackDirection.setStatus('current')
tmnxDot1agCfmVStackMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMdIndex.setStatus('current')
tmnxDot1agCfmVStackMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMaIndex.setStatus('current')
tmnxDot1agCfmVStackMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 6), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMepId.setStatus('current')
tmnxDot1agCfmVStackMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMacAddress.setStatus('current')
tmnxDot1agCfmPVStackTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4), )
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackTable.setStatus('current')
tmnxDot1agCfmPVStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackifIndex"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackVlanIdOrNone"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackPriVlanId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackMdLevel"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackDirection"))
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackEntry.setStatus('current')
tmnxDot1agCfmPVStackifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackifIndex.setStatus('current')
tmnxDot1agCfmPVStackVlanIdOrNone = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackVlanIdOrNone.setStatus('current')
tmnxDot1agCfmPVStackPriVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackPriVlanId.setStatus('current')
tmnxDot1agCfmPVStackMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 4), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMdLevel.setStatus('current')
tmnxDot1agCfmPVStackDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 5), Dot1agCfmMpDirection())
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackDirection.setStatus('current')
tmnxDot1agCfmPVStackMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMdIndex.setStatus('current')
tmnxDot1agCfmPVStackMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMaIndex.setStatus('current')
tmnxDot1agCfmPVStackMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 8), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMepId.setStatus('current')
tmnxDot1agCfmPVStackMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMacAddress.setStatus('current')
tmnxDot1agCfmSdpPVStackTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 5), )
if mibBuilder.loadTexts: tmnxDot1agCfmSdpPVStackTable.setStatus('current')
tmnxDot1agCfmSdpPVStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 5, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpPVStackSdpId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpPVStackVcId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpPVStackPriVlanId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpPVStackMdLevel"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpPVStackDirection"))
if mibBuilder.loadTexts: tmnxDot1agCfmSdpPVStackEntry.setStatus('current')
tmnxDot1agCfmSdpPVStackSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 5, 1, 1), SdpId().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)))
if mibBuilder.loadTexts: tmnxDot1agCfmSdpPVStackSdpId.setStatus('current')
tmnxDot1agCfmSdpPVStackVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: tmnxDot1agCfmSdpPVStackVcId.setStatus('current')
tmnxDot1agCfmSdpPVStackPriVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 5, 1, 3), VlanId())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpPVStackPriVlanId.setStatus('current')
tmnxDot1agCfmSdpPVStackMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 5, 1, 4), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpPVStackMdLevel.setStatus('current')
tmnxDot1agCfmSdpPVStackDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 5, 1, 5), Dot1agCfmMpDirection())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpPVStackDirection.setStatus('current')
tmnxDot1agCfmSdpPVStackMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpPVStackMdIndex.setStatus('current')
tmnxDot1agCfmSdpPVStackMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpPVStackMaIndex.setStatus('current')
tmnxDot1agCfmSdpPVStackMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 5, 1, 8), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpPVStackMepId.setStatus('current')
tmnxDot1agCfmSdpPVStackMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 5, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpPVStackMacAddr.setStatus('current')
tmnxDot1agCfmGlobalObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2))
tmnxDot1agCfmMcLagConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 1))
tmnxDot1agCfmMcLagStdbyInactive = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDot1agCfmMcLagStdbyInactive.setStatus('current')
tmnxDot1agCfmMcLagPropHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDot1agCfmMcLagPropHoldTime.setStatus('current')
tmnxDot1agCfmSLMConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 2))
tmnxDot1agCfmSLMInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(100)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDot1agCfmSLMInactivityTimer.setStatus('current')
tmnxDot1agCfmStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3))
tmnxDot1agCfmGlobalPacketStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 1))
tmnxDot1agCfmGlobalPacketRxCount = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalPacketRxCount.setStatus('current')
tmnxDot1agCfmGlobalPacketTxCount = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalPacketTxCount.setStatus('current')
tmnxDot1agCfmGlobalPacketDropped = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalPacketDropped.setStatus('current')
tmnxDot1agCfmGlobalPacketDiscard = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalPacketDiscard.setStatus('current')
tmnxDot1agCfmGlobalAisTxActive = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 1, 5), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalAisTxActive.setStatus('current')
tmnxDot1agCfmGlobalAisTxFail = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 1, 6), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalAisTxFail.setStatus('current')
tmnxDot1agCfmComponentLimitTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2), )
if mibBuilder.loadTexts: tmnxDot1agCfmComponentLimitTable.setStatus('current')
tmnxDot1agCfmComponentLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCompMajorIndex"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCompMinorIndex"))
if mibBuilder.loadTexts: tmnxDot1agCfmComponentLimitEntry.setStatus('current')
tmnxDot1agCfmCompMajorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmCompMajorIndex.setStatus('current')
tmnxDot1agCfmCompMinorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmCompMinorIndex.setStatus('current')
tmnxDot1agCfmCompName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1, 3), TNamedItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmCompName.setStatus('current')
tmnxDot1agCfmCompResourceUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmCompResourceUsage.setStatus('current')
tmnxDot1agCfmCompResourceLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmCompResourceLimit.setStatus('current')
tmnxDot1agCfmGlobalOpcodeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 3), )
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalOpcodeTable.setStatus('current')
tmnxDot1agCfmGlobalOpcodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 3, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalOpcode"))
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalOpcodeEntry.setStatus('current')
tmnxDot1agCfmGlobalOpcode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 3, 1, 1), Dot1agCfmStatisticOpcodeName())
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalOpcode.setStatus('current')
tmnxDot1agCfmGlobalOpcodeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalOpcodeRx.setStatus('current')
tmnxDot1agCfmGlobalOpcodeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalOpcodeTx.setStatus('current')
tmnxDot1agCfmSystemScalarsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 4))
tmnxDot1agCfmGraceTxEnable = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 4, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDot1agCfmGraceTxEnable.setStatus('current')
tmnxDot1agCfmGracePeriod = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 4, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGracePeriod.setStatus('current')
tmnxDot1agCfmSenderIdType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 4, 3), LldpChassisIdSubtype().clone('chassisComponent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDot1agCfmSenderIdType.setStatus('current')
tmnxDot1agCfmSenderIdName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDot1agCfmSenderIdName.setStatus('current')
tmnxDot1agAutoIndexGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 5))
tmnxDot1agAutoMdIndexRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 5, 1), TmnxDot1agCfmMdIndexOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agAutoMdIndexRangeStart.setStatus('current')
tmnxDot1agAutoMdIndexRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 5, 2), TmnxDot1agCfmMdIndexOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agAutoMdIndexRangeEnd.setStatus('current')
tmnxDot1agAutoMaIndexRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 5, 3), TmnxDot1agCfmMaIndexOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agAutoMaIndexRangeStart.setStatus('current')
tmnxDot1agAutoMaIndexRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 5, 4), TmnxDot1agCfmMaIndexOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agAutoMaIndexRangeEnd.setStatus('current')
tmnxDot1agCfmManagementObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3))
tmnxDot1agCfmMepMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtTable.setStatus('current')
tmnxDot1agCfmMepMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1), )
dot1agCfmMepEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtEntry"))
tmnxDot1agCfmMepMgmtEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtEntry.setStatus('current')
tmnxDot1agCfmMepMgmtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtRowStatus.setStatus('current')
tmnxDot1agCfmMepMgmtType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 0), ("facilityPort", 1), ("facilityInterface", 2), ("sapPrimaryVlan", 3), ("sdpPrimaryVlan", 4))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtType.setStatus('current')
tmnxDot1agCfmMepMgmtServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 3), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtServiceId.setStatus('current')
tmnxDot1agCfmMepMgmtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtIfIndex.setStatus('current')
tmnxDot1agCfmMepMgmtPrimaryVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtPrimaryVid.setStatus('current')
tmnxDot1agCfmMepMgmtSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 6), SdpId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtSdpId.setStatus('current')
tmnxDot1agCfmMepMgmtVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtVcId.setStatus('current')
tmnxDot1agCfmMepMgmtFcltyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtFcltyIfIndex.setStatus('current')
tmnxDot1agCfmMepMgmtFcltyVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 9), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtFcltyVlanId.setStatus('current')
tmnxDot1agCfmMepMgmtDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 50), Dot1agCfmMpDirection().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtDirection.setStatus('current')
tmnxDot1agCfmMd = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 5))
tmnxDot1agCfmMdTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 5, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmMdTable.setStatus('current')
tmnxDot1agCfmMdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 5, 1, 1), )
dot1agCfmMdEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMdEntry"))
tmnxDot1agCfmMdEntry.setIndexNames(*dot1agCfmMdEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMdEntry.setStatus('current')
tmnxDot1agCfmMdCreationOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 5, 1, 1, 1), TmnxCreateOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMdCreationOrigin.setStatus('current')
tmnxDot1agCfmMdAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 5, 1, 1, 2), TLNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMdAdminName.setStatus('current')
tmnxDot1agCfmMa = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6))
tmnxDot1agCfmMaNetTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetTable.setStatus('current')
tmnxDot1agCfmMaNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 1, 1), )
dot1agCfmMaNetEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaNetEntry"))
tmnxDot1agCfmMaNetEntry.setIndexNames(*dot1agCfmMaNetEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetEntry.setStatus('current')
tmnxDot1agCfmMaNetHoldDownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1000), ))).setUnits('centiseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetHoldDownTimer.setStatus('current')
tmnxDot1agCfmMaNetTotalMEPCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetTotalMEPCount.setStatus('current')
tmnxDot1agCfmMaNetAutoDiscAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetAutoDiscAdmin.setStatus('current')
tmnxDot1agCfmMaNetIdPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 1, 1, 4), TmnxDot1agCfmIdPermission().clone('sendIdNone')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetIdPermission.setStatus('current')
tmnxDot1agCfmMaNetAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 1, 1, 5), TLNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetAdminName.setStatus('current')
tmnxDot1agCfmMaCompTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 2), )
if mibBuilder.loadTexts: tmnxDot1agCfmMaCompTable.setStatus('current')
tmnxDot1agCfmMaCompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 2, 1), )
dot1agCfmMaCompEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaCompEntry"))
tmnxDot1agCfmMaCompEntry.setIndexNames(*dot1agCfmMaCompEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMaCompEntry.setStatus('current')
tmnxDot1agCfmMaCompMipLtrPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaCompMipLtrPrio.setStatus('current')
tmnxDot1agCfmMaMepListTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 3), )
if mibBuilder.loadTexts: tmnxDot1agCfmMaMepListTable.setStatus('current')
tmnxDot1agCfmMaMepListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 3, 1), )
dot1agCfmMaMepListEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaMepListEntry"))
tmnxDot1agCfmMaMepListEntry.setIndexNames(*dot1agCfmMaMepListEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMaMepListEntry.setStatus('current')
tmnxDot1agCfmMaMepListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 3, 1, 1), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaMepListMacAddress.setStatus('current')
tmnxDot1agCfmMaMepListAutoDiscvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaMepListAutoDiscvd.setStatus('current')
tmnxDot1agCfmMep = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7))
tmnxDot1agCfmMepTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepTable.setStatus('current')
tmnxDot1agCfmMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1), )
dot1agCfmMepEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEntry"))
tmnxDot1agCfmMepEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMepEntry.setStatus('current')
tmnxDot1agCfmMepSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 1), SdpId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSdpId.setStatus('current')
tmnxDot1agCfmMepVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepVcId.setStatus('current')
tmnxDot1agCfmMepMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMacAddress.setStatus('current')
tmnxDot1agCfmMepAisEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisEnable.setStatus('current')
tmnxDot1agCfmMepAisMegLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 5), Bits().clone(namedValues=NamedValues(("level1", 0), ("level2", 1), ("level3", 2), ("level4", 3), ("level5", 4), ("level6", 5), ("level7", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisMegLevel.setStatus('current')
tmnxDot1agCfmMepAisPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisPriority.setStatus('current')
tmnxDot1agCfmMepAisInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(60, 60), )).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisInterval.setStatus('current')
tmnxDot1agCfmMepEthRxAisInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(60, 60), )).clone(1)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthRxAisInterval.setStatus('current')
tmnxDot1agCfmMepEthRxAis = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthRxAis.setStatus('current')
tmnxDot1agCfmMepEthAisTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthAisTxCount.setStatus('current')
tmnxDot1agCfmMepEthTestEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestEnable.setStatus('current')
tmnxDot1agCfmMepEthTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("allZerosNoCrc", 0), ("allZerosCrc", 1), ("prbsNoCrc", 2), ("prbsCrc", 3), ("allOnesNoCrc", 4), ("allOnesCrc", 5))).clone('allZerosNoCrc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestPattern.setStatus('current')
tmnxDot1agCfmMepEthTestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 13), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestMacAddr.setStatus('current')
tmnxDot1agCfmMepEthTestDataLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestDataLen.setStatus('current')
tmnxDot1agCfmMepEthTestPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestPriority.setStatus('current')
tmnxDot1agCfmMepOWDTMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 16), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepOWDTMacAddress.setStatus('current')
tmnxDot1agCfmMepOWDTPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepOWDTPriority.setStatus('current')
tmnxDot1agCfmMepTWDTMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 18), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepTWDTMacAddress.setStatus('current')
tmnxDot1agCfmMepTWDTPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepTWDTPriority.setStatus('current')
tmnxDot1agCfmMepSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 20), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSvcId.setStatus('current')
tmnxDot1agCfmMepControlMep = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepControlMep.setStatus('current')
tmnxDot1agCfmMepEthTestThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 11840)).clone(1)).setUnits('bit errors').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestThreshold.setStatus('current')
tmnxDot1agCfmMepOWDTThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepOWDTThreshold.setStatus('current')
tmnxDot1agCfmMepFaultPropagation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("useIfStatusTLV", 1), ("suspendCCM", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFaultPropagation.setStatus('current')
tmnxDot1agCfmMepFacilityIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 25), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFacilityIfIndex.setStatus('current')
tmnxDot1agCfmMepFacilityVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 26), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFacilityVlanId.setStatus('current')
tmnxDot1agCfmMepFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nonFacilityType", 0), ("port", 1), ("interface", 2))).clone('nonFacilityType')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFacilityType.setStatus('current')
tmnxDot1agCfmMepFcltyFaultNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFcltyFaultNotify.setStatus('current')
tmnxDot1agCfmMepDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 29), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepDescription.setStatus('current')
tmnxDot1agCfmMepMcLagInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("standby", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMcLagInactive.setStatus('current')
tmnxDot1agCfmMepCcmPaddingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 1500), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCcmPaddingSize.setStatus('current')
tmnxDot1agCfmMepCcmIgnoreTLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 32), Bits().clone(namedValues=NamedValues(("interfaceStatus", 0), ("portStatus", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCcmIgnoreTLVs.setStatus('current')
tmnxDot1agCfmMepCsfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 33), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCsfEnable.setStatus('current')
tmnxDot1agCfmMepCsfRxMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 34), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 300), )).clone(35)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCsfRxMultiplier.setStatus('current')
tmnxDot1agCfmMepCsfRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("los", 0), ("ais", 1), ("rdi", 2), ("dci", 3))).clone('dci')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCsfRxState.setStatus('current')
tmnxDot1agCfmMepCsfRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 36), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(60, 60), )).clone(1)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCsfRxInterval.setStatus('current')
tmnxDot1agCfmMepCsfRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCsfRxCount.setStatus('current')
tmnxDot1agCfmMepEthAisTxFail = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthAisTxFail.setStatus('current')
tmnxDot1agCfmMepTxLbmTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepTxLbmTimeout.setStatus('current')
tmnxDot1agCfmMepTxLbmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 40), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 600), ))).setUnits('deciseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepTxLbmInterval.setStatus('current')
tmnxDot1agCfmMepLbmPaddingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 41), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 9778), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmPaddingSize.setStatus('current')
tmnxDot1agCfmMepIfSupportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 42), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepIfSupportEnable.setStatus('current')
tmnxDot1agCfmMepAisLowPrioDef = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 43), Dot1agCfmLowestAlarmPri().clone('allDef')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisLowPrioDef.setStatus('current')
tmnxDot1agCfmMepCollectLmmStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 44), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCollectLmmStats.setStatus('current')
tmnxDot1agCfmMepCreationOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 45), TmnxCreateOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCreationOrigin.setStatus('current')
tmnxDot1agCfmMepEthTestTargMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 46), Dot1agCfmMepIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestTargMepId.setStatus('current')
tmnxDot1agCfmMepEthTestLstDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 47), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestLstDstMac.setStatus('current')
tmnxDot1agCfmMepOWDTTargetMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 48), Dot1agCfmMepIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepOWDTTargetMepId.setStatus('current')
tmnxDot1agCfmMepOWDTLstDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 49), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepOWDTLstDstMac.setStatus('current')
tmnxDot1agCfmMepTWDTTargetMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 50), Dot1agCfmMepIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepTWDTTargetMepId.setStatus('current')
tmnxDot1agCfmMepTWDTLstDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 51), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepTWDTLstDstMac.setStatus('current')
tmnxDot1agCfmMepCollLmmFcSts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 52), TFCSet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCollLmmFcSts.setStatus('current')
tmnxDot1agCfmMepCollLmmFcStsInP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 53), TFCSet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCollLmmFcStsInP.setStatus('current')
tmnxDot1agCfmMepTxEthVsmGrace = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 54), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepTxEthVsmGrace.setStatus('current')
tmnxDot1agCfmMepRxEthVsmGrace = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 55), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepRxEthVsmGrace.setStatus('current')
tmnxDot1agCfmMepTxEthEd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 56), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepTxEthEd.setStatus('current')
tmnxDot1agCfmMepRxEthEd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 57), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepRxEthEd.setStatus('current')
tmnxDot1agCfmMepEthEdMaxDurRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 58), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthEdMaxDurRx.setStatus('current')
tmnxDot1agCfmMepEthEdPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthEdPriority.setStatus('current')
tmnxDot1agCfmMepLbmSvcActResp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 60), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmSvcActResp.setStatus('current')
tmnxDot1agCfmMepEthBnReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 61), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthBnReceive.setStatus('current')
tmnxDot1agCfmMepEthBnRxUpdPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 62), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthBnRxUpdPacing.setStatus('current')
tmnxDot1agCfmMepInstallMep = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 63), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepInstallMep.setStatus('current')
tmnxDot1agCfmMepEthTestRsltTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestRsltTable.setStatus('current')
tmnxDot1agCfmMepEthTestRsltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSrcMacAddress"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestRsltEntry.setStatus('current')
tmnxDot1agCfmMepSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: tmnxDot1agCfmMepSrcMacAddress.setStatus('current')
tmnxDot1agCfmMepFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFrameCount.setStatus('current')
tmnxDot1agCfmMepByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepByteCount.setStatus('current')
tmnxDot1agCfmMepFailedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFailedBits.setStatus('current')
tmnxDot1agCfmMepCrcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCrcFailures.setStatus('current')
tmnxDot1agCfmMepCurrByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCurrByteCount.setStatus('current')
tmnxDot1agCfmMepCurrFailedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCurrFailedBits.setStatus('current')
tmnxDot1agCfmMepCurrCrcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCurrCrcFailures.setStatus('current')
tmnxDot1agCfmMepDelayRsltTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayRsltTable.setStatus('current')
tmnxDot1agCfmMepDelayRsltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDelaySrcMacAddr"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDelayTestType"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayRsltEntry.setStatus('current')
tmnxDot1agCfmMepDelaySrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelaySrcMacAddr.setStatus('current')
tmnxDot1agCfmMepDelayTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneWayTest", 1), ("twoWayTest", 2))))
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayTestType.setStatus('current')
tmnxDot1agCfmMepDelayTestDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3, 1, 3), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayTestDelay.setStatus('current')
tmnxDot1agCfmMepDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3, 1, 4), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayVariation.setStatus('current')
tmnxDot1agCfmMepSlmTWTestTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTestTable.setStatus('current')
tmnxDot1agCfmMepSlmTWTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1), )
dot1agCfmMepEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWTestEntry"))
tmnxDot1agCfmMepSlmTWTestEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTestEntry.setStatus('current')
tmnxDot1agCfmMepSlmTWTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 1), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTestStatus.setStatus('current')
tmnxDot1agCfmMepSlmTWTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTestId.setStatus('current')
tmnxDot1agCfmMepSlmTWMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 3), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWMacAddress.setStatus('current')
tmnxDot1agCfmMepSlmTWPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWPriority.setStatus('current')
tmnxDot1agCfmMepSlmTWInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 90)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWInterval.setStatus('current')
tmnxDot1agCfmMepSlmTWTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTimeout.setStatus('current')
tmnxDot1agCfmMepSlmTWDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWDataSize.setStatus('current')
tmnxDot1agCfmMepSlmTWSendCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWSendCount.setStatus('current')
tmnxDot1agCfmMepSlmTWIntrvlUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seconds", 1), ("centiseconds", 2))).clone('seconds')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWIntrvlUnits.setStatus('current')
tmnxDot1agCfmMepSlmTWTargetMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 10), Dot1agCfmMepIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTargetMepId.setStatus('current')
tmnxDot1agCfmMepSlmTWLstDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 11), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWLstDstMac.setStatus('current')
tmnxDot1agCfmMepSlmOWTestTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTestTable.setStatus('current')
tmnxDot1agCfmMepSlmOWTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1), )
dot1agCfmMepEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWTestEntry"))
tmnxDot1agCfmMepSlmOWTestEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTestEntry.setStatus('current')
tmnxDot1agCfmMepSlmOWTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 1), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTestStatus.setStatus('current')
tmnxDot1agCfmMepSlmOWTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTestId.setStatus('current')
tmnxDot1agCfmMepSlmOWMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 3), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWMacAddress.setStatus('current')
tmnxDot1agCfmMepSlmOWPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWPriority.setStatus('current')
tmnxDot1agCfmMepSlmOWInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWInterval.setStatus('current')
tmnxDot1agCfmMepSlmOWDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWDataSize.setStatus('current')
tmnxDot1agCfmMepSlmOWSendCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWSendCount.setStatus('current')
tmnxDot1agCfmMepSlmOWTargetMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 8), Dot1agCfmMepIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTargetMepId.setStatus('current')
tmnxDot1agCfmMepSlmOWLstDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 9), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWLstDstMac.setStatus('current')
tmnxDot1agCfmMepSlmTestRsltTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTestRsltTable.setStatus('current')
tmnxDot1agCfmMepSlmTestRsltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTestType"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmRemoteMacAddr"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTestRsltEntry.setStatus('current')
tmnxDot1agCfmMepSlmTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneWayTest", 1), ("twoWayTest", 2))))
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTestType.setStatus('current')
tmnxDot1agCfmMepSlmRemoteMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 2), MacAddress())
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmRemoteMacAddr.setStatus('current')
tmnxDot1agCfmMepSlmTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTestId.setStatus('current')
tmnxDot1agCfmMepSlmRemoteMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 4), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmRemoteMepId.setStatus('current')
tmnxDot1agCfmMepSlmLastTxSeqF = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmLastTxSeqF.setStatus('current')
tmnxDot1agCfmMepSlmPacketIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketIn.setStatus('current')
tmnxDot1agCfmMepSlmPacketLossIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 7), Integer32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketLossIn.setStatus('current')
tmnxDot1agCfmMepSlmPacketLossOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 8), Integer32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketLossOut.setStatus('current')
tmnxDot1agCfmMepSlmPacketUnack = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 9), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketUnack.setStatus('current')
tmnxDot1agCfmMepMcstLbmRsltTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 7), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepMcstLbmRsltTable.setStatus('current')
tmnxDot1agCfmMepMcstLbmRsltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 7, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLbmRemoteMepMac"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLbmSeqNumber"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLbmRxIndex"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepMcstLbmRsltEntry.setStatus('current')
tmnxDot1agCfmMepLbmRemoteMepMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmRemoteMepMac.setStatus('current')
tmnxDot1agCfmMepLbmSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmSeqNumber.setStatus('current')
tmnxDot1agCfmMepLbmRxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmRxIndex.setStatus('current')
tmnxDot1agCfmMepDbTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 8), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepDbTable.setStatus('current')
tmnxDot1agCfmMepDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 8, 1), )
dot1agCfmMepDbEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDbEntry"))
tmnxDot1agCfmMepDbEntry.setIndexNames(*dot1agCfmMepDbEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMepDbEntry.setStatus('current')
tmnxDot1agCfmMepDbGraceRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepDbGraceRx.setStatus('current')
tmnxDot1agCfmMepDbMccEdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 8, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepDbMccEdRx.setStatus('current')
tmnxDot1agCfmMepOpcodeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 9), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepOpcodeTable.setStatus('current')
tmnxDot1agCfmMepOpcodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 9, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepOpcode"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepOpcodeEntry.setStatus('current')
tmnxDot1agCfmMepOpcode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 9, 1, 1), Dot1agCfmStatisticOpcodeName())
if mibBuilder.loadTexts: tmnxDot1agCfmMepOpcode.setStatus('current')
tmnxDot1agCfmMepOpcodeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepOpcodeRx.setStatus('current')
tmnxDot1agCfmMepOpcodeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepOpcodeTx.setStatus('current')
tmnxDot1agCfmMepExtOpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 10), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepExtOpTable.setStatus('current')
tmnxDot1agCfmMepExtOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 10, 1), )
dot1agCfmMepEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepExtOpEntry"))
tmnxDot1agCfmMepExtOpEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMepExtOpEntry.setStatus('current')
tmnxDot1agCfmMepOpRxPeerGrace = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 10, 1, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepOpRxPeerGrace.setStatus('current')
tmnxDot1agCfmMepCcmTxRdi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 10, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCcmTxRdi.setStatus('current')
tmnxDot1agCfmMepCcmTxPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 10, 1, 3), Dot1agCfmPortStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCcmTxPortStatus.setStatus('current')
tmnxDot1agCfmMepCcmTxIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 10, 1, 4), Dot1agCfmInterfaceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCcmTxIfStatus.setStatus('current')
tmnxDot1agCfmMepTxAis = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noTransmit", 0), ("transmit", 1), ("pending", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepTxAis.setStatus('current')
tmnxDot1agCfmMepTxGrace = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noTransmit", 0), ("grace", 1), ("ethEd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepTxGrace.setStatus('current')
tmnxDot1agCfmMepTxCcm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noTransmit", 0), ("transmit", 1), ("suppressed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepTxCcm.setStatus('current')
tmnxDot1agCfmMepEthBnNominalBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 10, 1, 8), Integer32()).setUnits('megabps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthBnNominalBw.setStatus('current')
tmnxDot1agCfmMepEthBnCurrentBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 10, 1, 9), Integer32()).setUnits('megabps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthBnCurrentBw.setStatus('current')
tmnxDot1agCfmMepEthBnReportedBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 10, 1, 10), Integer32()).setUnits('megabps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthBnReportedBw.setStatus('current')
tmnxDot1agCfmMepEthBnLastReport = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 10, 1, 11), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthBnLastReport.setStatus('current')
tmnxDot1agCfmMepEthBnUpdPacTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 10, 1, 12), TimeInterval()).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthBnUpdPacTimer.setStatus('current')
tmnxDot1agCfmMepEthBnPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 10, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthBnPortId.setStatus('current')
tmnxDot1agCfmMepEthBnRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 10, 1, 14), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthBnRxInterval.setStatus('current')
tmnxDot1agCfmMip = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8))
tmnxDot1agCfmSapMipTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipTable.setStatus('current')
tmnxDot1agCfmSapMipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapMipIfIndex"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapMipVlanIdOrNone"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapMipPrimaryVlanId"))
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipEntry.setStatus('current')
tmnxDot1agCfmSapMipIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipIfIndex.setStatus('current')
tmnxDot1agCfmSapMipVlanIdOrNone = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipVlanIdOrNone.setStatus('current')
tmnxDot1agCfmSapMipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipRowStatus.setStatus('current')
tmnxDot1agCfmSapMipSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipSrcMacAddress.setStatus('current')
tmnxDot1agCfmSapMipPrimaryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1, 1, 5), VlanIdOrNone())
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipPrimaryVlanId.setStatus('current')
tmnxDot1agCfmSdpMipTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2), )
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipTable.setStatus('current')
tmnxDot1agCfmSdpMipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipSvcId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipSdpId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipVcId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipPrimaryVlanId"))
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipEntry.setStatus('current')
tmnxDot1agCfmSdpMipSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1, 1), TmnxServId())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipSvcId.setStatus('current')
tmnxDot1agCfmSdpMipSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1, 2), SdpId())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipSdpId.setStatus('current')
tmnxDot1agCfmSdpMipVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipVcId.setStatus('current')
tmnxDot1agCfmSdpMipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipRowStatus.setStatus('current')
tmnxDot1agCfmSdpMipSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1, 5), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipSrcMacAddress.setStatus('current')
tmnxDot1agCfmSdpMipPrimaryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1, 6), VlanIdOrNone())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipPrimaryVlanId.setStatus('current')
tmnxDot1agCfmNotificationObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 9))
tmnxDot1agCfmNotifySvcId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 9, 1), TmnxServId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDot1agCfmNotifySvcId.setStatus('current')
tmnxDot1agCfmMepFcltyType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 9, 2), TmnxDot1agCfmMepFclty()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFcltyType.setStatus('current')
tmnxDot1agCfmMepFcltyInstance = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 9, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFcltyInstance.setStatus('current')
tmnxDot1agCfmDefaultMd = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 10))
tmnxDot1agCfmDfltMdDefMipLtrPrio = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmDfltMdDefMipLtrPrio.setStatus('current')
tmnxDot1agCfmDefaultMdTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 10, 2), )
if mibBuilder.loadTexts: tmnxDot1agCfmDefaultMdTable.setStatus('current')
tmnxDot1agCfmDefaultMdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 10, 2, 1), )
dot1agCfmDefaultMdEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmDefaultMdEntry"))
tmnxDot1agCfmDefaultMdEntry.setIndexNames(*dot1agCfmDefaultMdEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmDefaultMdEntry.setStatus('current')
tmnxDot1agCfmDefaultMdMipLtrPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDot1agCfmDefaultMdMipLtrPrio.setStatus('current')
tmnxDot1agLearnedRemoteMacObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 11))
tmnxDot1agCfmLearnedRmtMacTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 11, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmLearnedRmtMacTable.setStatus('current')
tmnxDot1agCfmLearnedRmtMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 11, 1, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmLearnedRmtMepId"))
if mibBuilder.loadTexts: tmnxDot1agCfmLearnedRmtMacEntry.setStatus('current')
tmnxDot1agCfmLearnedRmtMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 11, 1, 1, 1), Dot1agCfmMepId())
if mibBuilder.loadTexts: tmnxDot1agCfmLearnedRmtMepId.setStatus('current')
tmnxDot1agCfmLearnedRmtMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 11, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmLearnedRmtMacAddr.setStatus('current')
tmnxDot1agCfmLearnedRmtStaleFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 11, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmLearnedRmtStaleFlag.setStatus('current')
tmnxDot1agCfmLearnedRmtChngdFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 11, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmLearnedRmtChngdFlag.setStatus('current')
tmnxDot1agCfmMdMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 12))
tmnxDot1agCfmMdMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 12, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmMdMgmtTable.setStatus('current')
tmnxDot1agCfmMdMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 12, 1, 1), )
dot1agCfmMdEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMdMgmtEntry"))
tmnxDot1agCfmMdMgmtEntry.setIndexNames(*dot1agCfmMdEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMdMgmtEntry.setStatus('current')
tmnxDot1agCfmMdMgmtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 12, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMdMgmtRowStatus.setStatus('current')
tmnxDot1agCfmMdMgmtFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 12, 1, 1, 2), Dot1agCfmMaintDomainNameType().clone('charString')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMdMgmtFormat.setStatus('current')
tmnxDot1agCfmMdMgmtName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 12, 1, 1, 3), TmnxDot1agCfmMaintDomainNameOrEmpty().clone(hexValue="44454641554c54")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMdMgmtName.setStatus('current')
tmnxDot1agCfmMdMgmtMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 12, 1, 1, 4), Dot1agCfmMDLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMdMgmtMdLevel.setStatus('current')
tmnxDot1agCfmMdMgmtAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 12, 1, 1, 5), TLNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMdMgmtAdminName.setStatus('current')
tmnxDot1agCfmMaMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 13))
tmnxDot1agCfmMaMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 13, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmMaMgmtTable.setStatus('current')
tmnxDot1agCfmMaMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 13, 1, 1), )
dot1agCfmMaNetEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaMgmtEntry"))
tmnxDot1agCfmMaMgmtEntry.setIndexNames(*dot1agCfmMaNetEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMaMgmtEntry.setStatus('current')
tmnxDot1agCfmMaMgmtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 13, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaMgmtRowStatus.setStatus('current')
tmnxDot1agCfmMaMgmtFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 13, 1, 1, 2), TmnxDot1agCfmMaintAssocNameType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaMgmtFormat.setStatus('current')
tmnxDot1agCfmMaMgmtName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 13, 1, 1, 3), Dot1agCfmMaintAssocName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaMgmtName.setStatus('current')
tmnxDot1agCfmMaMgmtCcmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 13, 1, 1, 4), TmnxDot1agCfmCcmInterval().clone('interval10s')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaMgmtCcmInterval.setStatus('current')
tmnxDot1agCfmMaMgmtAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 13, 1, 1, 5), TLNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaMgmtAdminName.setStatus('current')
tmnxDot1agCfmMaMgmtHoldDownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 13, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1000), ))).setUnits('centiseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaMgmtHoldDownTimer.setStatus('current')
tmnxDot1agCfmMaMgmtAutoDiscAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 13, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaMgmtAutoDiscAdmin.setStatus('current')
tmnxDot1agCfmMaMgmtIdPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 13, 1, 1, 8), TmnxDot1agCfmIdPermission().clone('sendIdNone')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaMgmtIdPermission.setStatus('current')
tmnxDot1agCfmMaBrName = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 14))
tmnxDot1agCfmMaBrNameTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 14, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmMaBrNameTable.setStatus('current')
tmnxDot1agCfmMaBrNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 14, 1, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaBrNameId"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"))
if mibBuilder.loadTexts: tmnxDot1agCfmMaBrNameEntry.setStatus('current')
tmnxDot1agCfmMaBrNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 14, 1, 1, 1), TLNamedItem())
if mibBuilder.loadTexts: tmnxDot1agCfmMaBrNameId.setStatus('current')
tmnxDot1agCfmMaBrNamePVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 14, 1, 1, 2), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaBrNamePVlanId.setStatus('current')
tmnxDot1agCfmMaBrNameMhfCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 14, 1, 1, 3), TmnxDot1agCfmMhfCreation().clone('defMHFnone')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaBrNameMhfCreation.setStatus('current')
tmnxDot1agCfmMaBrNameIdPerm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 14, 1, 1, 4), TmnxDot1agCfmIdPermission().clone('sendIdNone')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaBrNameIdPerm.setStatus('current')
tmnxDot1agCfmMaBrNameMipLtrPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 14, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaBrNameMipLtrPrio.setStatus('current')
tmnxDot1agCfmMaBrNameNumOfVids = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 14, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMaBrNameNumOfVids.setStatus('current')
tmnxDot1agCfmMaBrNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 14, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaBrNameRowStatus.setStatus('current')
tmnxDot1agMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52))
tmnxDot1agCfmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1))
tmnxDot1agCfmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmCompliance = tmnxDot1agCfmCompliance.setStatus('obsolete')
tmnxDot1agCfmComplianceV7v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxY1731CfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV7v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV7v0 = tmnxDot1agCfmComplianceV7v0.setStatus('obsolete')
tmnxDot1agCfmComplianceV8v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxY1731CfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV7v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV8v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV8v0 = tmnxDot1agCfmComplianceV8v0.setStatus('obsolete')
tmnxDot1agCfmComplianceV9v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxY1731CfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV7v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMcastLbmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV9v0 = tmnxDot1agCfmComplianceV9v0.setStatus('obsolete')
tmnxDot1agCfmComplianceV10v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 5)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV7v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMcastLbmGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStatsGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxY1731CfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGPGroupV10v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV10v0 = tmnxDot1agCfmComplianceV10v0.setStatus('obsolete')
tmnxDot1agCfmComplianceV11v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 6)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV11v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV7v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCSFGroupV11v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMcastLbmGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCSFNotifyGroupV11v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStatsGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxY1731CfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGPGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMEPMgmtGroupV11v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMdGroupV11v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV11v0 = tmnxDot1agCfmComplianceV11v0.setStatus('obsolete')
tmnxDot1agCfmComplianceV12v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 7)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV11v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV12v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV7v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCSFGroupV11v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV12v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMcastLbmGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCSFNotifyGroupV11v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStatsGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStatsGroupV12v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxY1731CfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGPGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMEPMgmtGroupV11v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMdGroupV11v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmScalarsGroupV12v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV12v0 = tmnxDot1agCfmComplianceV12v0.setStatus('current')
tmnxDot1agCfmComplianceV13v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 8)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV13v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmXmppEnhGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV13v0 = tmnxDot1agCfmComplianceV13v0.setStatus('current')
tmnxDot1agCfmComplianceV14v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 9)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmDefaultMdGroupV14v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agNotifyObjsGroupV14v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCLENotifyGroupV14v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV14v0 = tmnxDot1agCfmComplianceV14v0.setStatus('current')
tmnxDot1agCfmComplianceV15v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 10)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV15v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmTstMepIdGroupV15v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmLmmPerQosGroupV15v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMccEdGroupV15v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpPrimVLanGrpV15v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmLbmLbrMepGroupV15v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV15v0 = tmnxDot1agCfmComplianceV15v0.setStatus('current')
tmnxDot1agCfmComplianceV15v1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 11)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmAdminNameGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV15v1 = tmnxDot1agCfmComplianceV15v1.setStatus('current')
tmnxDot1AgCfmComplianceV16v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 12)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmEthBnGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaBrNameGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmAdminNameGroupExt"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmModelDrivenGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1AgCfmComplianceV16v0 = tmnxDot1AgCfmComplianceV16v0.setStatus('current')
tmnxDot1agCfmComplianceV19v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 13)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepIXRGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV19v0 = tmnxDot1agCfmComplianceV19v0.setStatus('current')
tmnxDot1agCfmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2))
tmnxDot1agCfmSdpBindStackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackMdIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackMaIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmSdpBindStackGroup = tmnxDot1agCfmSdpBindStackGroup.setStatus('current')
tmnxDot1agCfmMepGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSdpId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepVcId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroup = tmnxDot1agCfmMepGroup.setStatus('obsolete')
tmnxDot1agCfmSapStackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMdIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMaIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmSapStackGroup = tmnxDot1agCfmSapStackGroup.setStatus('current')
tmnxDot1agCfmNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLbmTestComplete"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLtmTestComplete"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmNotificationGroup = tmnxDot1agCfmNotificationGroup.setStatus('current')
tmnxDot1agCfmMipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 5)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapMipRowStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMipGroup = tmnxDot1agCfmMipGroup.setStatus('obsolete')
tmnxDot1agCfmMepGroupV7v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 6)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSdpId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepVcId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepAisEnable"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepAisMegLevel"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepAisPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepAisInterval"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestEnable"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestPattern"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthRxAisInterval"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthRxAis"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthAisTxCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestMacAddr"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestDataLen"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepOWDTMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepOWDTPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepTWDTMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepTWDTPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFrameCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepByteCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFailedBits"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCrcFailures"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrByteCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrFailedBits"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrCrcFailures"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDelayTestDelay"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDelayVariation"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSvcId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepControlMep"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestThreshold"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepOWDTThreshold"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackMdIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackMaIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMPType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroupV7v0 = tmnxDot1agCfmMepGroupV7v0.setStatus('current')
tmnxY1731CfmNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 7)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestComplete"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDMTestComplete"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepAisStateChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxY1731CfmNotificationGroup = tmnxY1731CfmNotificationGroup.setStatus('current')
tmnxDot1agCfmNotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 8)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotifySvcId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmNotifyObjsGroup = tmnxDot1agCfmNotifyObjsGroup.setStatus('current')
tmnxDot1agCfmMipNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 9)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipEvaluation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMipNotifyGroup = tmnxDot1agCfmMipNotifyGroup.setStatus('current')
tmnxDot1agCfmV6v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 10))
tmnxDot1agCfmV7v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 11))
tmnxDot1agCfmV8v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 12))
tmnxDot1agCfmMipGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 12, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapMipRowStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapMipSrcMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipRowStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipSrcMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMipGroupV8v0 = tmnxDot1agCfmMipGroupV8v0.setStatus('current')
tmnxDot1agCfmMepGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 12, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFaultPropagation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroupV8v0 = tmnxDot1agCfmMepGroupV8v0.setStatus('current')
tmnxDot1agCfmV9v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13))
tmnxDot1agCfmMaGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaNetHoldDownTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMaGroupV9v0 = tmnxDot1agCfmMaGroupV9v0.setStatus('current')
tmnxDot1agCfmMepGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFacilityIfIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFacilityVlanId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFacilityType"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFcltyFaultNotify"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDescription"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMcLagInactive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroupV9v0 = tmnxDot1agCfmMepGroupV9v0.setStatus('current')
tmnxDot1agCfmGlobalGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMcLagStdbyInactive"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMcLagPropHoldTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmGlobalGroupV9v0 = tmnxDot1agCfmGlobalGroupV9v0.setStatus('current')
tmnxDot1agCfmMepSlmGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSLMInactivityTimer"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWTestStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWTestId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWInterval"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWTimeout"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWDataSize"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWSendCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWTestStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWTestId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWInterval"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWDataSize"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWSendCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTestId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmRemoteMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmLastTxSeqF"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketIn"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketLossIn"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketLossOut"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketUnack"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepSlmGroupV9v0 = tmnxDot1agCfmMepSlmGroupV9v0.setStatus('current')
tmnxDot1agCfmMepSlmNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 5)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSLMTestComplete"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepSlmNotifyGroup = tmnxDot1agCfmMepSlmNotifyGroup.setStatus('current')
tmnxDot1agCfmMepMcastLbmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 6)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLbmRxIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepMcastLbmGroup = tmnxDot1agCfmMepMcastLbmGroup.setStatus('current')
tmnxDot1agCfmV10v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14))
tmnxDot1agCfmMepSlmTWGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWIntrvlUnits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepSlmTWGroupV10v0 = tmnxDot1agCfmMepSlmTWGroupV10v0.setStatus('current')
tmnxDot1agCfmMaGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaMepListMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaNetTotalMEPCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMaGroupV10v0 = tmnxDot1agCfmMaGroupV10v0.setStatus('current')
tmnxDot1agCfmMepGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCcmPaddingSize"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCcmIgnoreTLVs"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepAisLowPrioDef"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroupV10v0 = tmnxDot1agCfmMepGroupV10v0.setStatus('current')
tmnxDot1agCfmStatsGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalPacketRxCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalPacketTxCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalPacketDropped"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalPacketDiscard"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCompName"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCompResourceUsage"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCompResourceLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmStatsGroupV10v0 = tmnxDot1agCfmStatsGroupV10v0.setStatus('current')
tmnxDot1agCfmGPGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14, 5)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGraceTxEnable"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGracePeriod"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDbGraceRx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmGPGroupV10v0 = tmnxDot1agCfmGPGroupV10v0.setStatus('current')
tmnxDot1agCfmV11v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 15))
tmnxDot1agCfmMEPMgmtGroupV11v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 15, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtRowStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtType"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtServiceId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtIfIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtPrimaryVid"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtSdpId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtVcId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtFcltyIfIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtFcltyVlanId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtDirection"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackMdIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackMaIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMEPMgmtGroupV11v0 = tmnxDot1agCfmMEPMgmtGroupV11v0.setStatus('current')
tmnxDot1agCfmMaGroupV11v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 15, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaCompMipLtrPrio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMaGroupV11v0 = tmnxDot1agCfmMaGroupV11v0.setStatus('current')
tmnxDot1agCfmMdGroupV11v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 15, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMdCreationOrigin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMdGroupV11v0 = tmnxDot1agCfmMdGroupV11v0.setStatus('current')
tmnxDot1agCfmMepCSFGroupV11v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 15, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCsfEnable"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCsfRxMultiplier"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCsfRxState"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCsfRxInterval"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCsfRxCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepCSFGroupV11v0 = tmnxDot1agCfmMepCSFGroupV11v0.setStatus('current')
tmnxDot1agCfmCSFNotifyGroupV11v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 15, 5)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCsfStateChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmCSFNotifyGroupV11v0 = tmnxDot1agCfmCSFNotifyGroupV11v0.setStatus('current')
tmnxDot1agCfmV12v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 16))
tmnxDot1agCfmMaGroupV12v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 16, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaNetAutoDiscAdmin"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaMepListAutoDiscvd"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaNetIdPermission"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMaGroupV12v0 = tmnxDot1agCfmMaGroupV12v0.setStatus('current')
tmnxDot1agCfmStatsGroupV12v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 16, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalOpcodeRx"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalOpcodeTx"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalAisTxActive"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalAisTxFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmStatsGroupV12v0 = tmnxDot1agCfmStatsGroupV12v0.setStatus('current')
tmnxDot1agCfmMepGroupV12v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 16, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepOpcodeRx"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepOpcodeTx"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthAisTxFail"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepTxLbmTimeout"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepTxLbmInterval"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLbmPaddingSize"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepIfSupportEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroupV12v0 = tmnxDot1agCfmMepGroupV12v0.setStatus('current')
tmnxDot1agCfmScalarsGroupV12v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 16, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSenderIdType"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSenderIdName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmScalarsGroupV12v0 = tmnxDot1agCfmScalarsGroupV12v0.setStatus('current')
tmnxDot1agCfmV13v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 17))
tmnxDot1agCfmMepGroupV13v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 17, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCollectLmmStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroupV13v0 = tmnxDot1agCfmMepGroupV13v0.setStatus('current')
tmnxDot1agCfmXmppEnhGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 17, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCreationOrigin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmXmppEnhGroup = tmnxDot1agCfmXmppEnhGroup.setStatus('current')
tmnxDot1agCfmV14v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 18))
tmnxDot1agCfmDefaultMdGroupV14v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 18, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmDfltMdDefMipLtrPrio"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmDefaultMdMipLtrPrio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmDefaultMdGroupV14v0 = tmnxDot1agCfmDefaultMdGroupV14v0.setStatus('current')
tmnxDot1agNotifyObjsGroupV14v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 18, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFcltyType"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFcltyInstance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agNotifyObjsGroupV14v0 = tmnxDot1agNotifyObjsGroupV14v0.setStatus('current')
tmnxDot1agCfmCLENotifyGroupV14v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 18, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFcltyFaultRaise"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFcltyFaultClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmCLENotifyGroupV14v0 = tmnxDot1agCfmCLENotifyGroupV14v0.setStatus('current')
tmnxDot1agCfmV15v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 19))
tmnxDot1agCfmMepGroupV15v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 19, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCcmTxRdi"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCcmTxPortStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCcmTxIfStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepTxAis"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepTxGrace"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepTxCcm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroupV15v0 = tmnxDot1agCfmMepGroupV15v0.setStatus('current')
tmnxDot1agCfmTstMepIdGroupV15v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 19, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWTargetMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWLstDstMac"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWTargetMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWLstDstMac"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestTargMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestLstDstMac"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepOWDTTargetMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepOWDTLstDstMac"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepTWDTTargetMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepTWDTLstDstMac"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmLearnedRmtMacAddr"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmLearnedRmtStaleFlag"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmLearnedRmtChngdFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmTstMepIdGroupV15v0 = tmnxDot1agCfmTstMepIdGroupV15v0.setStatus('current')
tmnxDot1agCfmLmmPerQosGroupV15v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 19, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCollLmmFcSts"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCollLmmFcStsInP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmLmmPerQosGroupV15v0 = tmnxDot1agCfmLmmPerQosGroupV15v0.setStatus('current')
tmnxDot1agCfmMccEdGroupV15v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 19, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepTxEthVsmGrace"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepRxEthVsmGrace"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepTxEthEd"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepRxEthEd"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthEdMaxDurRx"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthEdPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDbMccEdRx"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepOpRxPeerGrace"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMccEdGroupV15v0 = tmnxDot1agCfmMccEdGroupV15v0.setStatus('current')
tmnxDot1agCfmSdpPrimVLanGrpV15v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 19, 5)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpPVStackMdIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpPVStackMaIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpPVStackMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpPVStackMacAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmSdpPrimVLanGrpV15v0 = tmnxDot1agCfmSdpPrimVLanGrpV15v0.setStatus('current')
tmnxDot1agCfmLbmLbrMepGroupV15v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 19, 6)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLbmSvcActResp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmLbmLbrMepGroupV15v0 = tmnxDot1agCfmLbmLbrMepGroupV15v0.setStatus('current')
tmnxDot1agCfmAdminNameGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 19, 7)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMdAdminName"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaNetAdminName"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMdMgmtRowStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMdMgmtName"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMdMgmtFormat"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMdMgmtMdLevel"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMdMgmtAdminName"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaMgmtRowStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaMgmtFormat"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaMgmtName"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaMgmtCcmInterval"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaMgmtAdminName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmAdminNameGroup = tmnxDot1agCfmAdminNameGroup.setStatus('current')
tmnxDot1agCfmV16v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 20))
tmnxDot1agCfmEthBnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 20, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthBnReceive"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthBnRxUpdPacing"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthBnNominalBw"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthBnCurrentBw"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthBnReportedBw"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthBnLastReport"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthBnUpdPacTimer"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthBnPortId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthBnRxInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmEthBnGroup = tmnxDot1agCfmEthBnGroup.setStatus('current')
tmnxDot1agCfmMaBrNameGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 20, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaBrNamePVlanId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaBrNameMhfCreation"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaBrNameIdPerm"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaBrNameMipLtrPrio"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaBrNameNumOfVids"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaBrNameRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMaBrNameGroup = tmnxDot1agCfmMaBrNameGroup.setStatus('current')
tmnxDot1agCfmAdminNameGroupExt = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 20, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaMgmtHoldDownTimer"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaMgmtAutoDiscAdmin"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaMgmtIdPermission"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmAdminNameGroupExt = tmnxDot1agCfmAdminNameGroupExt.setStatus('current')
tmnxDot1agCfmModelDrivenGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 20, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agAutoMdIndexRangeStart"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agAutoMdIndexRangeEnd"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agAutoMaIndexRangeStart"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agAutoMaIndexRangeEnd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmModelDrivenGroup = tmnxDot1agCfmModelDrivenGroup.setStatus('current')
tmnxDot1agCfmV19v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 21))
tmnxDot1agCfmMepIXRGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 21, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepInstallMep"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepIXRGroup = tmnxDot1agCfmMepIXRGroup.setStatus('current')
tmnxDot1agNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52))
tmnxDot1agNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0))
tmnxDot1agCfmMepLbmTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 1)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepTransmitLbmDestMacAddress"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmTestComplete.setStatus('current')
tmnxDot1agCfmMepLtmTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 2)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepTransmitLtmSeqNumber"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepLtmTestComplete.setStatus('current')
tmnxDot1agCfmMepEthTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrByteCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrFailedBits"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrCrcFailures"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestComplete.setStatus('current')
tmnxDot1agCfmMepDMTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDelayTestDelay"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepDMTestComplete.setStatus('current')
tmnxDot1agCfmMepAisStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 5)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthRxAis"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisStateChanged.setStatus('current')
tmnxDot1agCfmMipEvaluation = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 6)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotifySvcId"))
if mibBuilder.loadTexts: tmnxDot1agCfmMipEvaluation.setStatus('current')
tmnxDot1agCfmMepSLMTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 7)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTestId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmRemoteMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmLastTxSeqF"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketIn"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketLossIn"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketLossOut"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketUnack"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepSLMTestComplete.setStatus('current')
tmnxDot1agCfmMepCsfStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 8)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCsfRxState"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepCsfStateChanged.setStatus('current')
tmnxDot1agCfmMepFcltyFaultRaise = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 9)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFcltyType"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFcltyInstance"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepFcltyFaultRaise.setStatus('current')
tmnxDot1agCfmMepFcltyFaultClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 10)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFcltyType"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFcltyInstance"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepFcltyFaultClear.setStatus('current')
mibBuilder.exportSymbols("TIMETRA-IEEE8021-CFM-MIB", tmnxDot1agCfmMdMgmtTable=tmnxDot1agCfmMdMgmtTable, tmnxDot1agCfmMaGroupV11v0=tmnxDot1agCfmMaGroupV11v0, tmnxDot1agCfmGroups=tmnxDot1agCfmGroups, tmnxDot1agCfmLearnedRmtMacAddr=tmnxDot1agCfmLearnedRmtMacAddr, tmnxDot1agCfmLmmPerQosGroupV15v0=tmnxDot1agCfmLmmPerQosGroupV15v0, tmnxDot1agCfmStatisticsGroup=tmnxDot1agCfmStatisticsGroup, tmnxDot1agCfmMepDelaySrcMacAddr=tmnxDot1agCfmMepDelaySrcMacAddr, tmnxDot1agCfmMepCurrByteCount=tmnxDot1agCfmMepCurrByteCount, tmnxDot1agCfmGlobalPacketDropped=tmnxDot1agCfmGlobalPacketDropped, tmnxDot1agCfmSdpPVStackSdpId=tmnxDot1agCfmSdpPVStackSdpId, tmnxDot1agCfmMdMgmtAdminName=tmnxDot1agCfmMdMgmtAdminName, TmnxDot1agCfmMdIndexOrNone=TmnxDot1agCfmMdIndexOrNone, tmnxDot1agCfmMaBrNameTable=tmnxDot1agCfmMaBrNameTable, tmnxDot1agCfmGracePeriod=tmnxDot1agCfmGracePeriod, tmnxDot1agCfmSdpBindStackMepId=tmnxDot1agCfmSdpBindStackMepId, tmnxDot1agCfmMaBrNameId=tmnxDot1agCfmMaBrNameId, tmnxDot1agCfmMaMepListTable=tmnxDot1agCfmMaMepListTable, tmnxDot1agCfmMaCompMipLtrPrio=tmnxDot1agCfmMaCompMipLtrPrio, tmnxDot1agCfmSdpMipSvcId=tmnxDot1agCfmSdpMipSvcId, tmnxDot1agCfmV13v0Groups=tmnxDot1agCfmV13v0Groups, tmnxDot1agCfmVStackMacAddress=tmnxDot1agCfmVStackMacAddress, TmnxDot1agCfmMepFclty=TmnxDot1agCfmMepFclty, tmnxDot1agCfmNotificationObjs=tmnxDot1agCfmNotificationObjs, tmnxDot1agCfmMepEthTestPriority=tmnxDot1agCfmMepEthTestPriority, tmnxDot1agCfmVStackSvcId=tmnxDot1agCfmVStackSvcId, tmnxDot1agCfmMepFailedBits=tmnxDot1agCfmMepFailedBits, tmnxDot1agCfmMepEthBnLastReport=tmnxDot1agCfmMepEthBnLastReport, timetraIEEE8021CfmMIBModule=timetraIEEE8021CfmMIBModule, tmnxDot1agCfmSenderIdName=tmnxDot1agCfmSenderIdName, tmnxDot1agCfmSdpBindStackVcId=tmnxDot1agCfmSdpBindStackVcId, PYSNMP_MODULE_ID=timetraIEEE8021CfmMIBModule, tmnxDot1agCfmMcLagPropHoldTime=tmnxDot1agCfmMcLagPropHoldTime, tmnxDot1agCfmMdTable=tmnxDot1agCfmMdTable, tmnxDot1agCfmPVStackEntry=tmnxDot1agCfmPVStackEntry, tmnxDot1agCfmComponentLimitEntry=tmnxDot1agCfmComponentLimitEntry, tmnxDot1agCfmMepSlmOWTestEntry=tmnxDot1agCfmMepSlmOWTestEntry, tmnxDot1agCfmMaMepListEntry=tmnxDot1agCfmMaMepListEntry, tmnxDot1agCfmGlobalOpcodeTable=tmnxDot1agCfmGlobalOpcodeTable, tmnxDot1agAutoMaIndexRangeStart=tmnxDot1agAutoMaIndexRangeStart, tmnxDot1agCfmV9v0Groups=tmnxDot1agCfmV9v0Groups, tmnxDot1agCfmMepCsfStateChanged=tmnxDot1agCfmMepCsfStateChanged, tmnxDot1agCfmMepDbEntry=tmnxDot1agCfmMepDbEntry, tmnxDot1agCfmLearnedRmtMepId=tmnxDot1agCfmLearnedRmtMepId, tmnxDot1agCfmCompName=tmnxDot1agCfmCompName, tmnxDot1agCfmMepSlmRemoteMepId=tmnxDot1agCfmMepSlmRemoteMepId, tmnxDot1agCfmAdminNameGroup=tmnxDot1agCfmAdminNameGroup, tmnxDot1agCfmMepCollLmmFcStsInP=tmnxDot1agCfmMepCollLmmFcStsInP, tmnxDot1agCfmMepEthTestMacAddr=tmnxDot1agCfmMepEthTestMacAddr, tmnxDot1agCfmPVStackMdIndex=tmnxDot1agCfmPVStackMdIndex, tmnxDot1agCfmV10v0Groups=tmnxDot1agCfmV10v0Groups, tmnxDot1agCfmComplianceV11v0=tmnxDot1agCfmComplianceV11v0, tmnxDot1agCfmMepDelayVariation=tmnxDot1agCfmMepDelayVariation, tmnxDot1agCfmPVStackPriVlanId=tmnxDot1agCfmPVStackPriVlanId, tmnxDot1agCfmManagementObjects=tmnxDot1agCfmManagementObjects, tmnxDot1agCfmMepCsfRxCount=tmnxDot1agCfmMepCsfRxCount, tmnxDot1agCfmCompMajorIndex=tmnxDot1agCfmCompMajorIndex, tmnxDot1agCfmMccEdGroupV15v0=tmnxDot1agCfmMccEdGroupV15v0, tmnxDot1agCfmMepCcmPaddingSize=tmnxDot1agCfmMepCcmPaddingSize, tmnxDot1agCfmMepAisPriority=tmnxDot1agCfmMepAisPriority, tmnxDot1agCfmMepEthTestLstDstMac=tmnxDot1agCfmMepEthTestLstDstMac, tmnxDot1agCfmMepOpcodeRx=tmnxDot1agCfmMepOpcodeRx, tmnxDot1agCfmMepTxAis=tmnxDot1agCfmMepTxAis, tmnxDot1agAutoMdIndexRangeEnd=tmnxDot1agAutoMdIndexRangeEnd, tmnxDot1agCfmXmppEnhGroup=tmnxDot1agCfmXmppEnhGroup, tmnxDot1agCfmMcLagConfigGroup=tmnxDot1agCfmMcLagConfigGroup, tmnxDot1agCfmMepOWDTTargetMepId=tmnxDot1agCfmMepOWDTTargetMepId, tmnxDot1agCfmMepSlmTestRsltTable=tmnxDot1agCfmMepSlmTestRsltTable, tmnxDot1agCfmSdpMipSrcMacAddress=tmnxDot1agCfmSdpMipSrcMacAddress, tmnxDot1agCfmMepSlmGroupV9v0=tmnxDot1agCfmMepSlmGroupV9v0, tmnxDot1agCfmStackEntry=tmnxDot1agCfmStackEntry, tmnxDot1agCfmGPGroupV10v0=tmnxDot1agCfmGPGroupV10v0, tmnxDot1agCfmMepCollLmmFcSts=tmnxDot1agCfmMepCollLmmFcSts, tmnxDot1agCfmMepSLMTestComplete=tmnxDot1agCfmMepSLMTestComplete, tmnxDot1agCfmMaNetTotalMEPCount=tmnxDot1agCfmMaNetTotalMEPCount, tmnxDot1agCfmLearnedRmtMacEntry=tmnxDot1agCfmLearnedRmtMacEntry, tmnxDot1agCfmMepSlmOWTestId=tmnxDot1agCfmMepSlmOWTestId, tmnxDot1agCfmMepTWDTMacAddress=tmnxDot1agCfmMepTWDTMacAddress, tmnxDot1agCfmSdpMipSdpId=tmnxDot1agCfmSdpMipSdpId, tmnxDot1agCfmMcLagStdbyInactive=tmnxDot1agCfmMcLagStdbyInactive, tmnxDot1agCfmStackTable=tmnxDot1agCfmStackTable, tmnxDot1agCfmSdpPVStackEntry=tmnxDot1agCfmSdpPVStackEntry, tmnxDot1agNotificationsPrefix=tmnxDot1agNotificationsPrefix, tmnxDot1agCfmMepEthTestRsltEntry=tmnxDot1agCfmMepEthTestRsltEntry, tmnxDot1agCfmSapMipTable=tmnxDot1agCfmSapMipTable, tmnxDot1agCfmMepSlmTWInterval=tmnxDot1agCfmMepSlmTWInterval, tmnxDot1agCfmMepDbGraceRx=tmnxDot1agCfmMepDbGraceRx, tmnxDot1agCfmMaMgmtIdPermission=tmnxDot1agCfmMaMgmtIdPermission, tmnxDot1agCfmMepDelayRsltTable=tmnxDot1agCfmMepDelayRsltTable, tmnxDot1agCfmMepMcLagInactive=tmnxDot1agCfmMepMcLagInactive, tmnxDot1agCfmMaMepListMacAddress=tmnxDot1agCfmMaMepListMacAddress, tmnxDot1agCfmMepSlmTWTestTable=tmnxDot1agCfmMepSlmTWTestTable, tmnxDot1agCfmMepGroupV9v0=tmnxDot1agCfmMepGroupV9v0, tmnxDot1agCfmMepEthBnNominalBw=tmnxDot1agCfmMepEthBnNominalBw, tmnxDot1agMIBConformance=tmnxDot1agMIBConformance, tmnxDot1agCfmStatsGroupV10v0=tmnxDot1agCfmStatsGroupV10v0, tmnxDot1agCfmMepDbMccEdRx=tmnxDot1agCfmMepDbMccEdRx, tmnxDot1agCfmMepSlmTWPriority=tmnxDot1agCfmMepSlmTWPriority, tmnxDot1agCfmCompliance=tmnxDot1agCfmCompliance, tmnxDot1agCfmMepMgmtTable=tmnxDot1agCfmMepMgmtTable, tmnxDot1agCfmMepMgmtServiceId=tmnxDot1agCfmMepMgmtServiceId, tmnxDot1agCfmSystemScalarsGroup=tmnxDot1agCfmSystemScalarsGroup, tmnxDot1agCfmMepLbmRemoteMepMac=tmnxDot1agCfmMepLbmRemoteMepMac, tmnxDot1agCfmMepExtOpTable=tmnxDot1agCfmMepExtOpTable, tmnxDot1agCfmMaMgmt=tmnxDot1agCfmMaMgmt, tmnxDot1agCfmMepTWDTTargetMepId=tmnxDot1agCfmMepTWDTTargetMepId, tmnxDot1agCfmMaGroupV12v0=tmnxDot1agCfmMaGroupV12v0, tmnxDot1agCfmMepCSFGroupV11v0=tmnxDot1agCfmMepCSFGroupV11v0, tmnxDot1agCfmMepAisInterval=tmnxDot1agCfmMepAisInterval, tmnxDot1agCfmMepEthBnRxInterval=tmnxDot1agCfmMepEthBnRxInterval, tmnxY1731CfmNotificationGroup=tmnxY1731CfmNotificationGroup, tmnxDot1agCfmMepSvcId=tmnxDot1agCfmMepSvcId, tmnxDot1agCfmSLMInactivityTimer=tmnxDot1agCfmSLMInactivityTimer, tmnxDot1agCfmMaGroupV9v0=tmnxDot1agCfmMaGroupV9v0, tmnxDot1agCfmNotificationGroup=tmnxDot1agCfmNotificationGroup, tmnxDot1agCfmMepEthRxAis=tmnxDot1agCfmMepEthRxAis, tmnxDot1agCfmComplianceV19v0=tmnxDot1agCfmComplianceV19v0, tmnxDot1agCfmSapStackGroup=tmnxDot1agCfmSapStackGroup, tmnxDot1agCfmSdpBindStackMacAddress=tmnxDot1agCfmSdpBindStackMacAddress, tmnxDot1agCfmMepExtOpEntry=tmnxDot1agCfmMepExtOpEntry, tmnxDot1agCfmMepSlmNotifyGroup=tmnxDot1agCfmMepSlmNotifyGroup, tmnxDot1agCfmMepGroupV15v0=tmnxDot1agCfmMepGroupV15v0, tmnxDot1agCfmMepFcltyInstance=tmnxDot1agCfmMepFcltyInstance, tmnxDot1agCfmVStackMdLevel=tmnxDot1agCfmVStackMdLevel, tmnxDot1agCfmStackMdIndex=tmnxDot1agCfmStackMdIndex, tmnxDot1agCfmComplianceV13v0=tmnxDot1agCfmComplianceV13v0, tmnxDot1agCfmGlobalPacketStats=tmnxDot1agCfmGlobalPacketStats, tmnxDot1agCfmMepLbmTestComplete=tmnxDot1agCfmMepLbmTestComplete, tmnxDot1agCfmMepEthTestTargMepId=tmnxDot1agCfmMepEthTestTargMepId, tmnxDot1agCfmMepCurrFailedBits=tmnxDot1agCfmMepCurrFailedBits, tmnxDot1agCfmMdGroupV11v0=tmnxDot1agCfmMdGroupV11v0, tmnxDot1agCfmMepInstallMep=tmnxDot1agCfmMepInstallMep, tmnxDot1agCfmMaBrNameIdPerm=tmnxDot1agCfmMaBrNameIdPerm, tmnxDot1agCfmLearnedRmtMacTable=tmnxDot1agCfmLearnedRmtMacTable, tmnxDot1agCfmPVStackTable=tmnxDot1agCfmPVStackTable, tmnxDot1agCfmSdpBindStackMdLevel=tmnxDot1agCfmSdpBindStackMdLevel, tmnxDot1agCfmV6v0Groups=tmnxDot1agCfmV6v0Groups, tmnxDot1agCfmV8v0Groups=tmnxDot1agCfmV8v0Groups, tmnxDot1agCfmMaNetEntry=tmnxDot1agCfmMaNetEntry, tmnxDot1agCfmMepLbmPaddingSize=tmnxDot1agCfmMepLbmPaddingSize, tmnxDot1agCfmMepOpcode=tmnxDot1agCfmMepOpcode, tmnxDot1agCfmMepEthTestComplete=tmnxDot1agCfmMepEthTestComplete, tmnxDot1agCfmMepEthAisTxCount=tmnxDot1agCfmMepEthAisTxCount, tmnxDot1agCfmMepFacilityVlanId=tmnxDot1agCfmMepFacilityVlanId, tmnxDot1agCfmMaMgmtCcmInterval=tmnxDot1agCfmMaMgmtCcmInterval, tmnxDot1agCfmVStackMdIndex=tmnxDot1agCfmVStackMdIndex, tmnxDot1agCfmVStackTable=tmnxDot1agCfmVStackTable, tmnxDot1agCfmSenderIdType=tmnxDot1agCfmSenderIdType, TmnxDot1agCfmMhfCreation=TmnxDot1agCfmMhfCreation, tmnxDot1agCfmMaMgmtFormat=tmnxDot1agCfmMaMgmtFormat, tmnxDot1agCfmMepEthTestDataLen=tmnxDot1agCfmMepEthTestDataLen, tmnxDot1agCfmMepGroupV12v0=tmnxDot1agCfmMepGroupV12v0, tmnxDot1agCfmSapMipVlanIdOrNone=tmnxDot1agCfmSapMipVlanIdOrNone, tmnxDot1agCfmMepEthTestEnable=tmnxDot1agCfmMepEthTestEnable, tmnxDot1agCfmMaBrName=tmnxDot1agCfmMaBrName, tmnxDot1agNotifications=tmnxDot1agNotifications, tmnxDot1agCfmMepOpRxPeerGrace=tmnxDot1agCfmMepOpRxPeerGrace, tmnxDot1agCfmGlobalAisTxActive=tmnxDot1agCfmGlobalAisTxActive, tmnxDot1agCfmSapMipEntry=tmnxDot1agCfmSapMipEntry, tmnxDot1agCfmMepMcstLbmRsltTable=tmnxDot1agCfmMepMcstLbmRsltTable, tmnxDot1agCfmMepMgmtVcId=tmnxDot1agCfmMepMgmtVcId, tmnxDot1agCfmSdpPVStackTable=tmnxDot1agCfmSdpPVStackTable, tmnxDot1agCfmMaBrNameNumOfVids=tmnxDot1agCfmMaBrNameNumOfVids, tmnxDot1agCfmMepOWDTThreshold=tmnxDot1agCfmMepOWDTThreshold, tmnxDot1agCfmEthBnGroup=tmnxDot1agCfmEthBnGroup, tmnxDot1agCfmDfltMdDefMipLtrPrio=tmnxDot1agCfmDfltMdDefMipLtrPrio, tmnxDot1agCfmMaBrNameEntry=tmnxDot1agCfmMaBrNameEntry, tmnxDot1agCfmMepSlmLastTxSeqF=tmnxDot1agCfmMepSlmLastTxSeqF, tmnxDot1agCfmMepSlmTWGroupV10v0=tmnxDot1agCfmMepSlmTWGroupV10v0, tmnxDot1agCfmCompResourceUsage=tmnxDot1agCfmCompResourceUsage, tmnxDot1agCfmPVStackMepId=tmnxDot1agCfmPVStackMepId, tmnxDot1agCfmMdCreationOrigin=tmnxDot1agCfmMdCreationOrigin, tmnxDot1agCfmStackifIndex=tmnxDot1agCfmStackifIndex, tmnxDot1agCfmMepSlmOWTestTable=tmnxDot1agCfmMepSlmOWTestTable, tmnxDot1agCfmStackMPType=tmnxDot1agCfmStackMPType, tmnxDot1agCfmSdpPrimVLanGrpV15v0=tmnxDot1agCfmSdpPrimVLanGrpV15v0, tmnxDot1agCfmMepDescription=tmnxDot1agCfmMepDescription, tmnxDot1agCfmMepSlmPacketUnack=tmnxDot1agCfmMepSlmPacketUnack, tmnxDot1agCfmNotifySvcId=tmnxDot1agCfmNotifySvcId, tmnxDot1agCfmMepMgmtRowStatus=tmnxDot1agCfmMepMgmtRowStatus, tmnxDot1agCfmSdpBindStackMdIndex=tmnxDot1agCfmSdpBindStackMdIndex, tmnxDot1agCfmPVStackMaIndex=tmnxDot1agCfmPVStackMaIndex, tmnxDot1agCfmMepRxEthEd=tmnxDot1agCfmMepRxEthEd, tmnxDot1agCfmMepLtmTestComplete=tmnxDot1agCfmMepLtmTestComplete, tmnxDot1agAutoMaIndexRangeEnd=tmnxDot1agAutoMaIndexRangeEnd, tmnxDot1agCfmMepEthBnCurrentBw=tmnxDot1agCfmMepEthBnCurrentBw, tmnxDot1agCfmMepOpcodeEntry=tmnxDot1agCfmMepOpcodeEntry, tmnxDot1agCfmDefaultMdMipLtrPrio=tmnxDot1agCfmDefaultMdMipLtrPrio, tmnxDot1agCfmStack=tmnxDot1agCfmStack, tmnxDot1agCfmMepSlmOWLstDstMac=tmnxDot1agCfmMepSlmOWLstDstMac, tmnxDot1agCfmMepRxEthVsmGrace=tmnxDot1agCfmMepRxEthVsmGrace, tmnxDot1agCfmMepFrameCount=tmnxDot1agCfmMepFrameCount, tmnxDot1agCfmCompResourceLimit=tmnxDot1agCfmCompResourceLimit, tmnxDot1agCfmSdpBindStackSdpId=tmnxDot1agCfmSdpBindStackSdpId, tmnxDot1agCfmVStackMepId=tmnxDot1agCfmVStackMepId, tmnxDot1agCfmMepEthEdMaxDurRx=tmnxDot1agCfmMepEthEdMaxDurRx, tmnxDot1agCfmCompliances=tmnxDot1agCfmCompliances, TmnxDot1agCfmIdPermission=TmnxDot1agCfmIdPermission, tmnxDot1agCfmLearnedRmtStaleFlag=tmnxDot1agCfmLearnedRmtStaleFlag, tmnxDot1agCfmCLENotifyGroupV14v0=tmnxDot1agCfmCLENotifyGroupV14v0, tmnxDot1agCfmMd=tmnxDot1agCfmMd, tmnxDot1agAutoIndexGroup=tmnxDot1agAutoIndexGroup, tmnxDot1agCfmMepGroupV8v0=tmnxDot1agCfmMepGroupV8v0, tmnxDot1agCfmMepControlMep=tmnxDot1agCfmMepControlMep, tmnxDot1agCfmMepEthTestRsltTable=tmnxDot1agCfmMepEthTestRsltTable, tmnxDot1agNotifyObjsGroupV14v0=tmnxDot1agNotifyObjsGroupV14v0, tmnxDot1agCfmV14v0Groups=tmnxDot1agCfmV14v0Groups, tmnxDot1agCfmComponentLimitTable=tmnxDot1agCfmComponentLimitTable, tmnxDot1agCfmMepSlmOWMacAddress=tmnxDot1agCfmMepSlmOWMacAddress, tmnxDot1agCfmMepEthTestPattern=tmnxDot1agCfmMepEthTestPattern, tmnxDot1agCfmMepTxLbmTimeout=tmnxDot1agCfmMepTxLbmTimeout, tmnxDot1agCfmMepSlmOWTargetMepId=tmnxDot1agCfmMepSlmOWTargetMepId, tmnxDot1agCfmMepSlmTestRsltEntry=tmnxDot1agCfmMepSlmTestRsltEntry, tmnxDot1agCfmMaBrNameMipLtrPrio=tmnxDot1agCfmMaBrNameMipLtrPrio, tmnxDot1agCfmMep=tmnxDot1agCfmMep, tmnxDot1agCfmComplianceV7v0=tmnxDot1agCfmComplianceV7v0, tmnxDot1agCfmMepFacilityIfIndex=tmnxDot1agCfmMepFacilityIfIndex, tmnxDot1agCfmMepGroupV7v0=tmnxDot1agCfmMepGroupV7v0, tmnxDot1agCfmSdpMipTable=tmnxDot1agCfmSdpMipTable, tmnxDot1agCfmSdpPVStackMdIndex=tmnxDot1agCfmSdpPVStackMdIndex, tmnxDot1agCfmMepSlmPacketLossIn=tmnxDot1agCfmMepSlmPacketLossIn, tmnxDot1agCfmSdpBindStackEntry=tmnxDot1agCfmSdpBindStackEntry, tmnxDot1agCfmMepMcstLbmRsltEntry=tmnxDot1agCfmMepMcstLbmRsltEntry, tmnxDot1agCfmMaMgmtHoldDownTimer=tmnxDot1agCfmMaMgmtHoldDownTimer, tmnxDot1agCfmModelDrivenGroup=tmnxDot1agCfmModelDrivenGroup, tmnxDot1agCfmMipGroup=tmnxDot1agCfmMipGroup, tmnxDot1agCfmMepSrcMacAddress=tmnxDot1agCfmMepSrcMacAddress, tmnxDot1agCfmMepByteCount=tmnxDot1agCfmMepByteCount, tmnxDot1agCfmMepSlmOWSendCount=tmnxDot1agCfmMepSlmOWSendCount, tmnxDot1agCfmMepAisStateChanged=tmnxDot1agCfmMepAisStateChanged, tmnxDot1agCfmMepCcmTxRdi=tmnxDot1agCfmMepCcmTxRdi, tmnxDot1agCfmCompMinorIndex=tmnxDot1agCfmCompMinorIndex, tmnxDot1agCfmSdpPVStackPriVlanId=tmnxDot1agCfmSdpPVStackPriVlanId, tmnxDot1agCfmMepCsfRxInterval=tmnxDot1agCfmMepCsfRxInterval, tmnxDot1agCfmMepFcltyFaultRaise=tmnxDot1agCfmMepFcltyFaultRaise, tmnxDot1agCfmMepOpcodeTable=tmnxDot1agCfmMepOpcodeTable, tmnxDot1agCfmV16v0Groups=tmnxDot1agCfmV16v0Groups, tmnxDot1agCfmMepTWDTLstDstMac=tmnxDot1agCfmMepTWDTLstDstMac, tmnxDot1agCfmMepSdpId=tmnxDot1agCfmMepSdpId, tmnxDot1agCfmMepSlmTestId=tmnxDot1agCfmMepSlmTestId, tmnxDot1agCfmMepDbTable=tmnxDot1agCfmMepDbTable, tmnxDot1agCfmStackMepId=tmnxDot1agCfmStackMepId, tmnxDot1agCfmStackMdLevel=tmnxDot1agCfmStackMdLevel, tmnxDot1agCfmVStackMaIndex=tmnxDot1agCfmVStackMaIndex, tmnxDot1agCfmSdpMipVcId=tmnxDot1agCfmSdpMipVcId, tmnxDot1agCfmMaCompTable=tmnxDot1agCfmMaCompTable, tmnxDot1agCfmMepDelayTestDelay=tmnxDot1agCfmMepDelayTestDelay, tmnxDot1agCfmSdpBindStackMaIndex=tmnxDot1agCfmSdpBindStackMaIndex, tmnxDot1agCfmDefaultMd=tmnxDot1agCfmDefaultMd, tmnxDot1agCfmGlobalOpcodeEntry=tmnxDot1agCfmGlobalOpcodeEntry, tmnxDot1agCfmCSFNotifyGroupV11v0=tmnxDot1agCfmCSFNotifyGroupV11v0, tmnxDot1agCfmMepEthBnRxUpdPacing=tmnxDot1agCfmMepEthBnRxUpdPacing, tmnxDot1agCfmMepVcId=tmnxDot1agCfmMepVcId, tmnxDot1agCfmMaMgmtRowStatus=tmnxDot1agCfmMaMgmtRowStatus, tmnxDot1agCfmMaNetIdPermission=tmnxDot1agCfmMaNetIdPermission)
mibBuilder.exportSymbols("TIMETRA-IEEE8021-CFM-MIB", tmnxDot1agCfmMepMgmtType=tmnxDot1agCfmMepMgmtType, tmnxDot1agCfmVStackEntry=tmnxDot1agCfmVStackEntry, tmnxDot1agCfmMepIXRGroup=tmnxDot1agCfmMepIXRGroup, TmnxDot1agCfmMaintDomainNameOrEmpty=TmnxDot1agCfmMaintDomainNameOrEmpty, tmnxDot1agCfmSdpMipEntry=tmnxDot1agCfmSdpMipEntry, tmnxDot1agCfmMepEntry=tmnxDot1agCfmMepEntry, tmnxDot1agCfmMepGroupV10v0=tmnxDot1agCfmMepGroupV10v0, tmnxDot1agCfmMaNetAdminName=tmnxDot1agCfmMaNetAdminName, tmnxDot1agCfmMepFacilityType=tmnxDot1agCfmMepFacilityType, tmnxDot1agCfmMepCsfRxMultiplier=tmnxDot1agCfmMepCsfRxMultiplier, tmnxDot1agCfmMepSlmTWTestId=tmnxDot1agCfmMepSlmTWTestId, tmnxDot1agCfmMepEthBnPortId=tmnxDot1agCfmMepEthBnPortId, tmnxDot1agCfmMepSlmTWTestStatus=tmnxDot1agCfmMepSlmTWTestStatus, tmnxDot1agCfmMepEthBnReportedBw=tmnxDot1agCfmMepEthBnReportedBw, tmnxDot1agCfmMepSlmOWTestStatus=tmnxDot1agCfmMepSlmOWTestStatus, tmnxDot1agCfmMepSlmTestType=tmnxDot1agCfmMepSlmTestType, tmnxDot1agCfmGlobalAisTxFail=tmnxDot1agCfmGlobalAisTxFail, tmnxDot1agCfmMepAisEnable=tmnxDot1agCfmMepAisEnable, tmnxDot1agCfmComplianceV10v0=tmnxDot1agCfmComplianceV10v0, tmnxDot1agCfmMepSlmTWLstDstMac=tmnxDot1agCfmMepSlmTWLstDstMac, tmnxDot1agCfmMepFaultPropagation=tmnxDot1agCfmMepFaultPropagation, tmnxDot1agCfmGlobalPacketTxCount=tmnxDot1agCfmGlobalPacketTxCount, tmnxDot1agCfmMaNetTable=tmnxDot1agCfmMaNetTable, tmnxDot1agCfmGlobalOpcodeTx=tmnxDot1agCfmGlobalOpcodeTx, tmnxDot1agCfmScalarsGroupV12v0=tmnxDot1agCfmScalarsGroupV12v0, TmnxDot1agCfmCcmInterval=TmnxDot1agCfmCcmInterval, tmnxDot1agCfmMepCrcFailures=tmnxDot1agCfmMepCrcFailures, tmnxDot1agCfmMaMgmtAdminName=tmnxDot1agCfmMaMgmtAdminName, tmnxDot1agCfmGlobalGroupV9v0=tmnxDot1agCfmGlobalGroupV9v0, tmnxDot1agCfmMepCsfRxState=tmnxDot1agCfmMepCsfRxState, tmnxDot1agCfmNotifyObjsGroup=tmnxDot1agCfmNotifyObjsGroup, tmnxDot1agCfmMepFcltyFaultNotify=tmnxDot1agCfmMepFcltyFaultNotify, tmnxDot1agCfmMepLbmRxIndex=tmnxDot1agCfmMepLbmRxIndex, tmnxDot1agMIBObjs=tmnxDot1agMIBObjs, tmnxDot1agCfmMdMgmt=tmnxDot1agCfmMdMgmt, tmnxDot1agCfmPVStackMacAddress=tmnxDot1agCfmPVStackMacAddress, tmnxDot1agCfmMepSlmTWTargetMepId=tmnxDot1agCfmMepSlmTWTargetMepId, tmnxDot1agCfmMepMgmtDirection=tmnxDot1agCfmMepMgmtDirection, tmnxDot1agCfmPVStackifIndex=tmnxDot1agCfmPVStackifIndex, tmnxDot1agCfmPVStackMdLevel=tmnxDot1agCfmPVStackMdLevel, tmnxDot1agCfmMdMgmtFormat=tmnxDot1agCfmMdMgmtFormat, tmnxDot1agCfmComplianceV15v1=tmnxDot1agCfmComplianceV15v1, tmnxDot1agCfmComplianceV12v0=tmnxDot1agCfmComplianceV12v0, Dot1agCfmStatisticOpcodeName=Dot1agCfmStatisticOpcodeName, tmnxDot1agCfmMepTxCcm=tmnxDot1agCfmMepTxCcm, tmnxDot1agCfmMdMgmtEntry=tmnxDot1agCfmMdMgmtEntry, tmnxDot1agCfmMepSlmRemoteMacAddr=tmnxDot1agCfmMepSlmRemoteMacAddr, tmnxDot1agCfmMepLbmSeqNumber=tmnxDot1agCfmMepLbmSeqNumber, tmnxDot1agCfmMaMgmtName=tmnxDot1agCfmMaMgmtName, tmnxDot1agCfmMdMgmtName=tmnxDot1agCfmMdMgmtName, tmnxDot1agCfmMepMgmtFcltyVlanId=tmnxDot1agCfmMepMgmtFcltyVlanId, tmnxDot1agCfmComplianceV9v0=tmnxDot1agCfmComplianceV9v0, tmnxDot1agCfmMepCreationOrigin=tmnxDot1agCfmMepCreationOrigin, tmnxDot1agCfmMepTxEthVsmGrace=tmnxDot1agCfmMepTxEthVsmGrace, tmnxDot1agCfmMip=tmnxDot1agCfmMip, tmnxDot1agCfmSdpPVStackMaIndex=tmnxDot1agCfmSdpPVStackMaIndex, tmnxDot1agCfmSapMipPrimaryVlanId=tmnxDot1agCfmSapMipPrimaryVlanId, tmnxDot1agCfmV12v0Groups=tmnxDot1agCfmV12v0Groups, tmnxDot1agCfmMepSlmOWDataSize=tmnxDot1agCfmMepSlmOWDataSize, tmnxDot1agCfmDefaultMdGroupV14v0=tmnxDot1agCfmDefaultMdGroupV14v0, tmnxDot1agCfmMepTxLbmInterval=tmnxDot1agCfmMepTxLbmInterval, tmnxDot1agCfmMaGroupV10v0=tmnxDot1agCfmMaGroupV10v0, tmnxDot1agCfmMepDelayRsltEntry=tmnxDot1agCfmMepDelayRsltEntry, tmnxDot1agCfmMepGroupV13v0=tmnxDot1agCfmMepGroupV13v0, tmnxDot1agCfmGlobalOpcode=tmnxDot1agCfmGlobalOpcode, tmnxDot1agCfmComplianceV14v0=tmnxDot1agCfmComplianceV14v0, tmnxDot1agCfmMepDMTestComplete=tmnxDot1agCfmMepDMTestComplete, tmnxDot1agCfmMipNotifyGroup=tmnxDot1agCfmMipNotifyGroup, tmnxDot1agCfmV19v0Groups=tmnxDot1agCfmV19v0Groups, tmnxDot1agAutoMdIndexRangeStart=tmnxDot1agAutoMdIndexRangeStart, tmnxDot1agCfmMepOWDTPriority=tmnxDot1agCfmMepOWDTPriority, tmnxDot1agCfmMdMgmtMdLevel=tmnxDot1agCfmMdMgmtMdLevel, tmnxDot1agCfmMaBrNameGroup=tmnxDot1agCfmMaBrNameGroup, tmnxDot1agCfmStackVlanIdOrNone=tmnxDot1agCfmStackVlanIdOrNone, tmnxDot1agCfmLearnedRmtChngdFlag=tmnxDot1agCfmLearnedRmtChngdFlag, TmnxDot1agCfmMaIndexOrNone=TmnxDot1agCfmMaIndexOrNone, tmnxDot1agCfmPVStackVlanIdOrNone=tmnxDot1agCfmPVStackVlanIdOrNone, tmnxDot1agCfmMepCsfEnable=tmnxDot1agCfmMepCsfEnable, tmnxDot1agCfmMepOpcodeTx=tmnxDot1agCfmMepOpcodeTx, tmnxDot1agCfmMepMgmtFcltyIfIndex=tmnxDot1agCfmMepMgmtFcltyIfIndex, tmnxDot1agCfmMaMgmtEntry=tmnxDot1agCfmMaMgmtEntry, tmnxDot1agCfmGlobalPacketRxCount=tmnxDot1agCfmGlobalPacketRxCount, tmnxDot1agCfmMepTWDTPriority=tmnxDot1agCfmMepTWDTPriority, tmnxDot1agCfmSapMipIfIndex=tmnxDot1agCfmSapMipIfIndex, tmnxDot1agCfmMepMcastLbmGroup=tmnxDot1agCfmMepMcastLbmGroup, tmnxDot1agCfmMdEntry=tmnxDot1agCfmMdEntry, tmnxDot1agCfmSdpMipPrimaryVlanId=tmnxDot1agCfmSdpMipPrimaryVlanId, tmnxDot1agCfmMaBrNameRowStatus=tmnxDot1agCfmMaBrNameRowStatus, tmnxDot1agCfmLbmLbrMepGroupV15v0=tmnxDot1agCfmLbmLbrMepGroupV15v0, tmnxDot1agCfmMaNetHoldDownTimer=tmnxDot1agCfmMaNetHoldDownTimer, tmnxDot1agCfmSdpPVStackMacAddr=tmnxDot1agCfmSdpPVStackMacAddr, tmnxDot1agCfmMaMgmtTable=tmnxDot1agCfmMaMgmtTable, tmnxDot1agCfmMaNetAutoDiscAdmin=tmnxDot1agCfmMaNetAutoDiscAdmin, tmnxDot1AgCfmComplianceV16v0=tmnxDot1AgCfmComplianceV16v0, tmnxDot1agCfmSdpBindStackGroup=tmnxDot1agCfmSdpBindStackGroup, tmnxDot1agCfmPVStackDirection=tmnxDot1agCfmPVStackDirection, tmnxDot1agCfmMepSlmTWIntrvlUnits=tmnxDot1agCfmMepSlmTWIntrvlUnits, tmnxDot1agCfmMepFcltyType=tmnxDot1agCfmMepFcltyType, tmnxDot1agCfmMaBrNameMhfCreation=tmnxDot1agCfmMaBrNameMhfCreation, tmnxDot1agCfmMepSlmTWDataSize=tmnxDot1agCfmMepSlmTWDataSize, tmnxDot1agCfmMepMgmtIfIndex=tmnxDot1agCfmMepMgmtIfIndex, tmnxDot1agCfmMepMgmtSdpId=tmnxDot1agCfmMepMgmtSdpId, tmnxDot1agCfmSdpPVStackMepId=tmnxDot1agCfmSdpPVStackMepId, tmnxDot1agCfmMepGroup=tmnxDot1agCfmMepGroup, tmnxDot1agCfmMepSlmPacketLossOut=tmnxDot1agCfmMepSlmPacketLossOut, tmnxDot1agCfmMepEthBnReceive=tmnxDot1agCfmMepEthBnReceive, tmnxDot1agCfmAdminNameGroupExt=tmnxDot1agCfmAdminNameGroupExt, tmnxDot1agCfmMepTxGrace=tmnxDot1agCfmMepTxGrace, tmnxDot1agCfmMepAisLowPrioDef=tmnxDot1agCfmMepAisLowPrioDef, tmnxDot1agCfmMepOWDTMacAddress=tmnxDot1agCfmMepOWDTMacAddress, tmnxDot1agCfmMepOWDTLstDstMac=tmnxDot1agCfmMepOWDTLstDstMac, tmnxDot1agCfmMepEthEdPriority=tmnxDot1agCfmMepEthEdPriority, tmnxDot1agCfmMepSlmOWPriority=tmnxDot1agCfmMepSlmOWPriority, tmnxDot1agCfmDefaultMdTable=tmnxDot1agCfmDefaultMdTable, tmnxDot1agCfmSLMConfigGroup=tmnxDot1agCfmSLMConfigGroup, tmnxDot1agCfmMepSlmTWSendCount=tmnxDot1agCfmMepSlmTWSendCount, tmnxDot1agCfmComplianceV15v0=tmnxDot1agCfmComplianceV15v0, tmnxDot1agCfmMepLbmSvcActResp=tmnxDot1agCfmMepLbmSvcActResp, tmnxDot1agCfmTstMepIdGroupV15v0=tmnxDot1agCfmTstMepIdGroupV15v0, tmnxDot1agCfmSapMipRowStatus=tmnxDot1agCfmSapMipRowStatus, tmnxDot1agCfmMepSlmTWMacAddress=tmnxDot1agCfmMepSlmTWMacAddress, tmnxDot1agCfmComplianceV8v0=tmnxDot1agCfmComplianceV8v0, tmnxDot1agCfmMdMgmtRowStatus=tmnxDot1agCfmMdMgmtRowStatus, tmnxDot1agCfmMepMacAddress=tmnxDot1agCfmMepMacAddress, tmnxDot1agCfmMepCurrCrcFailures=tmnxDot1agCfmMepCurrCrcFailures, tmnxDot1agCfmMepSlmTWTestEntry=tmnxDot1agCfmMepSlmTWTestEntry, tmnxDot1agCfmSapMipSrcMacAddress=tmnxDot1agCfmSapMipSrcMacAddress, tmnxDot1agCfmDefaultMdEntry=tmnxDot1agCfmDefaultMdEntry, tmnxDot1agCfmMepSlmOWInterval=tmnxDot1agCfmMepSlmOWInterval, TmnxDot1agCfmMaintAssocNameType=TmnxDot1agCfmMaintAssocNameType, tmnxDot1agCfmMaBrNamePVlanId=tmnxDot1agCfmMaBrNamePVlanId, tmnxDot1agCfmMepCollectLmmStats=tmnxDot1agCfmMepCollectLmmStats, tmnxDot1agCfmMepTable=tmnxDot1agCfmMepTable, tmnxDot1agCfmSdpPVStackDirection=tmnxDot1agCfmSdpPVStackDirection, tmnxDot1agCfmGlobalPacketDiscard=tmnxDot1agCfmGlobalPacketDiscard, tmnxDot1agCfmMepCcmTxPortStatus=tmnxDot1agCfmMepCcmTxPortStatus, tmnxDot1agCfmGlobalObjs=tmnxDot1agCfmGlobalObjs, tmnxDot1agCfmMepSlmTWTimeout=tmnxDot1agCfmMepSlmTWTimeout, tmnxDot1agCfmVStackDirection=tmnxDot1agCfmVStackDirection, tmnxDot1agCfmV11v0Groups=tmnxDot1agCfmV11v0Groups, tmnxDot1agCfmMepTxEthEd=tmnxDot1agCfmMepTxEthEd, tmnxDot1agCfmSdpMipRowStatus=tmnxDot1agCfmSdpMipRowStatus, tmnxDot1agCfmMaCompEntry=tmnxDot1agCfmMaCompEntry, tmnxDot1agCfmStackMaIndex=tmnxDot1agCfmStackMaIndex, tmnxDot1agCfmMepEthBnUpdPacTimer=tmnxDot1agCfmMepEthBnUpdPacTimer, tmnxDot1agCfmV7v0Groups=tmnxDot1agCfmV7v0Groups, tmnxDot1agCfmGraceTxEnable=tmnxDot1agCfmGraceTxEnable, tmnxDot1agCfmMepMgmtEntry=tmnxDot1agCfmMepMgmtEntry, tmnxDot1agCfmMepSlmPacketIn=tmnxDot1agCfmMepSlmPacketIn, tmnxDot1agCfmMaMepListAutoDiscvd=tmnxDot1agCfmMaMepListAutoDiscvd, tmnxDot1agCfmStatsGroupV12v0=tmnxDot1agCfmStatsGroupV12v0, tmnxDot1agCfmSdpPVStackMdLevel=tmnxDot1agCfmSdpPVStackMdLevel, tmnxDot1agCfmSdpPVStackVcId=tmnxDot1agCfmSdpPVStackVcId, tmnxDot1agCfmMepFcltyFaultClear=tmnxDot1agCfmMepFcltyFaultClear, tmnxDot1agCfmMEPMgmtGroupV11v0=tmnxDot1agCfmMEPMgmtGroupV11v0, tmnxDot1agCfmMepCcmTxIfStatus=tmnxDot1agCfmMepCcmTxIfStatus, tmnxDot1agCfmMepAisMegLevel=tmnxDot1agCfmMepAisMegLevel, tmnxDot1agCfmMa=tmnxDot1agCfmMa, tmnxDot1agCfmMipEvaluation=tmnxDot1agCfmMipEvaluation, tmnxDot1agCfmMepEthRxAisInterval=tmnxDot1agCfmMepEthRxAisInterval, tmnxDot1agCfmSdpBindStackTable=tmnxDot1agCfmSdpBindStackTable, tmnxDot1agCfmV15v0Groups=tmnxDot1agCfmV15v0Groups, tmnxDot1agLearnedRemoteMacObjs=tmnxDot1agLearnedRemoteMacObjs, tmnxDot1agCfmMepEthTestThreshold=tmnxDot1agCfmMepEthTestThreshold, tmnxDot1agCfmMepIfSupportEnable=tmnxDot1agCfmMepIfSupportEnable, tmnxDot1agCfmSdpBindStackDirection=tmnxDot1agCfmSdpBindStackDirection, tmnxDot1agCfmStackDirection=tmnxDot1agCfmStackDirection, tmnxDot1agCfmStackMacAddress=tmnxDot1agCfmStackMacAddress, tmnxDot1agCfmMipGroupV8v0=tmnxDot1agCfmMipGroupV8v0, tmnxDot1agCfmMepMgmtPrimaryVid=tmnxDot1agCfmMepMgmtPrimaryVid, tmnxDot1agCfmMaMgmtAutoDiscAdmin=tmnxDot1agCfmMaMgmtAutoDiscAdmin, tmnxDot1agCfmGlobalOpcodeRx=tmnxDot1agCfmGlobalOpcodeRx, tmnxDot1agCfmMepDelayTestType=tmnxDot1agCfmMepDelayTestType, tmnxDot1agCfmMdAdminName=tmnxDot1agCfmMdAdminName, tmnxDot1agCfmMepEthAisTxFail=tmnxDot1agCfmMepEthAisTxFail, tmnxDot1agCfmMepCcmIgnoreTLVs=tmnxDot1agCfmMepCcmIgnoreTLVs)
