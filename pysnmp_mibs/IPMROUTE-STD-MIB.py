# PySNMP SMI module. Autogenerated from smidump -f python IPMROUTE-STD-MIB
# by libsmi2pysnmp-0.0.3-alpha at Wed Nov 10 12:10:22 2004,
# Python version (2, 2, 1, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pysnmp.asn1 import subtypes

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( IANAipMRouteProtocol, IANAipRouteProtocol, ) = mibBuilder.importSymbols("IANA-RTPROTO-MIB", "IANAipMRouteProtocol", "IANAipRouteProtocol")
( InterfaceIndex, InterfaceIndexOrZero, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Counter64, Gauge32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibVariable, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Gauge32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibVariable", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "mib-2")
( RowStatus, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue")

# Types

class LanguageTag(TextualConvention, OctetString):
    subtypeConstraints = OctetString.subtypeConstraints + ( subtypes.ValueRangeConstraint(1, 100), )
    pass


# Objects

ipMRouteStdMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 83))
ipMRouteMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 83, 1))
ipMRoute = MibIdentifier((1, 3, 6, 1, 2, 1, 83, 1, 1))
ipMRouteEnable = MibVariable((1, 3, 6, 1, 2, 1, 83, 1, 1, 1), Integer().addConstraints(subtypes.SingleValueConstraint(2,1,)).addNamedValues(("enabled", 1), ("disabled", 2), )).setMaxAccess("readwrite")
ipMRouteTable = MibTable((1, 3, 6, 1, 2, 1, 83, 1, 1, 2))
ipMRouteEntry = MibTableRow((1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1)).setIndexNames((0, "IPMROUTE-STD-MIB", "ipMRouteGroup"), (0, "IPMROUTE-STD-MIB", "ipMRouteSource"), (0, "IPMROUTE-STD-MIB", "ipMRouteSourceMask"))
ipMRouteGroup = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 1)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("noaccess"))
ipMRouteSource = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 2)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("noaccess"))
ipMRouteSourceMask = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 3)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("noaccess"))
ipMRouteUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 4)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("readonly"))
ipMRouteInIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 5)).setColumnInitializer(MibVariable((), InterfaceIndexOrZero()).setMaxAccess("readonly"))
ipMRouteUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 6)).setColumnInitializer(MibVariable((), TimeTicks()).setMaxAccess("readonly"))
ipMRouteExpiryTime = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 7)).setColumnInitializer(MibVariable((), TimeTicks()).setMaxAccess("readonly"))
ipMRoutePkts = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 8)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ipMRouteDifferentInIfPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 9)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ipMRouteOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 10)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ipMRouteProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 11)).setColumnInitializer(MibVariable((), IANAipMRouteProtocol()).setMaxAccess("readonly"))
ipMRouteRtProto = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 12)).setColumnInitializer(MibVariable((), IANAipRouteProtocol()).setMaxAccess("readonly"))
ipMRouteRtAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 13)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("readonly"))
ipMRouteRtMask = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 14)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("readonly"))
ipMRouteRtType = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 15)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(1,2,)).addNamedValues(("unicast", 1), ("multicast", 2), )).setMaxAccess("readonly"))
ipMRouteHCOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 16)).setColumnInitializer(MibVariable((), Counter64()).setMaxAccess("readonly"))
ipMRouteNextHopTable = MibTable((1, 3, 6, 1, 2, 1, 83, 1, 1, 3))
ipMRouteNextHopEntry = MibTableRow((1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1)).setIndexNames((0, "IPMROUTE-STD-MIB", "ipMRouteNextHopGroup"), (0, "IPMROUTE-STD-MIB", "ipMRouteNextHopSource"), (0, "IPMROUTE-STD-MIB", "ipMRouteNextHopSourceMask"), (0, "IPMROUTE-STD-MIB", "ipMRouteNextHopIfIndex"), (0, "IPMROUTE-STD-MIB", "ipMRouteNextHopAddress"))
ipMRouteNextHopGroup = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 1)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("noaccess"))
ipMRouteNextHopSource = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 2)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("noaccess"))
ipMRouteNextHopSourceMask = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 3)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("noaccess"))
ipMRouteNextHopIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 4)).setColumnInitializer(MibVariable((), InterfaceIndex()).setMaxAccess("noaccess"))
ipMRouteNextHopAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 5)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("noaccess"))
ipMRouteNextHopState = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 6)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(1,2,)).addNamedValues(("pruned", 1), ("forwarding", 2), )).setMaxAccess("readonly"))
ipMRouteNextHopUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 7)).setColumnInitializer(MibVariable((), TimeTicks()).setMaxAccess("readonly"))
ipMRouteNextHopExpiryTime = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 8)).setColumnInitializer(MibVariable((), TimeTicks()).setMaxAccess("readonly"))
ipMRouteNextHopClosestMemberHops = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 9)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readonly"))
ipMRouteNextHopProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 10)).setColumnInitializer(MibVariable((), IANAipMRouteProtocol()).setMaxAccess("readonly"))
ipMRouteNextHopPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 11)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ipMRouteInterfaceTable = MibTable((1, 3, 6, 1, 2, 1, 83, 1, 1, 4))
ipMRouteInterfaceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1)).setIndexNames((0, "IPMROUTE-STD-MIB", "ipMRouteInterfaceIfIndex"))
ipMRouteInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1, 1)).setColumnInitializer(MibVariable((), InterfaceIndex()).setMaxAccess("noaccess"))
ipMRouteInterfaceTtl = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1, 2)).setColumnInitializer(MibVariable((), Integer32().addConstraints(subtypes.ValueRangeConstraint(0, 255))).setMaxAccess("readwrite"))
ipMRouteInterfaceProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1, 3)).setColumnInitializer(MibVariable((), IANAipMRouteProtocol()).setMaxAccess("readonly"))
ipMRouteInterfaceRateLimit = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1, 4)).setColumnInitializer(MibVariable((), Integer32().set(0)).setMaxAccess("readwrite"))
ipMRouteInterfaceInMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1, 5)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ipMRouteInterfaceOutMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1, 6)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ipMRouteInterfaceHCInMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1, 7)).setColumnInitializer(MibVariable((), Counter64()).setMaxAccess("readonly"))
ipMRouteInterfaceHCOutMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1, 8)).setColumnInitializer(MibVariable((), Counter64()).setMaxAccess("readonly"))
ipMRouteBoundaryTable = MibTable((1, 3, 6, 1, 2, 1, 83, 1, 1, 5))
ipMRouteBoundaryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 83, 1, 1, 5, 1)).setIndexNames((0, "IPMROUTE-STD-MIB", "ipMRouteBoundaryIfIndex"), (0, "IPMROUTE-STD-MIB", "ipMRouteBoundaryAddress"), (0, "IPMROUTE-STD-MIB", "ipMRouteBoundaryAddressMask"))
ipMRouteBoundaryIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 5, 1, 1)).setColumnInitializer(MibVariable((), InterfaceIndex()).setMaxAccess("noaccess"))
ipMRouteBoundaryAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 5, 1, 2)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("noaccess"))
ipMRouteBoundaryAddressMask = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 5, 1, 3)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("noaccess"))
ipMRouteBoundaryStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 5, 1, 4)).setColumnInitializer(MibVariable((), RowStatus()).setMaxAccess("readwrite"))
ipMRouteScopeNameTable = MibTable((1, 3, 6, 1, 2, 1, 83, 1, 1, 6))
ipMRouteScopeNameEntry = MibTableRow((1, 3, 6, 1, 2, 1, 83, 1, 1, 6, 1)).setIndexNames((0, "IPMROUTE-STD-MIB", "ipMRouteScopeNameAddress"), (0, "IPMROUTE-STD-MIB", "ipMRouteScopeNameAddressMask"), (0, "IPMROUTE-STD-MIB", "ipMRouteScopeNameLanguage"))
ipMRouteScopeNameAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 6, 1, 1)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("noaccess"))
ipMRouteScopeNameAddressMask = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 6, 1, 2)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("noaccess"))
ipMRouteScopeNameLanguage = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 6, 1, 3)).setColumnInitializer(MibVariable((), LanguageTag()).setMaxAccess("noaccess"))
ipMRouteScopeNameString = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 6, 1, 4)).setColumnInitializer(MibVariable((), SnmpAdminString()).setMaxAccess("readwrite"))
ipMRouteScopeNameDefault = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 6, 1, 5)).setColumnInitializer(MibVariable((), TruthValue()).setMaxAccess("readwrite"))
ipMRouteScopeNameStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 83, 1, 1, 6, 1, 6)).setColumnInitializer(MibVariable((), RowStatus()).setMaxAccess("readwrite"))
ipMRouteEntryCount = MibVariable((1, 3, 6, 1, 2, 1, 83, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
ipMRouteMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 83, 2))
ipMRouteMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 83, 2, 1))
ipMRouteMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 83, 2, 2))

# Augmentions

# Groups

ipMRouteMIBRouteGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 83, 2, 2, 6)).setObjects(("IPMROUTE-STD-MIB", "ipMRouteRtType"), ("IPMROUTE-STD-MIB", "ipMRouteRtAddress"), ("IPMROUTE-STD-MIB", "ipMRouteRtProto"), ("IPMROUTE-STD-MIB", "ipMRouteRtMask"), )
ipMRouteMIBBoundaryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 83, 2, 2, 3)).setObjects(("IPMROUTE-STD-MIB", "ipMRouteScopeNameString"), ("IPMROUTE-STD-MIB", "ipMRouteBoundaryStatus"), ("IPMROUTE-STD-MIB", "ipMRouteScopeNameDefault"), ("IPMROUTE-STD-MIB", "ipMRouteScopeNameStatus"), )
ipMRouteMIBPktsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 83, 2, 2, 7)).setObjects(("IPMROUTE-STD-MIB", "ipMRouteOctets"), ("IPMROUTE-STD-MIB", "ipMRoutePkts"), ("IPMROUTE-STD-MIB", "ipMRouteDifferentInIfPackets"), )
ipMRouteMIBHCInterfaceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 83, 2, 2, 5)).setObjects(("IPMROUTE-STD-MIB", "ipMRouteHCOctets"), ("IPMROUTE-STD-MIB", "ipMRouteInterfaceHCInMcastOctets"), ("IPMROUTE-STD-MIB", "ipMRouteInterfaceHCOutMcastOctets"), )
ipMRouteMIBBasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 83, 2, 2, 1)).setObjects(("IPMROUTE-STD-MIB", "ipMRouteInIfIndex"), ("IPMROUTE-STD-MIB", "ipMRouteUpTime"), ("IPMROUTE-STD-MIB", "ipMRouteUpstreamNeighbor"), ("IPMROUTE-STD-MIB", "ipMRouteInterfaceOutMcastOctets"), ("IPMROUTE-STD-MIB", "ipMRouteInterfaceInMcastOctets"), ("IPMROUTE-STD-MIB", "ipMRouteExpiryTime"), ("IPMROUTE-STD-MIB", "ipMRouteNextHopState"), ("IPMROUTE-STD-MIB", "ipMRouteInterfaceRateLimit"), ("IPMROUTE-STD-MIB", "ipMRouteEnable"), ("IPMROUTE-STD-MIB", "ipMRouteNextHopExpiryTime"), ("IPMROUTE-STD-MIB", "ipMRouteInterfaceTtl"), ("IPMROUTE-STD-MIB", "ipMRouteNextHopPkts"), ("IPMROUTE-STD-MIB", "ipMRouteEntryCount"), ("IPMROUTE-STD-MIB", "ipMRouteInterfaceProtocol"), ("IPMROUTE-STD-MIB", "ipMRouteNextHopProtocol"), ("IPMROUTE-STD-MIB", "ipMRouteProtocol"), ("IPMROUTE-STD-MIB", "ipMRouteNextHopUpTime"), )
ipMRouteMIBHopCountGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 83, 2, 2, 2)).setObjects(("IPMROUTE-STD-MIB", "ipMRouteNextHopClosestMemberHops"), )
ipMRouteMIBPktsOutGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 83, 2, 2, 4)).setObjects(("IPMROUTE-STD-MIB", "ipMRouteNextHopPkts"), )

# Exports

# Types
mibBuilder.exportSymbols("IPMROUTE-STD-MIB", LanguageTag=LanguageTag)

# Objects
mibBuilder.exportSymbols("IPMROUTE-STD-MIB", ipMRouteStdMIB=ipMRouteStdMIB, ipMRouteMIBObjects=ipMRouteMIBObjects, ipMRoute=ipMRoute, ipMRouteEnable=ipMRouteEnable, ipMRouteTable=ipMRouteTable, ipMRouteEntry=ipMRouteEntry, ipMRouteGroup=ipMRouteGroup, ipMRouteSource=ipMRouteSource, ipMRouteSourceMask=ipMRouteSourceMask, ipMRouteUpstreamNeighbor=ipMRouteUpstreamNeighbor, ipMRouteInIfIndex=ipMRouteInIfIndex, ipMRouteUpTime=ipMRouteUpTime, ipMRouteExpiryTime=ipMRouteExpiryTime, ipMRoutePkts=ipMRoutePkts, ipMRouteDifferentInIfPackets=ipMRouteDifferentInIfPackets, ipMRouteOctets=ipMRouteOctets, ipMRouteProtocol=ipMRouteProtocol, ipMRouteRtProto=ipMRouteRtProto, ipMRouteRtAddress=ipMRouteRtAddress, ipMRouteRtMask=ipMRouteRtMask, ipMRouteRtType=ipMRouteRtType, ipMRouteHCOctets=ipMRouteHCOctets, ipMRouteNextHopTable=ipMRouteNextHopTable, ipMRouteNextHopEntry=ipMRouteNextHopEntry, ipMRouteNextHopGroup=ipMRouteNextHopGroup, ipMRouteNextHopSource=ipMRouteNextHopSource, ipMRouteNextHopSourceMask=ipMRouteNextHopSourceMask, ipMRouteNextHopIfIndex=ipMRouteNextHopIfIndex, ipMRouteNextHopAddress=ipMRouteNextHopAddress, ipMRouteNextHopState=ipMRouteNextHopState, ipMRouteNextHopUpTime=ipMRouteNextHopUpTime, ipMRouteNextHopExpiryTime=ipMRouteNextHopExpiryTime, ipMRouteNextHopClosestMemberHops=ipMRouteNextHopClosestMemberHops, ipMRouteNextHopProtocol=ipMRouteNextHopProtocol, ipMRouteNextHopPkts=ipMRouteNextHopPkts, ipMRouteInterfaceTable=ipMRouteInterfaceTable, ipMRouteInterfaceEntry=ipMRouteInterfaceEntry, ipMRouteInterfaceIfIndex=ipMRouteInterfaceIfIndex, ipMRouteInterfaceTtl=ipMRouteInterfaceTtl, ipMRouteInterfaceProtocol=ipMRouteInterfaceProtocol, ipMRouteInterfaceRateLimit=ipMRouteInterfaceRateLimit, ipMRouteInterfaceInMcastOctets=ipMRouteInterfaceInMcastOctets, ipMRouteInterfaceOutMcastOctets=ipMRouteInterfaceOutMcastOctets, ipMRouteInterfaceHCInMcastOctets=ipMRouteInterfaceHCInMcastOctets, ipMRouteInterfaceHCOutMcastOctets=ipMRouteInterfaceHCOutMcastOctets, ipMRouteBoundaryTable=ipMRouteBoundaryTable, ipMRouteBoundaryEntry=ipMRouteBoundaryEntry, ipMRouteBoundaryIfIndex=ipMRouteBoundaryIfIndex, ipMRouteBoundaryAddress=ipMRouteBoundaryAddress, ipMRouteBoundaryAddressMask=ipMRouteBoundaryAddressMask, ipMRouteBoundaryStatus=ipMRouteBoundaryStatus, ipMRouteScopeNameTable=ipMRouteScopeNameTable, ipMRouteScopeNameEntry=ipMRouteScopeNameEntry, ipMRouteScopeNameAddress=ipMRouteScopeNameAddress, ipMRouteScopeNameAddressMask=ipMRouteScopeNameAddressMask, ipMRouteScopeNameLanguage=ipMRouteScopeNameLanguage, ipMRouteScopeNameString=ipMRouteScopeNameString, ipMRouteScopeNameDefault=ipMRouteScopeNameDefault, ipMRouteScopeNameStatus=ipMRouteScopeNameStatus, ipMRouteEntryCount=ipMRouteEntryCount, ipMRouteMIBConformance=ipMRouteMIBConformance, ipMRouteMIBCompliances=ipMRouteMIBCompliances, ipMRouteMIBGroups=ipMRouteMIBGroups)

# Groups
mibBuilder.exportSymbols("IPMROUTE-STD-MIB", ipMRouteMIBRouteGroup=ipMRouteMIBRouteGroup, ipMRouteMIBBoundaryGroup=ipMRouteMIBBoundaryGroup, ipMRouteMIBPktsGroup=ipMRouteMIBPktsGroup, ipMRouteMIBHCInterfaceGroup=ipMRouteMIBHCInterfaceGroup, ipMRouteMIBBasicGroup=ipMRouteMIBBasicGroup, ipMRouteMIBHopCountGroup=ipMRouteMIBHopCountGroup, ipMRouteMIBPktsOutGroup=ipMRouteMIBPktsOutGroup)
