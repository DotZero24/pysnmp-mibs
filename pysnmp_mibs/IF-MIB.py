# PySNMP SMI module. Autogenerated from smidump -f python IF-MIB
# by libsmi2pysnmp-0.0.4-alpha at Tue Jun 28 11:30:51 2005,
# Python version (2, 4, 0, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( IANAifType, ) = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( snmpTraps, ) = mibBuilder.importSymbols("SNMPv2-MIB", "snmpTraps")
( Bits, Counter32, Counter64, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibVariable, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibVariable", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "mib-2")
( AutonomousType, DisplayString, PhysAddress, RowStatus, TextualConvention, TestAndIncr, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "AutonomousType", "DisplayString", "PhysAddress", "RowStatus", "TextualConvention", "TestAndIncr", "TimeStamp", "TruthValue")

# Types

class InterfaceIndex(TextualConvention, Integer32):
    subtypeSpec = Integer32.subtypeSpec+constraint.ValueRangeConstraint(1,2147483647L)
    pass

class InterfaceIndexOrZero(TextualConvention, Integer32):
    subtypeSpec = Integer32.subtypeSpec+constraint.ValueRangeConstraint(0,2147483647L)
    pass

class OwnerString(TextualConvention, OctetString):
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(0,255)
    pass


# Objects

interfaces = MibIdentifier((1, 3, 6, 1, 2, 1, 2))
ifNumber = MibVariable((1, 3, 6, 1, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
ifTable = MibTable((1, 3, 6, 1, 2, 1, 2, 2))
ifEntry = MibTableRow((1, 3, 6, 1, 2, 1, 2, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
ifIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 1)).setColumnInitializer(MibVariable((), InterfaceIndex()).setMaxAccess("readonly"))
ifDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 2)).setColumnInitializer(MibVariable((), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess("readonly"))
ifType = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 3)).setColumnInitializer(MibVariable((), IANAifType()).setMaxAccess("readonly"))
ifMtu = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 4)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readonly"))
ifSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 5)).setColumnInitializer(MibVariable((), Gauge32()).setMaxAccess("readonly"))
ifPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 6)).setColumnInitializer(MibVariable((), PhysAddress()).setMaxAccess("readonly"))
ifAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 7)).setColumnInitializer(MibVariable((), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,)).subtype(namedValues=namedval.NamedValues(("up", 1), ("down", 2), ("testing", 3), ))).setMaxAccess("readwrite"))
ifOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 8)).setColumnInitializer(MibVariable((), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,7,4,3,1,2,6,)).subtype(namedValues=namedval.NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7), ))).setMaxAccess("readonly"))
ifLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 9)).setColumnInitializer(MibVariable((), TimeTicks()).setMaxAccess("readonly"))
ifInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 10)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ifInUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 11)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ifInNUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 12)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ifInDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 13)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ifInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 14)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ifInUnknownProtos = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 15)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ifOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 16)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ifOutUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 17)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ifOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 18)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ifOutDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 19)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ifOutErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 20)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ifOutQLen = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 21)).setColumnInitializer(MibVariable((), Gauge32()).setMaxAccess("readonly"))
ifSpecific = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 22)).setColumnInitializer(MibVariable((), ObjectIdentifier()).setMaxAccess("readonly"))
ifMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 31))
ifMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 31, 1))
ifXTable = MibTable((1, 3, 6, 1, 2, 1, 31, 1, 1))
ifXEntry = MibTableRow((1, 3, 6, 1, 2, 1, 31, 1, 1, 1))
ifName = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 1)).setColumnInitializer(MibVariable((), DisplayString()).setMaxAccess("readonly"))
ifInMulticastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 2)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ifInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 3)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ifOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 4)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ifOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 5)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
ifHCInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 6)).setColumnInitializer(MibVariable((), Counter64()).setMaxAccess("readonly"))
ifHCInUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 7)).setColumnInitializer(MibVariable((), Counter64()).setMaxAccess("readonly"))
ifHCInMulticastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 8)).setColumnInitializer(MibVariable((), Counter64()).setMaxAccess("readonly"))
ifHCInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 9)).setColumnInitializer(MibVariable((), Counter64()).setMaxAccess("readonly"))
ifHCOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 10)).setColumnInitializer(MibVariable((), Counter64()).setMaxAccess("readonly"))
ifHCOutUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 11)).setColumnInitializer(MibVariable((), Counter64()).setMaxAccess("readonly"))
ifHCOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 12)).setColumnInitializer(MibVariable((), Counter64()).setMaxAccess("readonly"))
ifHCOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 13)).setColumnInitializer(MibVariable((), Counter64()).setMaxAccess("readonly"))
ifLinkUpDownTrapEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 14)).setColumnInitializer(MibVariable((), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(("enabled", 1), ("disabled", 2), ))).setMaxAccess("readwrite"))
ifHighSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 15)).setColumnInitializer(MibVariable((), Gauge32()).setMaxAccess("readonly"))
ifPromiscuousMode = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 16)).setColumnInitializer(MibVariable((), TruthValue()).setMaxAccess("readwrite"))
ifConnectorPresent = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 17)).setColumnInitializer(MibVariable((), TruthValue()).setMaxAccess("readonly"))
ifAlias = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 18)).setColumnInitializer(MibVariable((), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess("readwrite"))
ifCounterDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 19)).setColumnInitializer(MibVariable((), TimeStamp()).setMaxAccess("readonly"))
ifStackTable = MibTable((1, 3, 6, 1, 2, 1, 31, 1, 2))
ifStackEntry = MibTableRow((1, 3, 6, 1, 2, 1, 31, 1, 2, 1)).setIndexNames((0, "IF-MIB", "ifStackHigherLayer"), (0, "IF-MIB", "ifStackLowerLayer"))
ifStackHigherLayer = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 2, 1, 1)).setColumnInitializer(MibVariable((), InterfaceIndexOrZero()).setMaxAccess("noaccess"))
ifStackLowerLayer = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 2, 1, 2)).setColumnInitializer(MibVariable((), InterfaceIndexOrZero()).setMaxAccess("noaccess"))
ifStackStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 2, 1, 3)).setColumnInitializer(MibVariable((), RowStatus()).setMaxAccess("readwrite"))
ifTestTable = MibTable((1, 3, 6, 1, 2, 1, 31, 1, 3))
ifTestEntry = MibTableRow((1, 3, 6, 1, 2, 1, 31, 1, 3, 1))
ifTestId = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 3, 1, 1)).setColumnInitializer(MibVariable((), TestAndIncr()).setMaxAccess("readwrite"))
ifTestStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 3, 1, 2)).setColumnInitializer(MibVariable((), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(("notInUse", 1), ("inUse", 2), ))).setMaxAccess("readwrite"))
ifTestType = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 3, 1, 3)).setColumnInitializer(MibVariable((), AutonomousType()).setMaxAccess("readwrite"))
ifTestResult = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 3, 1, 4)).setColumnInitializer(MibVariable((), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,7,5,6,3,4,)).subtype(namedValues=namedval.NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7), ))).setMaxAccess("readonly"))
ifTestCode = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 3, 1, 5)).setColumnInitializer(MibVariable((), ObjectIdentifier()).setMaxAccess("readonly"))
ifTestOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 3, 1, 6)).setColumnInitializer(MibVariable((), OwnerString()).setMaxAccess("readwrite"))
ifRcvAddressTable = MibTable((1, 3, 6, 1, 2, 1, 31, 1, 4))
ifRcvAddressEntry = MibTableRow((1, 3, 6, 1, 2, 1, 31, 1, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IF-MIB", "ifRcvAddressAddress"))
ifRcvAddressAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 4, 1, 1)).setColumnInitializer(MibVariable((), PhysAddress()).setMaxAccess("noaccess"))
ifRcvAddressStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 4, 1, 2)).setColumnInitializer(MibVariable((), RowStatus()).setMaxAccess("readwrite"))
ifRcvAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 31, 1, 4, 1, 3)).setColumnInitializer(MibVariable((), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(("other", 1), ("volatile", 2), ("nonVolatile", 3), )).clone(2)).setMaxAccess("readwrite"))
ifTableLastChange = MibVariable((1, 3, 6, 1, 2, 1, 31, 1, 5), TimeTicks()).setMaxAccess("readonly")
ifStackLastChange = MibVariable((1, 3, 6, 1, 2, 1, 31, 1, 6), TimeTicks()).setMaxAccess("readonly")
ifConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 31, 2))
ifGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 31, 2, 1))
ifCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 31, 2, 2))

# Augmentions
ifEntry.registerAugmentions(("IF-MIB", "ifTestEntry"))
apply(ifTestEntry.setIndexNames, ifEntry.getIndexNames())
ifEntry.registerAugmentions(("IF-MIB", "ifXEntry"))
apply(ifXEntry.setIndexNames, ifEntry.getIndexNames())

# Notifications

linkUp = NotificationType((1, 3, 6, 1, 6, 3, 1, 1, 5, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), )
linkDown = NotificationType((1, 3, 6, 1, 6, 3, 1, 1, 5, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), )

# Groups

ifPacketGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 31, 2, 1, 4)).setObjects(("IF-MIB", "ifInDiscards"), ("IF-MIB", "ifInErrors"), ("IF-MIB", "ifOutBroadcastPkts"), ("IF-MIB", "ifInOctets"), ("IF-MIB", "ifInBroadcastPkts"), ("IF-MIB", "ifOutMulticastPkts"), ("IF-MIB", "ifInUcastPkts"), ("IF-MIB", "ifInMulticastPkts"), ("IF-MIB", "ifOutOctets"), ("IF-MIB", "ifOutErrors"), ("IF-MIB", "ifInUnknownProtos"), ("IF-MIB", "ifOutUcastPkts"), ("IF-MIB", "ifOutDiscards"), ("IF-MIB", "ifPromiscuousMode"), ("IF-MIB", "ifMtu"), )
ifFixedLengthGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 31, 2, 1, 2)).setObjects(("IF-MIB", "ifInErrors"), ("IF-MIB", "ifOutOctets"), ("IF-MIB", "ifInUnknownProtos"), ("IF-MIB", "ifInOctets"), ("IF-MIB", "ifOutErrors"), )
ifHCPacketGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 31, 2, 1, 5)).setObjects(("IF-MIB", "ifInDiscards"), ("IF-MIB", "ifInErrors"), ("IF-MIB", "ifOutBroadcastPkts"), ("IF-MIB", "ifInOctets"), ("IF-MIB", "ifInMulticastPkts"), ("IF-MIB", "ifOutMulticastPkts"), ("IF-MIB", "ifInUcastPkts"), ("IF-MIB", "ifHCInOctets"), ("IF-MIB", "ifInBroadcastPkts"), ("IF-MIB", "ifHCOutOctets"), ("IF-MIB", "ifOutOctets"), ("IF-MIB", "ifOutErrors"), ("IF-MIB", "ifInUnknownProtos"), ("IF-MIB", "ifOutUcastPkts"), ("IF-MIB", "ifOutDiscards"), ("IF-MIB", "ifPromiscuousMode"), ("IF-MIB", "ifMtu"), )
ifOldObjectsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 31, 2, 1, 12)).setObjects(("IF-MIB", "ifOutQLen"), ("IF-MIB", "ifSpecific"), ("IF-MIB", "ifInNUcastPkts"), ("IF-MIB", "ifOutNUcastPkts"), )
ifStackGroup2 = ObjectGroup((1, 3, 6, 1, 2, 1, 31, 2, 1, 11)).setObjects(("IF-MIB", "ifStackStatus"), ("IF-MIB", "ifStackLastChange"), )
ifCounterDiscontinuityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 31, 2, 1, 13)).setObjects(("IF-MIB", "ifCounterDiscontinuityTime"), )
ifGeneralGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 31, 2, 1, 1)).setObjects(("IF-MIB", "ifConnectorPresent"), ("IF-MIB", "ifSpeed"), ("IF-MIB", "ifType"), ("IF-MIB", "ifHighSpeed"), ("IF-MIB", "ifLinkUpDownTrapEnable"), ("IF-MIB", "ifLastChange"), ("IF-MIB", "ifPhysAddress"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifDescr"), ("IF-MIB", "ifName"), ("IF-MIB", "ifOperStatus"), )
ifTestGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 31, 2, 1, 8)).setObjects(("IF-MIB", "ifTestId"), ("IF-MIB", "ifTestCode"), ("IF-MIB", "ifTestOwner"), ("IF-MIB", "ifTestStatus"), ("IF-MIB", "ifTestResult"), ("IF-MIB", "ifTestType"), )
linkUpDownNotificationsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 31, 2, 1, 14)).setObjects(("IF-MIB", "linkUp"), ("IF-MIB", "linkDown"), )
ifRcvAddressGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 31, 2, 1, 7)).setObjects(("IF-MIB", "ifRcvAddressStatus"), ("IF-MIB", "ifRcvAddressType"), )
ifVHCPacketGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 31, 2, 1, 6)).setObjects(("IF-MIB", "ifInMulticastPkts"), ("IF-MIB", "ifOutBroadcastPkts"), ("IF-MIB", "ifOutMulticastPkts"), ("IF-MIB", "ifOutDiscards"), ("IF-MIB", "ifMtu"), ("IF-MIB", "ifInDiscards"), ("IF-MIB", "ifInErrors"), ("IF-MIB", "ifHCInOctets"), ("IF-MIB", "ifHCOutOctets"), ("IF-MIB", "ifHCInMulticastPkts"), ("IF-MIB", "ifPromiscuousMode"), ("IF-MIB", "ifHCInUcastPkts"), ("IF-MIB", "ifHCOutMulticastPkts"), ("IF-MIB", "ifOutUcastPkts"), ("IF-MIB", "ifInOctets"), ("IF-MIB", "ifInUcastPkts"), ("IF-MIB", "ifOutErrors"), ("IF-MIB", "ifHCOutBroadcastPkts"), ("IF-MIB", "ifInBroadcastPkts"), ("IF-MIB", "ifOutOctets"), ("IF-MIB", "ifHCInBroadcastPkts"), ("IF-MIB", "ifInUnknownProtos"), ("IF-MIB", "ifHCOutUcastPkts"), )
ifStackGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 31, 2, 1, 9)).setObjects(("IF-MIB", "ifStackStatus"), )
ifHCFixedLengthGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 31, 2, 1, 3)).setObjects(("IF-MIB", "ifInErrors"), ("IF-MIB", "ifInOctets"), ("IF-MIB", "ifHCInOctets"), ("IF-MIB", "ifHCOutOctets"), ("IF-MIB", "ifOutOctets"), ("IF-MIB", "ifOutErrors"), ("IF-MIB", "ifInUnknownProtos"), )
ifGeneralInformationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 31, 2, 1, 10)).setObjects(("IF-MIB", "ifConnectorPresent"), ("IF-MIB", "ifSpeed"), ("IF-MIB", "ifType"), ("IF-MIB", "ifTableLastChange"), ("IF-MIB", "ifHighSpeed"), ("IF-MIB", "ifNumber"), ("IF-MIB", "ifLinkUpDownTrapEnable"), ("IF-MIB", "ifLastChange"), ("IF-MIB", "ifPhysAddress"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifDescr"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("IF-MIB", "ifAlias"), ("IF-MIB", "ifOperStatus"), )

# Exports

# Types
mibBuilder.exportSymbols("IF-MIB", InterfaceIndex=InterfaceIndex, InterfaceIndexOrZero=InterfaceIndexOrZero, OwnerString=OwnerString)

# Objects
mibBuilder.exportSymbols("IF-MIB", interfaces=interfaces, ifNumber=ifNumber, ifTable=ifTable, ifEntry=ifEntry, ifIndex=ifIndex, ifDescr=ifDescr, ifType=ifType, ifMtu=ifMtu, ifSpeed=ifSpeed, ifPhysAddress=ifPhysAddress, ifAdminStatus=ifAdminStatus, ifOperStatus=ifOperStatus, ifLastChange=ifLastChange, ifInOctets=ifInOctets, ifInUcastPkts=ifInUcastPkts, ifInNUcastPkts=ifInNUcastPkts, ifInDiscards=ifInDiscards, ifInErrors=ifInErrors, ifInUnknownProtos=ifInUnknownProtos, ifOutOctets=ifOutOctets, ifOutUcastPkts=ifOutUcastPkts, ifOutNUcastPkts=ifOutNUcastPkts, ifOutDiscards=ifOutDiscards, ifOutErrors=ifOutErrors, ifOutQLen=ifOutQLen, ifSpecific=ifSpecific, ifMIB=ifMIB, ifMIBObjects=ifMIBObjects, ifXTable=ifXTable, ifXEntry=ifXEntry, ifName=ifName, ifInMulticastPkts=ifInMulticastPkts, ifInBroadcastPkts=ifInBroadcastPkts, ifOutMulticastPkts=ifOutMulticastPkts, ifOutBroadcastPkts=ifOutBroadcastPkts, ifHCInOctets=ifHCInOctets, ifHCInUcastPkts=ifHCInUcastPkts, ifHCInMulticastPkts=ifHCInMulticastPkts, ifHCInBroadcastPkts=ifHCInBroadcastPkts, ifHCOutOctets=ifHCOutOctets, ifHCOutUcastPkts=ifHCOutUcastPkts, ifHCOutMulticastPkts=ifHCOutMulticastPkts, ifHCOutBroadcastPkts=ifHCOutBroadcastPkts, ifLinkUpDownTrapEnable=ifLinkUpDownTrapEnable, ifHighSpeed=ifHighSpeed, ifPromiscuousMode=ifPromiscuousMode, ifConnectorPresent=ifConnectorPresent, ifAlias=ifAlias, ifCounterDiscontinuityTime=ifCounterDiscontinuityTime, ifStackTable=ifStackTable, ifStackEntry=ifStackEntry, ifStackHigherLayer=ifStackHigherLayer, ifStackLowerLayer=ifStackLowerLayer, ifStackStatus=ifStackStatus, ifTestTable=ifTestTable, ifTestEntry=ifTestEntry, ifTestId=ifTestId, ifTestStatus=ifTestStatus, ifTestType=ifTestType, ifTestResult=ifTestResult, ifTestCode=ifTestCode, ifTestOwner=ifTestOwner, ifRcvAddressTable=ifRcvAddressTable, ifRcvAddressEntry=ifRcvAddressEntry, ifRcvAddressAddress=ifRcvAddressAddress, ifRcvAddressStatus=ifRcvAddressStatus, ifRcvAddressType=ifRcvAddressType, ifTableLastChange=ifTableLastChange, ifStackLastChange=ifStackLastChange, ifConformance=ifConformance, ifGroups=ifGroups, ifCompliances=ifCompliances)

# Notifications
mibBuilder.exportSymbols("IF-MIB", linkUp=linkUp, linkDown=linkDown)

# Groups
mibBuilder.exportSymbols("IF-MIB", ifPacketGroup=ifPacketGroup, ifFixedLengthGroup=ifFixedLengthGroup, ifHCPacketGroup=ifHCPacketGroup, ifOldObjectsGroup=ifOldObjectsGroup, ifStackGroup2=ifStackGroup2, ifCounterDiscontinuityGroup=ifCounterDiscontinuityGroup, ifGeneralGroup=ifGeneralGroup, ifTestGroup=ifTestGroup, linkUpDownNotificationsGroup=linkUpDownNotificationsGroup, ifRcvAddressGroup=ifRcvAddressGroup, ifVHCPacketGroup=ifVHCPacketGroup, ifStackGroup=ifStackGroup, ifHCFixedLengthGroup=ifHCFixedLengthGroup, ifGeneralInformationGroup=ifGeneralInformationGroup)
