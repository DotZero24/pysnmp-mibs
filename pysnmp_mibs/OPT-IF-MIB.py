# PySNMP SMI module. Autogenerated from smidump -f python OPT-IF-MIB
# by libsmi2pysnmp-0.0.7-alpha at Tue Jun 20 21:10:14 2006,
# Python version (2, 4, 3, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, transmission, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "transmission")
( RowPointer, RowStatus, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "RowStatus", "TextualConvention", "TruthValue")

# Types

class OptIfAcTI(OctetString):
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(64,64)
    pass

class OptIfBitRateK(Integer32):
    pass

class OptIfDEGM(Unsigned32):
    subtypeSpec = Unsigned32.subtypeSpec+constraint.ValueRangeConstraint(2,10)
    pass

class OptIfDEGThr(Unsigned32):
    subtypeSpec = Unsigned32.subtypeSpec+constraint.ValueRangeConstraint(1,100)
    pass

class OptIfDirectionality(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(2,1,3,)
    namedValues = namedval.NamedValues(("sink", 1), ("source", 2), ("bidirectional", 3), )
    pass

class OptIfExDAPI(OctetString):
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(16,16)
    pass

class OptIfExSAPI(OctetString):
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(16,16)
    pass

class OptIfIntervalNumber(Unsigned32):
    subtypeSpec = Unsigned32.subtypeSpec+constraint.ValueRangeConstraint(1,96)
    pass

class OptIfSinkOrSource(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(2,1,)
    namedValues = namedval.NamedValues(("sink", 1), ("source", 2), )
    pass

class OptIfTIMDetMode(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(4,1,3,2,)
    namedValues = namedval.NamedValues(("off", 1), ("dapi", 2), ("sapi", 3), ("both", 4), )
    pass

class OptIfTxTI(OctetString):
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(64,64)
    pass


# Objects

optIfMibModule = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 133)).setRevisions(("2003-08-13 00:00",))
optIfObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1))
optIfOTMn = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 1))
optIfOTMnTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1))
optIfOTMnEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOTMnOrder = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
optIfOTMnReduced = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
optIfOTMnBitRates = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 3), Bits().subtype(namedValues=namedval.NamedValues(("bitRateK1", 0), ("bitRateK2", 1), ("bitRateK3", 2), ))).setMaxAccess("readonly")
optIfOTMnInterfaceType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
optIfOTMnTcmMax = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
optIfOTMnOpticalReach = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,2,3,1,5,)).subtype(namedValues=namedval.NamedValues(("intraOffice", 1), ("shortHaul", 2), ("longHaul", 3), ("veryLongHaul", 4), ("ultraLongHaul", 5), ))).setMaxAccess("readonly")
optIfPerfMon = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 2))
optIfPerfMonIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1))
optIfPerfMonIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfPerfMonCurrentTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1, 1, 1), Gauge32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 900))).setMaxAccess("readonly")
optIfPerfMonCurDayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1, 1, 2), Gauge32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 86400))).setMaxAccess("readonly")
optIfPerfMonIntervalNumIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
optIfPerfMonIntervalNumInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
optIfOTSn = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 3))
optIfOTSnConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1))
optIfOTSnConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOTSnDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
optIfOTSnAprStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
optIfOTSnAprControl = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
optIfOTSnTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 4), OptIfTxTI()).setMaxAccess("readwrite")
optIfOTSnDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 5), OptIfExDAPI()).setMaxAccess("readwrite")
optIfOTSnSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 6), OptIfExSAPI()).setMaxAccess("readwrite")
optIfOTSnTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 7), OptIfAcTI()).setMaxAccess("readonly")
optIfOTSnTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 8), OptIfTIMDetMode()).setMaxAccess("readwrite")
optIfOTSnTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
optIfOTSnCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 10), Bits().subtype(namedValues=namedval.NamedValues(("bdiP", 0), ("bdiO", 1), ("bdi", 2), ("tim", 3), ("losP", 4), ("losO", 5), ("los", 6), ))).setMaxAccess("readonly")
optIfOTSnSinkCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2))
optIfOTSnSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOTSnSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOTSnSinkCurrentInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkCurrentLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkCurrentHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
optIfOTSnSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
optIfOTSnSinkCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
optIfOTSnSinkCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
optIfOTSnSinkIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3))
optIfOTSnSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOTSnSinkIntervalNumber"))
optIfOTSnSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 1), OptIfIntervalNumber()).setMaxAccess("noaccess")
optIfOTSnSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
optIfOTSnSinkIntervalLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkIntervalLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkIntervalHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4))
optIfOTSnSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOTSnSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOTSnSinkCurDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkCurDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5))
optIfOTSnSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOTSnSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOTSnSinkPrevDayLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkPrevDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkPrevDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
optIfOTSnSinkPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6))
optIfOTSnSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOTSnSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOTSnSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
optIfOTSnSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
optIfOTSnSrcCurrentInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcCurrentLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 8), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcCurrentHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 9), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
optIfOTSnSrcCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
optIfOTSnSrcIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7))
optIfOTSnSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOTSnSrcIntervalNumber"))
optIfOTSnSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 1), OptIfIntervalNumber()).setMaxAccess("noaccess")
optIfOTSnSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
optIfOTSnSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcIntervalLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcIntervalLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcIntervalHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 8), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8))
optIfOTSnSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOTSnSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOTSnSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcCurDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcCurDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9))
optIfOTSnSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOTSnSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOTSnSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcPrevDayLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcPrevDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 6), Integer32()).setMaxAccess("readonly")
optIfOTSnSrcPrevDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOMSn = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 4))
optIfOMSnConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 1))
optIfOMSnConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOMSnDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
optIfOMSnCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 1, 1, 2), Bits().subtype(namedValues=namedval.NamedValues(("ssfP", 0), ("ssfO", 1), ("ssf", 2), ("bdiP", 3), ("bdiO", 4), ("bdi", 5), ("losP", 6), ))).setMaxAccess("readonly")
optIfOMSnSinkCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2))
optIfOMSnSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOMSnSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOMSnSinkCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
optIfOMSnSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
optIfOMSnSinkCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
optIfOMSnSinkCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
optIfOMSnSinkIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3))
optIfOMSnSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOMSnSinkIntervalNumber"))
optIfOMSnSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 1), OptIfIntervalNumber()).setMaxAccess("noaccess")
optIfOMSnSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
optIfOMSnSinkIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4))
optIfOMSnSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOMSnSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOMSnSinkCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5))
optIfOMSnSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOMSnSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOMSnSinkPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
optIfOMSnSinkPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6))
optIfOMSnSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOMSnSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOMSnSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
optIfOMSnSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
optIfOMSnSrcCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 8), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 9), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
optIfOMSnSrcCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
optIfOMSnSrcIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7))
optIfOMSnSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOMSnSrcIntervalNumber"))
optIfOMSnSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 1), OptIfIntervalNumber()).setMaxAccess("noaccess")
optIfOMSnSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
optIfOMSnSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 6), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 8), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8))
optIfOMSnSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOMSnSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOMSnSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9))
optIfOMSnSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOMSnSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOMSnSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 6), Integer32()).setMaxAccess("readonly")
optIfOMSnSrcPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOChGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 5))
optIfOChGroupConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 1))
optIfOChGroupConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOChGroupDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
optIfOChGroupSinkCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2))
optIfOChGroupSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOChGroupSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOChGroupSinkCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
optIfOChGroupSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
optIfOChGroupSinkCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
optIfOChGroupSinkCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
optIfOChGroupSinkIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3))
optIfOChGroupSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOChGroupSinkIntervalNumber"))
optIfOChGroupSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 1), OptIfIntervalNumber()).setMaxAccess("noaccess")
optIfOChGroupSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
optIfOChGroupSinkIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 8), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4))
optIfOChGroupSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOChGroupSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOChGroupSinkCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5))
optIfOChGroupSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOChGroupSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOChGroupSinkPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
optIfOChGroupSinkPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6))
optIfOChGroupSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOChGroupSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOChGroupSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
optIfOChGroupSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
optIfOChGroupSrcCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 8), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 9), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
optIfOChGroupSrcCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
optIfOChGroupSrcIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7))
optIfOChGroupSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOChGroupSrcIntervalNumber"))
optIfOChGroupSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 1), OptIfIntervalNumber()).setMaxAccess("noaccess")
optIfOChGroupSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
optIfOChGroupSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 6), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 8), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8))
optIfOChGroupSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOChGroupSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOChGroupSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9))
optIfOChGroupSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOChGroupSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOChGroupSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 6), Integer32()).setMaxAccess("readonly")
optIfOChGroupSrcPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 7), Integer32()).setMaxAccess("readonly")
optIfOCh = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 6))
optIfOChConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 1))
optIfOChConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOChDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
optIfOChCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 1, 1, 2), Bits().subtype(namedValues=namedval.NamedValues(("losP", 0), ("los", 1), ("oci", 2), ("ssfP", 3), ("ssfO", 4), ("ssf", 5), ))).setMaxAccess("readonly")
optIfOChSinkCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2))
optIfOChSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOChSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOChSinkCurrentInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOChSinkCurrentLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOChSinkCurrentHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOChSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
optIfOChSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
optIfOChSinkIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3))
optIfOChSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOChSinkIntervalNumber"))
optIfOChSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1, 1), OptIfIntervalNumber()).setMaxAccess("noaccess")
optIfOChSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
optIfOChSinkIntervalLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOChSinkIntervalLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOChSinkIntervalHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOChSinkCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 4))
optIfOChSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOChSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOChSinkCurDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOChSinkCurDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOChSinkPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5))
optIfOChSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOChSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOChSinkPrevDayLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOChSinkPrevDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOChSinkPrevDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOChSrcCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6))
optIfOChSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOChSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOChSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOChSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOChSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOChSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
optIfOChSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
optIfOChSrcIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7))
optIfOChSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOChSrcIntervalNumber"))
optIfOChSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1, 1), OptIfIntervalNumber()).setMaxAccess("noaccess")
optIfOChSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
optIfOChSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOChSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOChSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1, 5), Integer32()).setMaxAccess("readonly")
optIfOChSrcCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 8))
optIfOChSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 8, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOChSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOChSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 8, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOChSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 8, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOChSrcPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9))
optIfOChSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOChSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
optIfOChSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9, 1, 2), Integer32()).setMaxAccess("readonly")
optIfOChSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9, 1, 3), Integer32()).setMaxAccess("readonly")
optIfOChSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9, 1, 4), Integer32()).setMaxAccess("readonly")
optIfOTUk = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 7))
optIfOTUkConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1))
optIfOTUkConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfOTUkDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
optIfOTUkBitRateK = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 2), OptIfBitRateK()).setMaxAccess("readonly")
optIfOTUkTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 3), OptIfTxTI()).setMaxAccess("readwrite")
optIfOTUkDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 4), OptIfExDAPI()).setMaxAccess("readwrite")
optIfOTUkSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 5), OptIfExSAPI()).setMaxAccess("readwrite")
optIfOTUkTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 6), OptIfAcTI()).setMaxAccess("readonly")
optIfOTUkTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 7), OptIfTIMDetMode()).setMaxAccess("readwrite")
optIfOTUkTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
optIfOTUkDEGThr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 9), OptIfDEGThr()).setMaxAccess("readwrite")
optIfOTUkDEGM = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 10), OptIfDEGM()).setMaxAccess("readwrite")
optIfOTUkSinkAdaptActive = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
optIfOTUkSourceAdaptActive = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
optIfOTUkSinkFECEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
optIfOTUkCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 14), Bits().subtype(namedValues=namedval.NamedValues(("tim", 0), ("deg", 1), ("bdi", 2), ("ssf", 3), ("lof", 4), ("ais", 5), ("lom", 6), ))).setMaxAccess("readonly")
optIfGCC0ConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 2))
optIfGCC0ConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfGCC0Directionality"))
optIfGCC0Directionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 2, 1, 1), OptIfDirectionality()).setMaxAccess("noaccess")
optIfGCC0Application = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
optIfGCC0RowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
optIfODUk = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 8))
optIfODUkConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1))
optIfODUkConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfODUkDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
optIfODUkBitRateK = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1, 2), OptIfBitRateK()).setMaxAccess("readonly")
optIfODUkTcmFieldsInUse = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1, 3), Bits().subtype(namedValues=namedval.NamedValues(("tcmField1", 0), ("tcmField2", 1), ("tcmField3", 2), ("tcmField4", 3), ("tcmField5", 4), ("tcmField6", 5), ))).setMaxAccess("readonly")
optIfODUkPositionSeqCurrentSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
optIfODUkTtpPresent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
optIfODUkTtpConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2))
optIfODUkTtpConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
optIfODUkTtpTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 1), OptIfTxTI()).setMaxAccess("readwrite")
optIfODUkTtpDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 2), OptIfExDAPI()).setMaxAccess("readwrite")
optIfODUkTtpSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 3), OptIfExSAPI()).setMaxAccess("readwrite")
optIfODUkTtpTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 4), OptIfAcTI()).setMaxAccess("readonly")
optIfODUkTtpTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 5), OptIfTIMDetMode()).setMaxAccess("readwrite")
optIfODUkTtpTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
optIfODUkTtpDEGThr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 7), OptIfDEGThr()).setMaxAccess("readwrite")
optIfODUkTtpDEGM = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 8), OptIfDEGM()).setMaxAccess("readwrite")
optIfODUkTtpCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 9), Bits().subtype(namedValues=namedval.NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5), ))).setMaxAccess("readonly")
optIfODUkPositionSeqTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 3))
optIfODUkPositionSeqEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfODUkPositionSeqIndex"))
optIfODUkPositionSeqIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 3, 1, 1), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 4294967295L))).setMaxAccess("noaccess")
optIfODUkPositionSeqPosition = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
optIfODUkPositionSeqPointer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 3, 1, 3), RowPointer()).setMaxAccess("readonly")
optIfODUkNimConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4))
optIfODUkNimConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfODUkNimDirectionality"))
optIfODUkNimDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 1), OptIfSinkOrSource()).setMaxAccess("noaccess")
optIfODUkNimDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 2), OptIfExDAPI()).setMaxAccess("readcreate")
optIfODUkNimSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 3), OptIfExSAPI()).setMaxAccess("readcreate")
optIfODUkNimTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 4), OptIfAcTI()).setMaxAccess("readonly")
optIfODUkNimTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 5), OptIfTIMDetMode()).setMaxAccess("readcreate")
optIfODUkNimTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 6), TruthValue()).setMaxAccess("readcreate")
optIfODUkNimDEGThr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 7), OptIfDEGThr()).setMaxAccess("readcreate")
optIfODUkNimDEGM = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 8), OptIfDEGM()).setMaxAccess("readcreate")
optIfODUkNimCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 9), Bits().subtype(namedValues=namedval.NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5), ))).setMaxAccess("readonly")
optIfODUkNimRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 10), RowStatus()).setMaxAccess("readcreate")
optIfGCC12ConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5))
optIfGCC12ConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfGCC12Codirectional"), (0, "OPT-IF-MIB", "optIfGCC12GCCAccess"))
optIfGCC12Codirectional = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1, 1), TruthValue()).setMaxAccess("noaccess")
optIfGCC12GCCAccess = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,)).subtype(namedValues=namedval.NamedValues(("gcc1", 1), ("gcc2", 2), ("gcc1and2", 3), ))).setMaxAccess("noaccess")
optIfGCC12GCCPassThrough = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1, 3), TruthValue()).setMaxAccess("readcreate")
optIfGCC12Application = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
optIfGCC12RowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
optIfODUkT = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 9))
optIfODUkTConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1))
optIfODUkTConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfODUkTTcmField"), (0, "OPT-IF-MIB", "optIfODUkTCodirectional"))
optIfODUkTTcmField = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 1), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 6))).setMaxAccess("noaccess")
optIfODUkTCodirectional = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 2), TruthValue()).setMaxAccess("noaccess")
optIfODUkTTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 3), OptIfTxTI()).setMaxAccess("readcreate")
optIfODUkTDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 4), OptIfExDAPI()).setMaxAccess("readcreate")
optIfODUkTSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 5), OptIfExSAPI()).setMaxAccess("readcreate")
optIfODUkTTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 6), OptIfAcTI()).setMaxAccess("readonly")
optIfODUkTTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 7), OptIfTIMDetMode()).setMaxAccess("readcreate")
optIfODUkTTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 8), TruthValue()).setMaxAccess("readcreate")
optIfODUkTDEGThr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 9), OptIfDEGThr()).setMaxAccess("readcreate")
optIfODUkTDEGM = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 10), OptIfDEGM()).setMaxAccess("readcreate")
optIfODUkTSinkMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("operational", 1), ("monitor", 2), ))).setMaxAccess("readcreate")
optIfODUkTSinkLockSignalAdminState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(("locked", 1), ("normal", 2), ))).setMaxAccess("readcreate")
optIfODUkTSourceLockSignalAdminState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(("locked", 1), ("normal", 2), ))).setMaxAccess("readcreate")
optIfODUkTCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 14), Bits().subtype(namedValues=namedval.NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5), ))).setMaxAccess("readonly")
optIfODUkTRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
optIfODUkTNimConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2))
optIfODUkTNimConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfODUkTNimTcmField"), (0, "OPT-IF-MIB", "optIfODUkTNimDirectionality"))
optIfODUkTNimTcmField = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 1), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 6))).setMaxAccess("noaccess")
optIfODUkTNimDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 2), OptIfSinkOrSource()).setMaxAccess("noaccess")
optIfODUkTNimDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 3), OptIfExDAPI()).setMaxAccess("readcreate")
optIfODUkTNimSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 4), OptIfExSAPI()).setMaxAccess("readcreate")
optIfODUkTNimTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 5), OptIfAcTI()).setMaxAccess("readonly")
optIfODUkTNimTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 6), OptIfTIMDetMode()).setMaxAccess("readcreate")
optIfODUkTNimTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 7), TruthValue()).setMaxAccess("readcreate")
optIfODUkTNimDEGThr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 8), OptIfDEGThr()).setMaxAccess("readcreate")
optIfODUkTNimDEGM = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 9), OptIfDEGM()).setMaxAccess("readcreate")
optIfODUkTNimCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 10), Bits().subtype(namedValues=namedval.NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5), ))).setMaxAccess("readonly")
optIfODUkTNimRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
optIfConfs = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 2))
optIfGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 2, 1))
optIfCompl = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 2, 2))

# Augmentions

# Groups

optIfOChSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 28)).setObjects(("OPT-IF-MIB", "optIfOChSrcCurrentOutputPower"), ("OPT-IF-MIB", "optIfOChSrcIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOChSrcCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOChSrcPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChSrcIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOChSrcCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOChSrcCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOChSrcCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChSrcPrevDayHighOutputPower"), ("OPT-IF-MIB", "optIfOChSrcIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOChSrcPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChSrcIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOChSrcCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChSrcPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOChSrcCurrentLowOutputPower"), )
optIfOMSnSinkGroupBasic = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 14)).setObjects(("OPT-IF-MIB", "optIfOMSnCurrentStatus"), )
optIfOTSnSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 9)).setObjects(("OPT-IF-MIB", "optIfOTSnSinkCurrentLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayLastInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurDayHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSinkCurDayLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalLastInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayLastOutputPower"), )
optIfPerfMonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 2)).setObjects(("OPT-IF-MIB", "optIfPerfMonCurrentTimeElapsed"), ("OPT-IF-MIB", "optIfPerfMonIntervalNumInvalidIntervals"), ("OPT-IF-MIB", "optIfPerfMonCurDayTimeElapsed"), ("OPT-IF-MIB", "optIfPerfMonIntervalNumIntervals"), )
optIfOMSnSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 16)).setObjects(("OPT-IF-MIB", "optIfOMSnSinkCurrentUpperInputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentUpperOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentLowerInputPowerThreshold"), )
optIfOTSnCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 3)).setObjects(("OPT-IF-MIB", "optIfOTSnDirectionality"), )
optIfODUkTNimGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 43)).setObjects(("OPT-IF-MIB", "optIfODUkTNimSAPIExpected"), ("OPT-IF-MIB", "optIfODUkTNimDAPIExpected"), ("OPT-IF-MIB", "optIfODUkTNimTIMDetMode"), ("OPT-IF-MIB", "optIfODUkTNimRowStatus"), ("OPT-IF-MIB", "optIfODUkTNimDEGThr"), ("OPT-IF-MIB", "optIfODUkTNimTraceIdentifierAccepted"), ("OPT-IF-MIB", "optIfODUkTNimCurrentStatus"), ("OPT-IF-MIB", "optIfODUkTNimDEGM"), ("OPT-IF-MIB", "optIfODUkTNimTIMActEnabled"), )
optIfOTSnSinkGroupFull = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 8)).setObjects(("OPT-IF-MIB", "optIfOTSnDAPIExpected"), ("OPT-IF-MIB", "optIfOTSnTIMDetMode"), ("OPT-IF-MIB", "optIfOTSnSAPIExpected"), ("OPT-IF-MIB", "optIfOTSnTIMActEnabled"), ("OPT-IF-MIB", "optIfOTSnTraceIdentifierAccepted"), )
optIfOMSnSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 15)).setObjects(("OPT-IF-MIB", "optIfOMSnSinkCurDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurDaySuspectedFlag"), )
optIfOMSnCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 13)).setObjects(("OPT-IF-MIB", "optIfOMSnDirectionality"), )
optIfOChGroupSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 21)).setObjects(("OPT-IF-MIB", "optIfOChGroupSinkCurrentUpperInputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentUpperOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentLowerInputPowerThreshold"), )
optIfODUkTSinkGroupCtp = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 42)).setObjects(("OPT-IF-MIB", "optIfODUkTSinkLockSignalAdminState"), ("OPT-IF-MIB", "optIfODUkTSinkMode"), )
optIfOTSnSourceGroupFull = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 4)).setObjects(("OPT-IF-MIB", "optIfOTSnTraceIdentifierTransmitted"), )
optIfOTSnAPRStatusGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 5)).setObjects(("OPT-IF-MIB", "optIfOTSnAprStatus"), )
optIfGCC12Group = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 38)).setObjects(("OPT-IF-MIB", "optIfGCC12RowStatus"), ("OPT-IF-MIB", "optIfGCC12GCCPassThrough"), ("OPT-IF-MIB", "optIfGCC12Application"), )
optIfOChSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 26)).setObjects(("OPT-IF-MIB", "optIfOChSinkPrevDayHighInputPower"), ("OPT-IF-MIB", "optIfOChSinkPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChSinkPrevDayLowInputPower"), ("OPT-IF-MIB", "optIfOChSinkCurrentInputPower"), ("OPT-IF-MIB", "optIfOChSinkPrevDayLastInputPower"), ("OPT-IF-MIB", "optIfOChSinkCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChSinkIntervalLowInputPower"), ("OPT-IF-MIB", "optIfOChSinkCurrentLowInputPower"), ("OPT-IF-MIB", "optIfOChSinkIntervalLastInputPower"), ("OPT-IF-MIB", "optIfOChSinkIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOChSinkCurrentHighInputPower"), ("OPT-IF-MIB", "optIfOChSinkIntervalHighInputPower"), ("OPT-IF-MIB", "optIfOChSinkCurDayHighInputPower"), ("OPT-IF-MIB", "optIfOChSinkCurDayLowInputPower"), ("OPT-IF-MIB", "optIfOChSinkCurrentSuspectedFlag"), )
optIfOChSinkGroupBasic = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 25)).setObjects(("OPT-IF-MIB", "optIfOChCurrentStatus"), )
optIfOTSnSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 10)).setObjects(("OPT-IF-MIB", "optIfOTSnSinkCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentUpperInputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentUpperOutputPowerThreshold"), )
optIfODUkTCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 39)).setObjects(("OPT-IF-MIB", "optIfODUkTRowStatus"), )
optIfOTUkSinkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 32)).setObjects(("OPT-IF-MIB", "optIfOTUkSinkAdaptActive"), ("OPT-IF-MIB", "optIfOTUkDAPIExpected"), ("OPT-IF-MIB", "optIfOTUkDEGM"), ("OPT-IF-MIB", "optIfOTUkSAPIExpected"), ("OPT-IF-MIB", "optIfOTUkSinkFECEnabled"), ("OPT-IF-MIB", "optIfOTUkCurrentStatus"), ("OPT-IF-MIB", "optIfOTUkDEGThr"), ("OPT-IF-MIB", "optIfOTUkTraceIdentifierAccepted"), ("OPT-IF-MIB", "optIfOTUkTIMActEnabled"), ("OPT-IF-MIB", "optIfOTUkTIMDetMode"), )
optIfODUkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 34)).setObjects(("OPT-IF-MIB", "optIfODUkPositionSeqCurrentSize"), ("OPT-IF-MIB", "optIfODUkPositionSeqPosition"), ("OPT-IF-MIB", "optIfODUkPositionSeqPointer"), ("OPT-IF-MIB", "optIfODUkDirectionality"), ("OPT-IF-MIB", "optIfODUkBitRateK"), ("OPT-IF-MIB", "optIfODUkTcmFieldsInUse"), ("OPT-IF-MIB", "optIfODUkTtpPresent"), )
optIfOMSnSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 17)).setObjects(("OPT-IF-MIB", "optIfOMSnSrcPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDayLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDayHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalLowAggregatedInputPower"), )
optIfOChGroupSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 23)).setObjects(("OPT-IF-MIB", "optIfOChGroupSrcCurrentUpperOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentUpperInputPowerThreshold"), )
optIfOTSnSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 11)).setObjects(("OPT-IF-MIB", "optIfOTSnSrcIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalLastInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSrcCurDayLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurDayHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayLastInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalHighInputPower"), )
optIfOChSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 27)).setObjects(("OPT-IF-MIB", "optIfOChSinkCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOChSinkCurrentUpperInputPowerThreshold"), )
optIfOMSnSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 18)).setObjects(("OPT-IF-MIB", "optIfOMSnSrcCurrentUpperOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentUpperInputPowerThreshold"), )
optIfOChCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 24)).setObjects(("OPT-IF-MIB", "optIfOChDirectionality"), )
optIfOChGroupSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 22)).setObjects(("OPT-IF-MIB", "optIfOChGroupSrcCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSrcCurDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDaySuspectedFlag"), )
optIfOTUkCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 30)).setObjects(("OPT-IF-MIB", "optIfOTUkBitRateK"), ("OPT-IF-MIB", "optIfOTUkDirectionality"), )
optIfOTUkSourceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 31)).setObjects(("OPT-IF-MIB", "optIfOTUkTraceIdentifierTransmitted"), ("OPT-IF-MIB", "optIfOTUkSourceAdaptActive"), )
optIfOTSnSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 12)).setObjects(("OPT-IF-MIB", "optIfOTSnSrcCurrentUpperOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentUpperInputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentLowerInputPowerThreshold"), )
optIfGCC0Group = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 33)).setObjects(("OPT-IF-MIB", "optIfGCC0Application"), ("OPT-IF-MIB", "optIfGCC0RowStatus"), )
optIfODUkTtpSourceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 35)).setObjects(("OPT-IF-MIB", "optIfODUkTtpTraceIdentifierTransmitted"), )
optIfODUkNimGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 37)).setObjects(("OPT-IF-MIB", "optIfODUkNimTIMActEnabled"), ("OPT-IF-MIB", "optIfODUkNimTIMDetMode"), ("OPT-IF-MIB", "optIfODUkNimCurrentStatus"), ("OPT-IF-MIB", "optIfODUkNimTraceIdentifierAccepted"), ("OPT-IF-MIB", "optIfODUkNimRowStatus"), ("OPT-IF-MIB", "optIfODUkNimDAPIExpected"), ("OPT-IF-MIB", "optIfODUkNimDEGM"), ("OPT-IF-MIB", "optIfODUkNimSAPIExpected"), ("OPT-IF-MIB", "optIfODUkNimDEGThr"), )
optIfOTSnAPRControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 6)).setObjects(("OPT-IF-MIB", "optIfOTSnAprControl"), )
optIfOTSnSinkGroupBasic = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 7)).setObjects(("OPT-IF-MIB", "optIfOTSnCurrentStatus"), )
optIfODUkTSinkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 41)).setObjects(("OPT-IF-MIB", "optIfODUkTTIMDetMode"), ("OPT-IF-MIB", "optIfODUkTTraceIdentifierAccepted"), ("OPT-IF-MIB", "optIfODUkTTIMActEnabled"), ("OPT-IF-MIB", "optIfODUkTDAPIExpected"), ("OPT-IF-MIB", "optIfODUkTDEGM"), ("OPT-IF-MIB", "optIfODUkTDEGThr"), ("OPT-IF-MIB", "optIfODUkTCurrentStatus"), ("OPT-IF-MIB", "optIfODUkTSAPIExpected"), )
optIfOChGroupSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 20)).setObjects(("OPT-IF-MIB", "optIfOChGroupSinkCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSinkCurDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDaySuspectedFlag"), )
optIfODUkTtpSinkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 36)).setObjects(("OPT-IF-MIB", "optIfODUkTtpTIMActEnabled"), ("OPT-IF-MIB", "optIfODUkTtpTIMDetMode"), ("OPT-IF-MIB", "optIfODUkTtpCurrentStatus"), ("OPT-IF-MIB", "optIfODUkTtpTraceIdentifierAccepted"), ("OPT-IF-MIB", "optIfODUkTtpDAPIExpected"), ("OPT-IF-MIB", "optIfODUkTtpDEGM"), ("OPT-IF-MIB", "optIfODUkTtpSAPIExpected"), ("OPT-IF-MIB", "optIfODUkTtpDEGThr"), )
optIfOChSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 29)).setObjects(("OPT-IF-MIB", "optIfOChSrcCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOChSrcCurrentUpperOutputPowerThreshold"), )
optIfOChGroupCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 19)).setObjects(("OPT-IF-MIB", "optIfOChGroupDirectionality"), )
optIfOTMnGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 1)).setObjects(("OPT-IF-MIB", "optIfOTMnBitRates"), ("OPT-IF-MIB", "optIfOTMnTcmMax"), ("OPT-IF-MIB", "optIfOTMnInterfaceType"), ("OPT-IF-MIB", "optIfOTMnOpticalReach"), ("OPT-IF-MIB", "optIfOTMnOrder"), ("OPT-IF-MIB", "optIfOTMnReduced"), )
optIfODUkTSourceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 40)).setObjects(("OPT-IF-MIB", "optIfODUkTTraceIdentifierTransmitted"), ("OPT-IF-MIB", "optIfODUkTSourceLockSignalAdminState"), )

# Exports

# Module identity
mibBuilder.exportSymbols("OPT-IF-MIB", PYSNMP_MODULE_ID=optIfMibModule)

# Types
mibBuilder.exportSymbols("OPT-IF-MIB", OptIfAcTI=OptIfAcTI, OptIfBitRateK=OptIfBitRateK, OptIfDEGM=OptIfDEGM, OptIfDEGThr=OptIfDEGThr, OptIfDirectionality=OptIfDirectionality, OptIfExDAPI=OptIfExDAPI, OptIfExSAPI=OptIfExSAPI, OptIfIntervalNumber=OptIfIntervalNumber, OptIfSinkOrSource=OptIfSinkOrSource, OptIfTIMDetMode=OptIfTIMDetMode, OptIfTxTI=OptIfTxTI)

# Objects
mibBuilder.exportSymbols("OPT-IF-MIB", optIfMibModule=optIfMibModule, optIfObjects=optIfObjects, optIfOTMn=optIfOTMn, optIfOTMnTable=optIfOTMnTable, optIfOTMnEntry=optIfOTMnEntry, optIfOTMnOrder=optIfOTMnOrder, optIfOTMnReduced=optIfOTMnReduced, optIfOTMnBitRates=optIfOTMnBitRates, optIfOTMnInterfaceType=optIfOTMnInterfaceType, optIfOTMnTcmMax=optIfOTMnTcmMax, optIfOTMnOpticalReach=optIfOTMnOpticalReach, optIfPerfMon=optIfPerfMon, optIfPerfMonIntervalTable=optIfPerfMonIntervalTable, optIfPerfMonIntervalEntry=optIfPerfMonIntervalEntry, optIfPerfMonCurrentTimeElapsed=optIfPerfMonCurrentTimeElapsed, optIfPerfMonCurDayTimeElapsed=optIfPerfMonCurDayTimeElapsed, optIfPerfMonIntervalNumIntervals=optIfPerfMonIntervalNumIntervals, optIfPerfMonIntervalNumInvalidIntervals=optIfPerfMonIntervalNumInvalidIntervals, optIfOTSn=optIfOTSn, optIfOTSnConfigTable=optIfOTSnConfigTable, optIfOTSnConfigEntry=optIfOTSnConfigEntry, optIfOTSnDirectionality=optIfOTSnDirectionality, optIfOTSnAprStatus=optIfOTSnAprStatus, optIfOTSnAprControl=optIfOTSnAprControl, optIfOTSnTraceIdentifierTransmitted=optIfOTSnTraceIdentifierTransmitted, optIfOTSnDAPIExpected=optIfOTSnDAPIExpected, optIfOTSnSAPIExpected=optIfOTSnSAPIExpected, optIfOTSnTraceIdentifierAccepted=optIfOTSnTraceIdentifierAccepted, optIfOTSnTIMDetMode=optIfOTSnTIMDetMode, optIfOTSnTIMActEnabled=optIfOTSnTIMActEnabled, optIfOTSnCurrentStatus=optIfOTSnCurrentStatus, optIfOTSnSinkCurrentTable=optIfOTSnSinkCurrentTable, optIfOTSnSinkCurrentEntry=optIfOTSnSinkCurrentEntry, optIfOTSnSinkCurrentSuspectedFlag=optIfOTSnSinkCurrentSuspectedFlag, optIfOTSnSinkCurrentInputPower=optIfOTSnSinkCurrentInputPower, optIfOTSnSinkCurrentLowInputPower=optIfOTSnSinkCurrentLowInputPower, optIfOTSnSinkCurrentHighInputPower=optIfOTSnSinkCurrentHighInputPower, optIfOTSnSinkCurrentLowerInputPowerThreshold=optIfOTSnSinkCurrentLowerInputPowerThreshold, optIfOTSnSinkCurrentUpperInputPowerThreshold=optIfOTSnSinkCurrentUpperInputPowerThreshold, optIfOTSnSinkCurrentOutputPower=optIfOTSnSinkCurrentOutputPower, optIfOTSnSinkCurrentLowOutputPower=optIfOTSnSinkCurrentLowOutputPower, optIfOTSnSinkCurrentHighOutputPower=optIfOTSnSinkCurrentHighOutputPower, optIfOTSnSinkCurrentLowerOutputPowerThreshold=optIfOTSnSinkCurrentLowerOutputPowerThreshold, optIfOTSnSinkCurrentUpperOutputPowerThreshold=optIfOTSnSinkCurrentUpperOutputPowerThreshold, optIfOTSnSinkIntervalTable=optIfOTSnSinkIntervalTable, optIfOTSnSinkIntervalEntry=optIfOTSnSinkIntervalEntry, optIfOTSnSinkIntervalNumber=optIfOTSnSinkIntervalNumber, optIfOTSnSinkIntervalSuspectedFlag=optIfOTSnSinkIntervalSuspectedFlag, optIfOTSnSinkIntervalLastInputPower=optIfOTSnSinkIntervalLastInputPower, optIfOTSnSinkIntervalLowInputPower=optIfOTSnSinkIntervalLowInputPower, optIfOTSnSinkIntervalHighInputPower=optIfOTSnSinkIntervalHighInputPower, optIfOTSnSinkIntervalLastOutputPower=optIfOTSnSinkIntervalLastOutputPower, optIfOTSnSinkIntervalLowOutputPower=optIfOTSnSinkIntervalLowOutputPower, optIfOTSnSinkIntervalHighOutputPower=optIfOTSnSinkIntervalHighOutputPower, optIfOTSnSinkCurDayTable=optIfOTSnSinkCurDayTable, optIfOTSnSinkCurDayEntry=optIfOTSnSinkCurDayEntry, optIfOTSnSinkCurDaySuspectedFlag=optIfOTSnSinkCurDaySuspectedFlag, optIfOTSnSinkCurDayLowInputPower=optIfOTSnSinkCurDayLowInputPower, optIfOTSnSinkCurDayHighInputPower=optIfOTSnSinkCurDayHighInputPower, optIfOTSnSinkCurDayLowOutputPower=optIfOTSnSinkCurDayLowOutputPower, optIfOTSnSinkCurDayHighOutputPower=optIfOTSnSinkCurDayHighOutputPower, optIfOTSnSinkPrevDayTable=optIfOTSnSinkPrevDayTable, optIfOTSnSinkPrevDayEntry=optIfOTSnSinkPrevDayEntry, optIfOTSnSinkPrevDaySuspectedFlag=optIfOTSnSinkPrevDaySuspectedFlag, optIfOTSnSinkPrevDayLastInputPower=optIfOTSnSinkPrevDayLastInputPower, optIfOTSnSinkPrevDayLowInputPower=optIfOTSnSinkPrevDayLowInputPower, optIfOTSnSinkPrevDayHighInputPower=optIfOTSnSinkPrevDayHighInputPower, optIfOTSnSinkPrevDayLastOutputPower=optIfOTSnSinkPrevDayLastOutputPower, optIfOTSnSinkPrevDayLowOutputPower=optIfOTSnSinkPrevDayLowOutputPower, optIfOTSnSinkPrevDayHighOutputPower=optIfOTSnSinkPrevDayHighOutputPower, optIfOTSnSrcCurrentTable=optIfOTSnSrcCurrentTable, optIfOTSnSrcCurrentEntry=optIfOTSnSrcCurrentEntry, optIfOTSnSrcCurrentSuspectedFlag=optIfOTSnSrcCurrentSuspectedFlag, optIfOTSnSrcCurrentOutputPower=optIfOTSnSrcCurrentOutputPower, optIfOTSnSrcCurrentLowOutputPower=optIfOTSnSrcCurrentLowOutputPower, optIfOTSnSrcCurrentHighOutputPower=optIfOTSnSrcCurrentHighOutputPower, optIfOTSnSrcCurrentLowerOutputPowerThreshold=optIfOTSnSrcCurrentLowerOutputPowerThreshold, optIfOTSnSrcCurrentUpperOutputPowerThreshold=optIfOTSnSrcCurrentUpperOutputPowerThreshold, optIfOTSnSrcCurrentInputPower=optIfOTSnSrcCurrentInputPower, optIfOTSnSrcCurrentLowInputPower=optIfOTSnSrcCurrentLowInputPower, optIfOTSnSrcCurrentHighInputPower=optIfOTSnSrcCurrentHighInputPower, optIfOTSnSrcCurrentLowerInputPowerThreshold=optIfOTSnSrcCurrentLowerInputPowerThreshold, optIfOTSnSrcCurrentUpperInputPowerThreshold=optIfOTSnSrcCurrentUpperInputPowerThreshold, optIfOTSnSrcIntervalTable=optIfOTSnSrcIntervalTable, optIfOTSnSrcIntervalEntry=optIfOTSnSrcIntervalEntry, optIfOTSnSrcIntervalNumber=optIfOTSnSrcIntervalNumber, optIfOTSnSrcIntervalSuspectedFlag=optIfOTSnSrcIntervalSuspectedFlag, optIfOTSnSrcIntervalLastOutputPower=optIfOTSnSrcIntervalLastOutputPower, optIfOTSnSrcIntervalLowOutputPower=optIfOTSnSrcIntervalLowOutputPower, optIfOTSnSrcIntervalHighOutputPower=optIfOTSnSrcIntervalHighOutputPower, optIfOTSnSrcIntervalLastInputPower=optIfOTSnSrcIntervalLastInputPower, optIfOTSnSrcIntervalLowInputPower=optIfOTSnSrcIntervalLowInputPower, optIfOTSnSrcIntervalHighInputPower=optIfOTSnSrcIntervalHighInputPower, optIfOTSnSrcCurDayTable=optIfOTSnSrcCurDayTable, optIfOTSnSrcCurDayEntry=optIfOTSnSrcCurDayEntry, optIfOTSnSrcCurDaySuspectedFlag=optIfOTSnSrcCurDaySuspectedFlag, optIfOTSnSrcCurDayLowOutputPower=optIfOTSnSrcCurDayLowOutputPower, optIfOTSnSrcCurDayHighOutputPower=optIfOTSnSrcCurDayHighOutputPower, optIfOTSnSrcCurDayLowInputPower=optIfOTSnSrcCurDayLowInputPower, optIfOTSnSrcCurDayHighInputPower=optIfOTSnSrcCurDayHighInputPower, optIfOTSnSrcPrevDayTable=optIfOTSnSrcPrevDayTable, optIfOTSnSrcPrevDayEntry=optIfOTSnSrcPrevDayEntry, optIfOTSnSrcPrevDaySuspectedFlag=optIfOTSnSrcPrevDaySuspectedFlag, optIfOTSnSrcPrevDayLastOutputPower=optIfOTSnSrcPrevDayLastOutputPower, optIfOTSnSrcPrevDayLowOutputPower=optIfOTSnSrcPrevDayLowOutputPower, optIfOTSnSrcPrevDayHighOutputPower=optIfOTSnSrcPrevDayHighOutputPower, optIfOTSnSrcPrevDayLastInputPower=optIfOTSnSrcPrevDayLastInputPower, optIfOTSnSrcPrevDayLowInputPower=optIfOTSnSrcPrevDayLowInputPower, optIfOTSnSrcPrevDayHighInputPower=optIfOTSnSrcPrevDayHighInputPower, optIfOMSn=optIfOMSn, optIfOMSnConfigTable=optIfOMSnConfigTable, optIfOMSnConfigEntry=optIfOMSnConfigEntry, optIfOMSnDirectionality=optIfOMSnDirectionality, optIfOMSnCurrentStatus=optIfOMSnCurrentStatus, optIfOMSnSinkCurrentTable=optIfOMSnSinkCurrentTable, optIfOMSnSinkCurrentEntry=optIfOMSnSinkCurrentEntry, optIfOMSnSinkCurrentSuspectedFlag=optIfOMSnSinkCurrentSuspectedFlag, optIfOMSnSinkCurrentAggregatedInputPower=optIfOMSnSinkCurrentAggregatedInputPower, optIfOMSnSinkCurrentLowAggregatedInputPower=optIfOMSnSinkCurrentLowAggregatedInputPower, optIfOMSnSinkCurrentHighAggregatedInputPower=optIfOMSnSinkCurrentHighAggregatedInputPower, optIfOMSnSinkCurrentLowerInputPowerThreshold=optIfOMSnSinkCurrentLowerInputPowerThreshold, optIfOMSnSinkCurrentUpperInputPowerThreshold=optIfOMSnSinkCurrentUpperInputPowerThreshold, optIfOMSnSinkCurrentOutputPower=optIfOMSnSinkCurrentOutputPower, optIfOMSnSinkCurrentLowOutputPower=optIfOMSnSinkCurrentLowOutputPower, optIfOMSnSinkCurrentHighOutputPower=optIfOMSnSinkCurrentHighOutputPower, optIfOMSnSinkCurrentLowerOutputPowerThreshold=optIfOMSnSinkCurrentLowerOutputPowerThreshold)
mibBuilder.exportSymbols("OPT-IF-MIB", optIfOMSnSinkCurrentUpperOutputPowerThreshold=optIfOMSnSinkCurrentUpperOutputPowerThreshold, optIfOMSnSinkIntervalTable=optIfOMSnSinkIntervalTable, optIfOMSnSinkIntervalEntry=optIfOMSnSinkIntervalEntry, optIfOMSnSinkIntervalNumber=optIfOMSnSinkIntervalNumber, optIfOMSnSinkIntervalSuspectedFlag=optIfOMSnSinkIntervalSuspectedFlag, optIfOMSnSinkIntervalLastAggregatedInputPower=optIfOMSnSinkIntervalLastAggregatedInputPower, optIfOMSnSinkIntervalLowAggregatedInputPower=optIfOMSnSinkIntervalLowAggregatedInputPower, optIfOMSnSinkIntervalHighAggregatedInputPower=optIfOMSnSinkIntervalHighAggregatedInputPower, optIfOMSnSinkIntervalLastOutputPower=optIfOMSnSinkIntervalLastOutputPower, optIfOMSnSinkIntervalLowOutputPower=optIfOMSnSinkIntervalLowOutputPower, optIfOMSnSinkIntervalHighOutputPower=optIfOMSnSinkIntervalHighOutputPower, optIfOMSnSinkCurDayTable=optIfOMSnSinkCurDayTable, optIfOMSnSinkCurDayEntry=optIfOMSnSinkCurDayEntry, optIfOMSnSinkCurDaySuspectedFlag=optIfOMSnSinkCurDaySuspectedFlag, optIfOMSnSinkCurDayLowAggregatedInputPower=optIfOMSnSinkCurDayLowAggregatedInputPower, optIfOMSnSinkCurDayHighAggregatedInputPower=optIfOMSnSinkCurDayHighAggregatedInputPower, optIfOMSnSinkCurDayLowOutputPower=optIfOMSnSinkCurDayLowOutputPower, optIfOMSnSinkCurDayHighOutputPower=optIfOMSnSinkCurDayHighOutputPower, optIfOMSnSinkPrevDayTable=optIfOMSnSinkPrevDayTable, optIfOMSnSinkPrevDayEntry=optIfOMSnSinkPrevDayEntry, optIfOMSnSinkPrevDaySuspectedFlag=optIfOMSnSinkPrevDaySuspectedFlag, optIfOMSnSinkPrevDayLastAggregatedInputPower=optIfOMSnSinkPrevDayLastAggregatedInputPower, optIfOMSnSinkPrevDayLowAggregatedInputPower=optIfOMSnSinkPrevDayLowAggregatedInputPower, optIfOMSnSinkPrevDayHighAggregatedInputPower=optIfOMSnSinkPrevDayHighAggregatedInputPower, optIfOMSnSinkPrevDayLastOutputPower=optIfOMSnSinkPrevDayLastOutputPower, optIfOMSnSinkPrevDayLowOutputPower=optIfOMSnSinkPrevDayLowOutputPower, optIfOMSnSinkPrevDayHighOutputPower=optIfOMSnSinkPrevDayHighOutputPower, optIfOMSnSrcCurrentTable=optIfOMSnSrcCurrentTable, optIfOMSnSrcCurrentEntry=optIfOMSnSrcCurrentEntry, optIfOMSnSrcCurrentSuspectedFlag=optIfOMSnSrcCurrentSuspectedFlag, optIfOMSnSrcCurrentOutputPower=optIfOMSnSrcCurrentOutputPower, optIfOMSnSrcCurrentLowOutputPower=optIfOMSnSrcCurrentLowOutputPower, optIfOMSnSrcCurrentHighOutputPower=optIfOMSnSrcCurrentHighOutputPower, optIfOMSnSrcCurrentLowerOutputPowerThreshold=optIfOMSnSrcCurrentLowerOutputPowerThreshold, optIfOMSnSrcCurrentUpperOutputPowerThreshold=optIfOMSnSrcCurrentUpperOutputPowerThreshold, optIfOMSnSrcCurrentAggregatedInputPower=optIfOMSnSrcCurrentAggregatedInputPower, optIfOMSnSrcCurrentLowAggregatedInputPower=optIfOMSnSrcCurrentLowAggregatedInputPower, optIfOMSnSrcCurrentHighAggregatedInputPower=optIfOMSnSrcCurrentHighAggregatedInputPower, optIfOMSnSrcCurrentLowerInputPowerThreshold=optIfOMSnSrcCurrentLowerInputPowerThreshold, optIfOMSnSrcCurrentUpperInputPowerThreshold=optIfOMSnSrcCurrentUpperInputPowerThreshold, optIfOMSnSrcIntervalTable=optIfOMSnSrcIntervalTable, optIfOMSnSrcIntervalEntry=optIfOMSnSrcIntervalEntry, optIfOMSnSrcIntervalNumber=optIfOMSnSrcIntervalNumber, optIfOMSnSrcIntervalSuspectedFlag=optIfOMSnSrcIntervalSuspectedFlag, optIfOMSnSrcIntervalLastOutputPower=optIfOMSnSrcIntervalLastOutputPower, optIfOMSnSrcIntervalLowOutputPower=optIfOMSnSrcIntervalLowOutputPower, optIfOMSnSrcIntervalHighOutputPower=optIfOMSnSrcIntervalHighOutputPower, optIfOMSnSrcIntervalLastAggregatedInputPower=optIfOMSnSrcIntervalLastAggregatedInputPower, optIfOMSnSrcIntervalLowAggregatedInputPower=optIfOMSnSrcIntervalLowAggregatedInputPower, optIfOMSnSrcIntervalHighAggregatedInputPower=optIfOMSnSrcIntervalHighAggregatedInputPower, optIfOMSnSrcCurDayTable=optIfOMSnSrcCurDayTable, optIfOMSnSrcCurDayEntry=optIfOMSnSrcCurDayEntry, optIfOMSnSrcCurDaySuspectedFlag=optIfOMSnSrcCurDaySuspectedFlag, optIfOMSnSrcCurDayLowOutputPower=optIfOMSnSrcCurDayLowOutputPower, optIfOMSnSrcCurDayHighOutputPower=optIfOMSnSrcCurDayHighOutputPower, optIfOMSnSrcCurDayLowAggregatedInputPower=optIfOMSnSrcCurDayLowAggregatedInputPower, optIfOMSnSrcCurDayHighAggregatedInputPower=optIfOMSnSrcCurDayHighAggregatedInputPower, optIfOMSnSrcPrevDayTable=optIfOMSnSrcPrevDayTable, optIfOMSnSrcPrevDayEntry=optIfOMSnSrcPrevDayEntry, optIfOMSnSrcPrevDaySuspectedFlag=optIfOMSnSrcPrevDaySuspectedFlag, optIfOMSnSrcPrevDayLastOutputPower=optIfOMSnSrcPrevDayLastOutputPower, optIfOMSnSrcPrevDayLowOutputPower=optIfOMSnSrcPrevDayLowOutputPower, optIfOMSnSrcPrevDayHighOutputPower=optIfOMSnSrcPrevDayHighOutputPower, optIfOMSnSrcPrevDayLastAggregatedInputPower=optIfOMSnSrcPrevDayLastAggregatedInputPower, optIfOMSnSrcPrevDayLowAggregatedInputPower=optIfOMSnSrcPrevDayLowAggregatedInputPower, optIfOMSnSrcPrevDayHighAggregatedInputPower=optIfOMSnSrcPrevDayHighAggregatedInputPower, optIfOChGroup=optIfOChGroup, optIfOChGroupConfigTable=optIfOChGroupConfigTable, optIfOChGroupConfigEntry=optIfOChGroupConfigEntry, optIfOChGroupDirectionality=optIfOChGroupDirectionality, optIfOChGroupSinkCurrentTable=optIfOChGroupSinkCurrentTable, optIfOChGroupSinkCurrentEntry=optIfOChGroupSinkCurrentEntry, optIfOChGroupSinkCurrentSuspectedFlag=optIfOChGroupSinkCurrentSuspectedFlag, optIfOChGroupSinkCurrentAggregatedInputPower=optIfOChGroupSinkCurrentAggregatedInputPower, optIfOChGroupSinkCurrentLowAggregatedInputPower=optIfOChGroupSinkCurrentLowAggregatedInputPower, optIfOChGroupSinkCurrentHighAggregatedInputPower=optIfOChGroupSinkCurrentHighAggregatedInputPower, optIfOChGroupSinkCurrentLowerInputPowerThreshold=optIfOChGroupSinkCurrentLowerInputPowerThreshold, optIfOChGroupSinkCurrentUpperInputPowerThreshold=optIfOChGroupSinkCurrentUpperInputPowerThreshold, optIfOChGroupSinkCurrentOutputPower=optIfOChGroupSinkCurrentOutputPower, optIfOChGroupSinkCurrentLowOutputPower=optIfOChGroupSinkCurrentLowOutputPower, optIfOChGroupSinkCurrentHighOutputPower=optIfOChGroupSinkCurrentHighOutputPower, optIfOChGroupSinkCurrentLowerOutputPowerThreshold=optIfOChGroupSinkCurrentLowerOutputPowerThreshold, optIfOChGroupSinkCurrentUpperOutputPowerThreshold=optIfOChGroupSinkCurrentUpperOutputPowerThreshold, optIfOChGroupSinkIntervalTable=optIfOChGroupSinkIntervalTable, optIfOChGroupSinkIntervalEntry=optIfOChGroupSinkIntervalEntry, optIfOChGroupSinkIntervalNumber=optIfOChGroupSinkIntervalNumber, optIfOChGroupSinkIntervalSuspectedFlag=optIfOChGroupSinkIntervalSuspectedFlag, optIfOChGroupSinkIntervalLastAggregatedInputPower=optIfOChGroupSinkIntervalLastAggregatedInputPower, optIfOChGroupSinkIntervalLowAggregatedInputPower=optIfOChGroupSinkIntervalLowAggregatedInputPower, optIfOChGroupSinkIntervalHighAggregatedInputPower=optIfOChGroupSinkIntervalHighAggregatedInputPower, optIfOChGroupSinkIntervalLastOutputPower=optIfOChGroupSinkIntervalLastOutputPower, optIfOChGroupSinkIntervalLowOutputPower=optIfOChGroupSinkIntervalLowOutputPower, optIfOChGroupSinkIntervalHighOutputPower=optIfOChGroupSinkIntervalHighOutputPower, optIfOChGroupSinkCurDayTable=optIfOChGroupSinkCurDayTable, optIfOChGroupSinkCurDayEntry=optIfOChGroupSinkCurDayEntry, optIfOChGroupSinkCurDaySuspectedFlag=optIfOChGroupSinkCurDaySuspectedFlag, optIfOChGroupSinkCurDayLowAggregatedInputPower=optIfOChGroupSinkCurDayLowAggregatedInputPower, optIfOChGroupSinkCurDayHighAggregatedInputPower=optIfOChGroupSinkCurDayHighAggregatedInputPower, optIfOChGroupSinkCurDayLowOutputPower=optIfOChGroupSinkCurDayLowOutputPower, optIfOChGroupSinkCurDayHighOutputPower=optIfOChGroupSinkCurDayHighOutputPower, optIfOChGroupSinkPrevDayTable=optIfOChGroupSinkPrevDayTable, optIfOChGroupSinkPrevDayEntry=optIfOChGroupSinkPrevDayEntry, optIfOChGroupSinkPrevDaySuspectedFlag=optIfOChGroupSinkPrevDaySuspectedFlag, optIfOChGroupSinkPrevDayLastAggregatedInputPower=optIfOChGroupSinkPrevDayLastAggregatedInputPower, optIfOChGroupSinkPrevDayLowAggregatedInputPower=optIfOChGroupSinkPrevDayLowAggregatedInputPower, optIfOChGroupSinkPrevDayHighAggregatedInputPower=optIfOChGroupSinkPrevDayHighAggregatedInputPower, optIfOChGroupSinkPrevDayLastOutputPower=optIfOChGroupSinkPrevDayLastOutputPower, optIfOChGroupSinkPrevDayLowOutputPower=optIfOChGroupSinkPrevDayLowOutputPower, optIfOChGroupSinkPrevDayHighOutputPower=optIfOChGroupSinkPrevDayHighOutputPower, optIfOChGroupSrcCurrentTable=optIfOChGroupSrcCurrentTable, optIfOChGroupSrcCurrentEntry=optIfOChGroupSrcCurrentEntry, optIfOChGroupSrcCurrentSuspectedFlag=optIfOChGroupSrcCurrentSuspectedFlag, optIfOChGroupSrcCurrentOutputPower=optIfOChGroupSrcCurrentOutputPower, optIfOChGroupSrcCurrentLowOutputPower=optIfOChGroupSrcCurrentLowOutputPower, optIfOChGroupSrcCurrentHighOutputPower=optIfOChGroupSrcCurrentHighOutputPower, optIfOChGroupSrcCurrentLowerOutputPowerThreshold=optIfOChGroupSrcCurrentLowerOutputPowerThreshold, optIfOChGroupSrcCurrentUpperOutputPowerThreshold=optIfOChGroupSrcCurrentUpperOutputPowerThreshold, optIfOChGroupSrcCurrentAggregatedInputPower=optIfOChGroupSrcCurrentAggregatedInputPower, optIfOChGroupSrcCurrentLowAggregatedInputPower=optIfOChGroupSrcCurrentLowAggregatedInputPower, optIfOChGroupSrcCurrentHighAggregatedInputPower=optIfOChGroupSrcCurrentHighAggregatedInputPower, optIfOChGroupSrcCurrentLowerInputPowerThreshold=optIfOChGroupSrcCurrentLowerInputPowerThreshold, optIfOChGroupSrcCurrentUpperInputPowerThreshold=optIfOChGroupSrcCurrentUpperInputPowerThreshold, optIfOChGroupSrcIntervalTable=optIfOChGroupSrcIntervalTable, optIfOChGroupSrcIntervalEntry=optIfOChGroupSrcIntervalEntry, optIfOChGroupSrcIntervalNumber=optIfOChGroupSrcIntervalNumber, optIfOChGroupSrcIntervalSuspectedFlag=optIfOChGroupSrcIntervalSuspectedFlag, optIfOChGroupSrcIntervalLastOutputPower=optIfOChGroupSrcIntervalLastOutputPower)
mibBuilder.exportSymbols("OPT-IF-MIB", optIfOChGroupSrcIntervalLowOutputPower=optIfOChGroupSrcIntervalLowOutputPower, optIfOChGroupSrcIntervalHighOutputPower=optIfOChGroupSrcIntervalHighOutputPower, optIfOChGroupSrcIntervalLastAggregatedInputPower=optIfOChGroupSrcIntervalLastAggregatedInputPower, optIfOChGroupSrcIntervalLowAggregatedInputPower=optIfOChGroupSrcIntervalLowAggregatedInputPower, optIfOChGroupSrcIntervalHighAggregatedInputPower=optIfOChGroupSrcIntervalHighAggregatedInputPower, optIfOChGroupSrcCurDayTable=optIfOChGroupSrcCurDayTable, optIfOChGroupSrcCurDayEntry=optIfOChGroupSrcCurDayEntry, optIfOChGroupSrcCurDaySuspectedFlag=optIfOChGroupSrcCurDaySuspectedFlag, optIfOChGroupSrcCurDayLowOutputPower=optIfOChGroupSrcCurDayLowOutputPower, optIfOChGroupSrcCurDayHighOutputPower=optIfOChGroupSrcCurDayHighOutputPower, optIfOChGroupSrcCurDayLowAggregatedInputPower=optIfOChGroupSrcCurDayLowAggregatedInputPower, optIfOChGroupSrcCurDayHighAggregatedInputPower=optIfOChGroupSrcCurDayHighAggregatedInputPower, optIfOChGroupSrcPrevDayTable=optIfOChGroupSrcPrevDayTable, optIfOChGroupSrcPrevDayEntry=optIfOChGroupSrcPrevDayEntry, optIfOChGroupSrcPrevDaySuspectedFlag=optIfOChGroupSrcPrevDaySuspectedFlag, optIfOChGroupSrcPrevDayLastOutputPower=optIfOChGroupSrcPrevDayLastOutputPower, optIfOChGroupSrcPrevDayLowOutputPower=optIfOChGroupSrcPrevDayLowOutputPower, optIfOChGroupSrcPrevDayHighOutputPower=optIfOChGroupSrcPrevDayHighOutputPower, optIfOChGroupSrcPrevDayLastAggregatedInputPower=optIfOChGroupSrcPrevDayLastAggregatedInputPower, optIfOChGroupSrcPrevDayLowAggregatedInputPower=optIfOChGroupSrcPrevDayLowAggregatedInputPower, optIfOChGroupSrcPrevDayHighAggregatedInputPower=optIfOChGroupSrcPrevDayHighAggregatedInputPower, optIfOCh=optIfOCh, optIfOChConfigTable=optIfOChConfigTable, optIfOChConfigEntry=optIfOChConfigEntry, optIfOChDirectionality=optIfOChDirectionality, optIfOChCurrentStatus=optIfOChCurrentStatus, optIfOChSinkCurrentTable=optIfOChSinkCurrentTable, optIfOChSinkCurrentEntry=optIfOChSinkCurrentEntry, optIfOChSinkCurrentSuspectedFlag=optIfOChSinkCurrentSuspectedFlag, optIfOChSinkCurrentInputPower=optIfOChSinkCurrentInputPower, optIfOChSinkCurrentLowInputPower=optIfOChSinkCurrentLowInputPower, optIfOChSinkCurrentHighInputPower=optIfOChSinkCurrentHighInputPower, optIfOChSinkCurrentLowerInputPowerThreshold=optIfOChSinkCurrentLowerInputPowerThreshold, optIfOChSinkCurrentUpperInputPowerThreshold=optIfOChSinkCurrentUpperInputPowerThreshold, optIfOChSinkIntervalTable=optIfOChSinkIntervalTable, optIfOChSinkIntervalEntry=optIfOChSinkIntervalEntry, optIfOChSinkIntervalNumber=optIfOChSinkIntervalNumber, optIfOChSinkIntervalSuspectedFlag=optIfOChSinkIntervalSuspectedFlag, optIfOChSinkIntervalLastInputPower=optIfOChSinkIntervalLastInputPower, optIfOChSinkIntervalLowInputPower=optIfOChSinkIntervalLowInputPower, optIfOChSinkIntervalHighInputPower=optIfOChSinkIntervalHighInputPower, optIfOChSinkCurDayTable=optIfOChSinkCurDayTable, optIfOChSinkCurDayEntry=optIfOChSinkCurDayEntry, optIfOChSinkCurDaySuspectedFlag=optIfOChSinkCurDaySuspectedFlag, optIfOChSinkCurDayLowInputPower=optIfOChSinkCurDayLowInputPower, optIfOChSinkCurDayHighInputPower=optIfOChSinkCurDayHighInputPower, optIfOChSinkPrevDayTable=optIfOChSinkPrevDayTable, optIfOChSinkPrevDayEntry=optIfOChSinkPrevDayEntry, optIfOChSinkPrevDaySuspectedFlag=optIfOChSinkPrevDaySuspectedFlag, optIfOChSinkPrevDayLastInputPower=optIfOChSinkPrevDayLastInputPower, optIfOChSinkPrevDayLowInputPower=optIfOChSinkPrevDayLowInputPower, optIfOChSinkPrevDayHighInputPower=optIfOChSinkPrevDayHighInputPower, optIfOChSrcCurrentTable=optIfOChSrcCurrentTable, optIfOChSrcCurrentEntry=optIfOChSrcCurrentEntry, optIfOChSrcCurrentSuspectedFlag=optIfOChSrcCurrentSuspectedFlag, optIfOChSrcCurrentOutputPower=optIfOChSrcCurrentOutputPower, optIfOChSrcCurrentLowOutputPower=optIfOChSrcCurrentLowOutputPower, optIfOChSrcCurrentHighOutputPower=optIfOChSrcCurrentHighOutputPower, optIfOChSrcCurrentLowerOutputPowerThreshold=optIfOChSrcCurrentLowerOutputPowerThreshold, optIfOChSrcCurrentUpperOutputPowerThreshold=optIfOChSrcCurrentUpperOutputPowerThreshold, optIfOChSrcIntervalTable=optIfOChSrcIntervalTable, optIfOChSrcIntervalEntry=optIfOChSrcIntervalEntry, optIfOChSrcIntervalNumber=optIfOChSrcIntervalNumber, optIfOChSrcIntervalSuspectedFlag=optIfOChSrcIntervalSuspectedFlag, optIfOChSrcIntervalLastOutputPower=optIfOChSrcIntervalLastOutputPower, optIfOChSrcIntervalLowOutputPower=optIfOChSrcIntervalLowOutputPower, optIfOChSrcIntervalHighOutputPower=optIfOChSrcIntervalHighOutputPower, optIfOChSrcCurDayTable=optIfOChSrcCurDayTable, optIfOChSrcCurDayEntry=optIfOChSrcCurDayEntry, optIfOChSrcCurDaySuspectedFlag=optIfOChSrcCurDaySuspectedFlag, optIfOChSrcCurDayLowOutputPower=optIfOChSrcCurDayLowOutputPower, optIfOChSrcCurDayHighOutputPower=optIfOChSrcCurDayHighOutputPower, optIfOChSrcPrevDayTable=optIfOChSrcPrevDayTable, optIfOChSrcPrevDayEntry=optIfOChSrcPrevDayEntry, optIfOChSrcPrevDaySuspectedFlag=optIfOChSrcPrevDaySuspectedFlag, optIfOChSrcPrevDayLastOutputPower=optIfOChSrcPrevDayLastOutputPower, optIfOChSrcPrevDayLowOutputPower=optIfOChSrcPrevDayLowOutputPower, optIfOChSrcPrevDayHighOutputPower=optIfOChSrcPrevDayHighOutputPower, optIfOTUk=optIfOTUk, optIfOTUkConfigTable=optIfOTUkConfigTable, optIfOTUkConfigEntry=optIfOTUkConfigEntry, optIfOTUkDirectionality=optIfOTUkDirectionality, optIfOTUkBitRateK=optIfOTUkBitRateK, optIfOTUkTraceIdentifierTransmitted=optIfOTUkTraceIdentifierTransmitted, optIfOTUkDAPIExpected=optIfOTUkDAPIExpected, optIfOTUkSAPIExpected=optIfOTUkSAPIExpected, optIfOTUkTraceIdentifierAccepted=optIfOTUkTraceIdentifierAccepted, optIfOTUkTIMDetMode=optIfOTUkTIMDetMode, optIfOTUkTIMActEnabled=optIfOTUkTIMActEnabled, optIfOTUkDEGThr=optIfOTUkDEGThr, optIfOTUkDEGM=optIfOTUkDEGM, optIfOTUkSinkAdaptActive=optIfOTUkSinkAdaptActive, optIfOTUkSourceAdaptActive=optIfOTUkSourceAdaptActive, optIfOTUkSinkFECEnabled=optIfOTUkSinkFECEnabled, optIfOTUkCurrentStatus=optIfOTUkCurrentStatus, optIfGCC0ConfigTable=optIfGCC0ConfigTable, optIfGCC0ConfigEntry=optIfGCC0ConfigEntry, optIfGCC0Directionality=optIfGCC0Directionality, optIfGCC0Application=optIfGCC0Application, optIfGCC0RowStatus=optIfGCC0RowStatus, optIfODUk=optIfODUk, optIfODUkConfigTable=optIfODUkConfigTable, optIfODUkConfigEntry=optIfODUkConfigEntry, optIfODUkDirectionality=optIfODUkDirectionality, optIfODUkBitRateK=optIfODUkBitRateK, optIfODUkTcmFieldsInUse=optIfODUkTcmFieldsInUse, optIfODUkPositionSeqCurrentSize=optIfODUkPositionSeqCurrentSize, optIfODUkTtpPresent=optIfODUkTtpPresent, optIfODUkTtpConfigTable=optIfODUkTtpConfigTable, optIfODUkTtpConfigEntry=optIfODUkTtpConfigEntry, optIfODUkTtpTraceIdentifierTransmitted=optIfODUkTtpTraceIdentifierTransmitted, optIfODUkTtpDAPIExpected=optIfODUkTtpDAPIExpected, optIfODUkTtpSAPIExpected=optIfODUkTtpSAPIExpected, optIfODUkTtpTraceIdentifierAccepted=optIfODUkTtpTraceIdentifierAccepted, optIfODUkTtpTIMDetMode=optIfODUkTtpTIMDetMode, optIfODUkTtpTIMActEnabled=optIfODUkTtpTIMActEnabled, optIfODUkTtpDEGThr=optIfODUkTtpDEGThr, optIfODUkTtpDEGM=optIfODUkTtpDEGM, optIfODUkTtpCurrentStatus=optIfODUkTtpCurrentStatus, optIfODUkPositionSeqTable=optIfODUkPositionSeqTable, optIfODUkPositionSeqEntry=optIfODUkPositionSeqEntry, optIfODUkPositionSeqIndex=optIfODUkPositionSeqIndex, optIfODUkPositionSeqPosition=optIfODUkPositionSeqPosition, optIfODUkPositionSeqPointer=optIfODUkPositionSeqPointer, optIfODUkNimConfigTable=optIfODUkNimConfigTable, optIfODUkNimConfigEntry=optIfODUkNimConfigEntry, optIfODUkNimDirectionality=optIfODUkNimDirectionality)
mibBuilder.exportSymbols("OPT-IF-MIB", optIfODUkNimDAPIExpected=optIfODUkNimDAPIExpected, optIfODUkNimSAPIExpected=optIfODUkNimSAPIExpected, optIfODUkNimTraceIdentifierAccepted=optIfODUkNimTraceIdentifierAccepted, optIfODUkNimTIMDetMode=optIfODUkNimTIMDetMode, optIfODUkNimTIMActEnabled=optIfODUkNimTIMActEnabled, optIfODUkNimDEGThr=optIfODUkNimDEGThr, optIfODUkNimDEGM=optIfODUkNimDEGM, optIfODUkNimCurrentStatus=optIfODUkNimCurrentStatus, optIfODUkNimRowStatus=optIfODUkNimRowStatus, optIfGCC12ConfigTable=optIfGCC12ConfigTable, optIfGCC12ConfigEntry=optIfGCC12ConfigEntry, optIfGCC12Codirectional=optIfGCC12Codirectional, optIfGCC12GCCAccess=optIfGCC12GCCAccess, optIfGCC12GCCPassThrough=optIfGCC12GCCPassThrough, optIfGCC12Application=optIfGCC12Application, optIfGCC12RowStatus=optIfGCC12RowStatus, optIfODUkT=optIfODUkT, optIfODUkTConfigTable=optIfODUkTConfigTable, optIfODUkTConfigEntry=optIfODUkTConfigEntry, optIfODUkTTcmField=optIfODUkTTcmField, optIfODUkTCodirectional=optIfODUkTCodirectional, optIfODUkTTraceIdentifierTransmitted=optIfODUkTTraceIdentifierTransmitted, optIfODUkTDAPIExpected=optIfODUkTDAPIExpected, optIfODUkTSAPIExpected=optIfODUkTSAPIExpected, optIfODUkTTraceIdentifierAccepted=optIfODUkTTraceIdentifierAccepted, optIfODUkTTIMDetMode=optIfODUkTTIMDetMode, optIfODUkTTIMActEnabled=optIfODUkTTIMActEnabled, optIfODUkTDEGThr=optIfODUkTDEGThr, optIfODUkTDEGM=optIfODUkTDEGM, optIfODUkTSinkMode=optIfODUkTSinkMode, optIfODUkTSinkLockSignalAdminState=optIfODUkTSinkLockSignalAdminState, optIfODUkTSourceLockSignalAdminState=optIfODUkTSourceLockSignalAdminState, optIfODUkTCurrentStatus=optIfODUkTCurrentStatus, optIfODUkTRowStatus=optIfODUkTRowStatus, optIfODUkTNimConfigTable=optIfODUkTNimConfigTable, optIfODUkTNimConfigEntry=optIfODUkTNimConfigEntry, optIfODUkTNimTcmField=optIfODUkTNimTcmField, optIfODUkTNimDirectionality=optIfODUkTNimDirectionality, optIfODUkTNimDAPIExpected=optIfODUkTNimDAPIExpected, optIfODUkTNimSAPIExpected=optIfODUkTNimSAPIExpected, optIfODUkTNimTraceIdentifierAccepted=optIfODUkTNimTraceIdentifierAccepted, optIfODUkTNimTIMDetMode=optIfODUkTNimTIMDetMode, optIfODUkTNimTIMActEnabled=optIfODUkTNimTIMActEnabled, optIfODUkTNimDEGThr=optIfODUkTNimDEGThr, optIfODUkTNimDEGM=optIfODUkTNimDEGM, optIfODUkTNimCurrentStatus=optIfODUkTNimCurrentStatus, optIfODUkTNimRowStatus=optIfODUkTNimRowStatus, optIfConfs=optIfConfs, optIfGroups=optIfGroups, optIfCompl=optIfCompl)

# Groups
mibBuilder.exportSymbols("OPT-IF-MIB", optIfOChSourcePreOtnPMGroup=optIfOChSourcePreOtnPMGroup, optIfOMSnSinkGroupBasic=optIfOMSnSinkGroupBasic, optIfOTSnSinkPreOtnPMGroup=optIfOTSnSinkPreOtnPMGroup, optIfPerfMonGroup=optIfPerfMonGroup, optIfOMSnSinkPreOtnPMThresholdGroup=optIfOMSnSinkPreOtnPMThresholdGroup, optIfOTSnCommonGroup=optIfOTSnCommonGroup, optIfODUkTNimGroup=optIfODUkTNimGroup, optIfOTSnSinkGroupFull=optIfOTSnSinkGroupFull, optIfOMSnSinkPreOtnPMGroup=optIfOMSnSinkPreOtnPMGroup, optIfOMSnCommonGroup=optIfOMSnCommonGroup, optIfOChGroupSinkPreOtnPMThresholdGroup=optIfOChGroupSinkPreOtnPMThresholdGroup, optIfODUkTSinkGroupCtp=optIfODUkTSinkGroupCtp, optIfOTSnSourceGroupFull=optIfOTSnSourceGroupFull, optIfOTSnAPRStatusGroup=optIfOTSnAPRStatusGroup, optIfGCC12Group=optIfGCC12Group, optIfOChSinkPreOtnPMGroup=optIfOChSinkPreOtnPMGroup, optIfOChSinkGroupBasic=optIfOChSinkGroupBasic, optIfOTSnSinkPreOtnPMThresholdGroup=optIfOTSnSinkPreOtnPMThresholdGroup, optIfODUkTCommonGroup=optIfODUkTCommonGroup, optIfOTUkSinkGroup=optIfOTUkSinkGroup, optIfODUkGroup=optIfODUkGroup, optIfOMSnSourcePreOtnPMGroup=optIfOMSnSourcePreOtnPMGroup, optIfOChGroupSourcePreOtnPMThresholdGroup=optIfOChGroupSourcePreOtnPMThresholdGroup, optIfOTSnSourcePreOtnPMGroup=optIfOTSnSourcePreOtnPMGroup, optIfOChSinkPreOtnPMThresholdGroup=optIfOChSinkPreOtnPMThresholdGroup, optIfOMSnSourcePreOtnPMThresholdGroup=optIfOMSnSourcePreOtnPMThresholdGroup, optIfOChCommonGroup=optIfOChCommonGroup, optIfOChGroupSourcePreOtnPMGroup=optIfOChGroupSourcePreOtnPMGroup, optIfOTUkCommonGroup=optIfOTUkCommonGroup, optIfOTUkSourceGroup=optIfOTUkSourceGroup, optIfOTSnSourcePreOtnPMThresholdGroup=optIfOTSnSourcePreOtnPMThresholdGroup, optIfGCC0Group=optIfGCC0Group, optIfODUkTtpSourceGroup=optIfODUkTtpSourceGroup, optIfODUkNimGroup=optIfODUkNimGroup, optIfOTSnAPRControlGroup=optIfOTSnAPRControlGroup, optIfOTSnSinkGroupBasic=optIfOTSnSinkGroupBasic, optIfODUkTSinkGroup=optIfODUkTSinkGroup, optIfOChGroupSinkPreOtnPMGroup=optIfOChGroupSinkPreOtnPMGroup, optIfODUkTtpSinkGroup=optIfODUkTtpSinkGroup, optIfOChSourcePreOtnPMThresholdGroup=optIfOChSourcePreOtnPMThresholdGroup, optIfOChGroupCommonGroup=optIfOChGroupCommonGroup, optIfOTMnGroup=optIfOTMnGroup, optIfODUkTSourceGroup=optIfODUkTSourceGroup)
