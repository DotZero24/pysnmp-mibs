# PySNMP SMI module. Autogenerated from smidump -f python IP-FORWARD-MIB
# by libsmi2pysnmp-0.0.3-alpha at Wed Nov 10 12:10:22 2004,
# Python version (2, 2, 1, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pysnmp.asn1 import subtypes

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( ip, ) = mibBuilder.importSymbols("RFC1213-MIB", "ip")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Gauge32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibVariable, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibVariable", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( RowStatus, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus")

# Objects

ipForward = ModuleIdentity((1, 3, 6, 1, 2, 1, 4, 24))
ipForwardNumber = MibVariable((1, 3, 6, 1, 2, 1, 4, 24, 1), Gauge32()).setMaxAccess("readonly")
ipForwardTable = MibTable((1, 3, 6, 1, 2, 1, 4, 24, 2))
ipForwardEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 24, 2, 1)).setIndexNames((0, "IP-FORWARD-MIB", "ipForwardDest"), (0, "IP-FORWARD-MIB", "ipForwardProto"), (0, "IP-FORWARD-MIB", "ipForwardPolicy"), (0, "IP-FORWARD-MIB", "ipForwardNextHop"))
ipForwardDest = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 1)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("readonly"))
ipForwardMask = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 2)).setColumnInitializer(MibVariable((), IpAddress().set("0.0.0.0")).setMaxAccess("readwrite"))
ipForwardPolicy = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 3)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readonly"))
ipForwardNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 4)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("readonly"))
ipForwardIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 5)).setColumnInitializer(MibVariable((), Integer32().set(0)).setMaxAccess("readwrite"))
ipForwardType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 6)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(4,1,3,2,)).addNamedValues(("other", 1), ("invalid", 2), ("local", 3), ("remote", 4), ).set(2)).setMaxAccess("readwrite"))
ipForwardProto = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 7)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(14,12,3,13,5,8,10,15,11,1,9,4,2,7,6,)).addNamedValues(("other", 1), ("es-is", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14), ("idpr", 15), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("is-is", 9), )).setMaxAccess("readonly"))
ipForwardAge = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 8)).setColumnInitializer(MibVariable((), Integer32().set(0)).setMaxAccess("readonly"))
ipForwardInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 9)).setColumnInitializer(MibVariable((), ObjectIdentifier()).setMaxAccess("readwrite"))
ipForwardNextHopAS = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 10)).setColumnInitializer(MibVariable((), Integer32().set(0)).setMaxAccess("readwrite"))
ipForwardMetric1 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 11)).setColumnInitializer(MibVariable((), Integer32().set(-1)).setMaxAccess("readwrite"))
ipForwardMetric2 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 12)).setColumnInitializer(MibVariable((), Integer32().set(-1)).setMaxAccess("readwrite"))
ipForwardMetric3 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 13)).setColumnInitializer(MibVariable((), Integer32().set(-1)).setMaxAccess("readwrite"))
ipForwardMetric4 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 14)).setColumnInitializer(MibVariable((), Integer32().set(-1)).setMaxAccess("readwrite"))
ipForwardMetric5 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 15)).setColumnInitializer(MibVariable((), Integer32().set(-1)).setMaxAccess("readwrite"))
ipCidrRouteNumber = MibVariable((1, 3, 6, 1, 2, 1, 4, 24, 3), Gauge32()).setMaxAccess("readonly")
ipCidrRouteTable = MibTable((1, 3, 6, 1, 2, 1, 4, 24, 4))
ipCidrRouteEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 24, 4, 1)).setIndexNames((0, "IP-FORWARD-MIB", "ipCidrRouteDest"), (0, "IP-FORWARD-MIB", "ipCidrRouteMask"), (0, "IP-FORWARD-MIB", "ipCidrRouteTos"), (0, "IP-FORWARD-MIB", "ipCidrRouteNextHop"))
ipCidrRouteDest = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 1)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("readonly"))
ipCidrRouteMask = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 2)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("readonly"))
ipCidrRouteTos = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 3)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readonly"))
ipCidrRouteNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 4)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("readonly"))
ipCidrRouteIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 5)).setColumnInitializer(MibVariable((), Integer32().set(0)).setMaxAccess("readwrite"))
ipCidrRouteType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 6)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(4,1,3,2,)).addNamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4), )).setMaxAccess("readwrite"))
ipCidrRouteProto = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 7)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(10,9,3,13,16,5,8,14,15,11,1,12,4,2,7,6,)).addNamedValues(("other", 1), ("esIs", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14), ("idpr", 15), ("ciscoEigrp", 16), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("isIs", 9), )).setMaxAccess("readonly"))
ipCidrRouteAge = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 8)).setColumnInitializer(MibVariable((), Integer32().set(0)).setMaxAccess("readonly"))
ipCidrRouteInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 9)).setColumnInitializer(MibVariable((), ObjectIdentifier()).setMaxAccess("readwrite"))
ipCidrRouteNextHopAS = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 10)).setColumnInitializer(MibVariable((), Integer32().set(0)).setMaxAccess("readwrite"))
ipCidrRouteMetric1 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 11)).setColumnInitializer(MibVariable((), Integer32().set(-1)).setMaxAccess("readwrite"))
ipCidrRouteMetric2 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 12)).setColumnInitializer(MibVariable((), Integer32().set(-1)).setMaxAccess("readwrite"))
ipCidrRouteMetric3 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 13)).setColumnInitializer(MibVariable((), Integer32().set(-1)).setMaxAccess("readwrite"))
ipCidrRouteMetric4 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 14)).setColumnInitializer(MibVariable((), Integer32().set(-1)).setMaxAccess("readwrite"))
ipCidrRouteMetric5 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 15)).setColumnInitializer(MibVariable((), Integer32().set(-1)).setMaxAccess("readwrite"))
ipCidrRouteStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 16)).setColumnInitializer(MibVariable((), RowStatus()).setMaxAccess("readwrite"))
ipForwardConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 4, 24, 5))
ipForwardGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 4, 24, 5, 1))
ipForwardCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 4, 24, 5, 2))

# Augmentions

# Groups

ipForwardCidrRouteGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 4, 24, 5, 1, 3)).setObjects(("IP-FORWARD-MIB", "ipCidrRouteNextHopAS"), ("IP-FORWARD-MIB", "ipCidrRouteNumber"), ("IP-FORWARD-MIB", "ipCidrRouteMetric5"), ("IP-FORWARD-MIB", "ipCidrRouteIfIndex"), ("IP-FORWARD-MIB", "ipCidrRouteMetric2"), ("IP-FORWARD-MIB", "ipCidrRouteProto"), ("IP-FORWARD-MIB", "ipCidrRouteStatus"), ("IP-FORWARD-MIB", "ipCidrRouteAge"), ("IP-FORWARD-MIB", "ipCidrRouteInfo"), ("IP-FORWARD-MIB", "ipCidrRouteMask"), ("IP-FORWARD-MIB", "ipCidrRouteNextHop"), ("IP-FORWARD-MIB", "ipCidrRouteMetric1"), ("IP-FORWARD-MIB", "ipCidrRouteMetric4"), ("IP-FORWARD-MIB", "ipCidrRouteDest"), ("IP-FORWARD-MIB", "ipCidrRouteTos"), ("IP-FORWARD-MIB", "ipCidrRouteMetric3"), ("IP-FORWARD-MIB", "ipCidrRouteType"), )
ipForwardMultiPathGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 4, 24, 5, 1, 2)).setObjects(("IP-FORWARD-MIB", "ipForwardMetric1"), ("IP-FORWARD-MIB", "ipForwardMask"), ("IP-FORWARD-MIB", "ipForwardMetric2"), ("IP-FORWARD-MIB", "ipForwardMetric3"), ("IP-FORWARD-MIB", "ipForwardAge"), ("IP-FORWARD-MIB", "ipForwardInfo"), ("IP-FORWARD-MIB", "ipForwardMetric4"), ("IP-FORWARD-MIB", "ipForwardPolicy"), ("IP-FORWARD-MIB", "ipForwardProto"), ("IP-FORWARD-MIB", "ipForwardIfIndex"), ("IP-FORWARD-MIB", "ipForwardNumber"), ("IP-FORWARD-MIB", "ipForwardType"), ("IP-FORWARD-MIB", "ipForwardNextHop"), ("IP-FORWARD-MIB", "ipForwardMetric5"), ("IP-FORWARD-MIB", "ipForwardNextHopAS"), ("IP-FORWARD-MIB", "ipForwardDest"), )

# Exports

# Objects
mibBuilder.exportSymbols("IP-FORWARD-MIB", ipForward=ipForward, ipForwardNumber=ipForwardNumber, ipForwardTable=ipForwardTable, ipForwardEntry=ipForwardEntry, ipForwardDest=ipForwardDest, ipForwardMask=ipForwardMask, ipForwardPolicy=ipForwardPolicy, ipForwardNextHop=ipForwardNextHop, ipForwardIfIndex=ipForwardIfIndex, ipForwardType=ipForwardType, ipForwardProto=ipForwardProto, ipForwardAge=ipForwardAge, ipForwardInfo=ipForwardInfo, ipForwardNextHopAS=ipForwardNextHopAS, ipForwardMetric1=ipForwardMetric1, ipForwardMetric2=ipForwardMetric2, ipForwardMetric3=ipForwardMetric3, ipForwardMetric4=ipForwardMetric4, ipForwardMetric5=ipForwardMetric5, ipCidrRouteNumber=ipCidrRouteNumber, ipCidrRouteTable=ipCidrRouteTable, ipCidrRouteEntry=ipCidrRouteEntry, ipCidrRouteDest=ipCidrRouteDest, ipCidrRouteMask=ipCidrRouteMask, ipCidrRouteTos=ipCidrRouteTos, ipCidrRouteNextHop=ipCidrRouteNextHop, ipCidrRouteIfIndex=ipCidrRouteIfIndex, ipCidrRouteType=ipCidrRouteType, ipCidrRouteProto=ipCidrRouteProto, ipCidrRouteAge=ipCidrRouteAge, ipCidrRouteInfo=ipCidrRouteInfo, ipCidrRouteNextHopAS=ipCidrRouteNextHopAS, ipCidrRouteMetric1=ipCidrRouteMetric1, ipCidrRouteMetric2=ipCidrRouteMetric2, ipCidrRouteMetric3=ipCidrRouteMetric3, ipCidrRouteMetric4=ipCidrRouteMetric4, ipCidrRouteMetric5=ipCidrRouteMetric5, ipCidrRouteStatus=ipCidrRouteStatus, ipForwardConformance=ipForwardConformance, ipForwardGroups=ipForwardGroups, ipForwardCompliances=ipForwardCompliances)

# Groups
mibBuilder.exportSymbols("IP-FORWARD-MIB", ipForwardCidrRouteGroup=ipForwardCidrRouteGroup, ipForwardMultiPathGroup=ipForwardMultiPathGroup)
