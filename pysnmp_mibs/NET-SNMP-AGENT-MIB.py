# PySNMP SMI module. Autogenerated from smidump -f python NET-SNMP-AGENT-MIB
# by libsmi2pysnmp-0.0.7-alpha at Thu Nov 16 19:13:31 2006,
# Python version (2, 4, 3, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( netSnmpGroups, netSnmpModuleIDs, netSnmpNotifications, netSnmpObjects, ) = mibBuilder.importSymbols("NET-SNMP-MIB", "netSnmpGroups", "netSnmpModuleIDs", "netSnmpNotifications", "netSnmpObjects")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup")
( Bits, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, RowStatus, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")

# Types

class NetsnmpCacheStatus(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(2,4,1,5,3,)
    namedValues = namedval.NamedValues(("enabled", 1), ("disabled", 2), ("empty", 3), ("cached", 4), ("expired", 5), )
    pass


# Objects

nsVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 1))
nsMibRegistry = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 2))
nsModuleTable = MibTable((1, 3, 6, 1, 4, 1, 8072, 1, 2, 1))
nsModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8072, 1, 2, 1, 1)).setIndexNames((0, "NET-SNMP-AGENT-MIB", "nsmContextName"), (0, "NET-SNMP-AGENT-MIB", "nsmRegistrationPoint"), (0, "NET-SNMP-AGENT-MIB", "nsmRegistrationPriority"))
nsmContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 2, 1, 1, 1), SnmpAdminString()).setMaxAccess("noaccess")
nsmRegistrationPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("noaccess")
nsmRegistrationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-2147483648L, 2147483647L))).setMaxAccess("noaccess")
nsModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
nsModuleModes = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 2, 1, 1, 5), Bits().subtype(namedValues=namedval.NamedValues(("getAndGetNext", 0), ("set", 1), ("getBulk", 2), ))).setMaxAccess("readonly")
nsModuleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
nsExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 3))
nsDLMod = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 4))
nsCache = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 5))
nsCacheDefaultTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8072, 1, 5, 1), Integer32().clone(5)).setMaxAccess("readwrite")
nsCacheEnabled = MibScalar((1, 3, 6, 1, 4, 1, 8072, 1, 5, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
nsCacheTable = MibTable((1, 3, 6, 1, 4, 1, 8072, 1, 5, 3))
nsCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8072, 1, 5, 3, 1)).setIndexNames((1, "NET-SNMP-AGENT-MIB", "nsCachedOID"))
nsCachedOID = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 5, 3, 1, 1), ObjectIdentifier()).setMaxAccess("noaccess")
nsCacheTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 5, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
nsCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 5, 3, 1, 3), NetsnmpCacheStatus()).setMaxAccess("readwrite")
nsErrorHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 6))
nsConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 7))
nsConfigDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 7, 1))
nsDebugEnabled = MibScalar((1, 3, 6, 1, 4, 1, 8072, 1, 7, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
nsDebugOutputAll = MibScalar((1, 3, 6, 1, 4, 1, 8072, 1, 7, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
nsDebugDumpPdu = MibScalar((1, 3, 6, 1, 4, 1, 8072, 1, 7, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
nsDebugTokenTable = MibTable((1, 3, 6, 1, 4, 1, 8072, 1, 7, 1, 4))
nsDebugTokenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8072, 1, 7, 1, 4, 1)).setIndexNames((1, "NET-SNMP-AGENT-MIB", "nsDebugTokenPrefix"))
nsDebugTokenPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 7, 1, 4, 1, 2), DisplayString()).setMaxAccess("noaccess")
nsDebugTokenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 7, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
nsConfigLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 7, 2))
nsLoggingTable = MibTable((1, 3, 6, 1, 4, 1, 8072, 1, 7, 2, 1))
nsLoggingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8072, 1, 7, 2, 1, 1)).setIndexNames((0, "NET-SNMP-AGENT-MIB", "nsLogLevel"), (1, "NET-SNMP-AGENT-MIB", "nsLogToken"))
nsLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 7, 2, 1, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(6,5,0,1,2,3,7,4,)).subtype(namedValues=namedval.NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ))).setMaxAccess("noaccess")
nsLogToken = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 7, 2, 1, 1, 2), DisplayString()).setMaxAccess("noaccess")
nsLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 7, 2, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,4,5,3,)).subtype(namedValues=namedval.NamedValues(("stdout", 1), ("stderr", 2), ("file", 3), ("syslog", 4), ("callback", 5), ))).setMaxAccess("readcreate")
nsLogMaxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 7, 2, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(6,5,0,1,2,3,7,4,)).subtype(namedValues=namedval.NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), )).clone(0)).setMaxAccess("readcreate")
nsLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 7, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
nsTransactions = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 8))
nsTransactionTable = MibTable((1, 3, 6, 1, 4, 1, 8072, 1, 8, 1))
nsTransactionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8072, 1, 8, 1, 1)).setIndexNames((0, "NET-SNMP-AGENT-MIB", "nsTransactionID"))
nsTransactionID = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 8, 1, 1, 1), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 4294967295L))).setMaxAccess("noaccess")
nsTransactionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
netSnmpAgentMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 8072, 3, 1, 2)).setRevisions(("2005-02-07 00:00","2002-02-09 00:00",))
nsConfigGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 5, 2, 7))

# Augmentions

# Notifications

nsNotifyShutdown = NotificationType((1, 3, 6, 1, 4, 1, 8072, 4, 0, 2)).setObjects()
nsNotifyRestart = NotificationType((1, 3, 6, 1, 4, 1, 8072, 4, 0, 3)).setObjects()
nsNotifyStart = NotificationType((1, 3, 6, 1, 4, 1, 8072, 4, 0, 1)).setObjects()

# Groups

nsAgentNotifyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8072, 5, 2, 9)).setObjects(("NET-SNMP-AGENT-MIB", "nsNotifyShutdown"), ("NET-SNMP-AGENT-MIB", "nsNotifyRestart"), ("NET-SNMP-AGENT-MIB", "nsNotifyStart"), )
nsDebugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8072, 5, 2, 7, 1)).setObjects(("NET-SNMP-AGENT-MIB", "nsDebugTokenStatus"), ("NET-SNMP-AGENT-MIB", "nsDebugOutputAll"), ("NET-SNMP-AGENT-MIB", "nsDebugEnabled"), ("NET-SNMP-AGENT-MIB", "nsDebugDumpPdu"), )
nsTransactionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8072, 5, 2, 8)).setObjects(("NET-SNMP-AGENT-MIB", "nsTransactionMode"), )
nsLoggingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8072, 5, 2, 7, 2)).setObjects(("NET-SNMP-AGENT-MIB", "nsLogType"), ("NET-SNMP-AGENT-MIB", "nsLogStatus"), ("NET-SNMP-AGENT-MIB", "nsLogMaxLevel"), )
nsModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8072, 5, 2, 2)).setObjects(("NET-SNMP-AGENT-MIB", "nsModuleName"), ("NET-SNMP-AGENT-MIB", "nsModuleTimeout"), ("NET-SNMP-AGENT-MIB", "nsModuleModes"), )
nsCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8072, 5, 2, 4)).setObjects(("NET-SNMP-AGENT-MIB", "nsCacheTimeout"), ("NET-SNMP-AGENT-MIB", "nsCacheEnabled"), ("NET-SNMP-AGENT-MIB", "nsCacheDefaultTimeout"), ("NET-SNMP-AGENT-MIB", "nsCacheStatus"), )

# Exports

# Module identity
mibBuilder.exportSymbols("NET-SNMP-AGENT-MIB", PYSNMP_MODULE_ID=netSnmpAgentMIB)

# Types
mibBuilder.exportSymbols("NET-SNMP-AGENT-MIB", NetsnmpCacheStatus=NetsnmpCacheStatus)

# Objects
mibBuilder.exportSymbols("NET-SNMP-AGENT-MIB", nsVersion=nsVersion, nsMibRegistry=nsMibRegistry, nsModuleTable=nsModuleTable, nsModuleEntry=nsModuleEntry, nsmContextName=nsmContextName, nsmRegistrationPoint=nsmRegistrationPoint, nsmRegistrationPriority=nsmRegistrationPriority, nsModuleName=nsModuleName, nsModuleModes=nsModuleModes, nsModuleTimeout=nsModuleTimeout, nsExtensions=nsExtensions, nsDLMod=nsDLMod, nsCache=nsCache, nsCacheDefaultTimeout=nsCacheDefaultTimeout, nsCacheEnabled=nsCacheEnabled, nsCacheTable=nsCacheTable, nsCacheEntry=nsCacheEntry, nsCachedOID=nsCachedOID, nsCacheTimeout=nsCacheTimeout, nsCacheStatus=nsCacheStatus, nsErrorHistory=nsErrorHistory, nsConfiguration=nsConfiguration, nsConfigDebug=nsConfigDebug, nsDebugEnabled=nsDebugEnabled, nsDebugOutputAll=nsDebugOutputAll, nsDebugDumpPdu=nsDebugDumpPdu, nsDebugTokenTable=nsDebugTokenTable, nsDebugTokenEntry=nsDebugTokenEntry, nsDebugTokenPrefix=nsDebugTokenPrefix, nsDebugTokenStatus=nsDebugTokenStatus, nsConfigLogging=nsConfigLogging, nsLoggingTable=nsLoggingTable, nsLoggingEntry=nsLoggingEntry, nsLogLevel=nsLogLevel, nsLogToken=nsLogToken, nsLogType=nsLogType, nsLogMaxLevel=nsLogMaxLevel, nsLogStatus=nsLogStatus, nsTransactions=nsTransactions, nsTransactionTable=nsTransactionTable, nsTransactionEntry=nsTransactionEntry, nsTransactionID=nsTransactionID, nsTransactionMode=nsTransactionMode, netSnmpAgentMIB=netSnmpAgentMIB, nsConfigGroups=nsConfigGroups)

# Notifications
mibBuilder.exportSymbols("NET-SNMP-AGENT-MIB", nsNotifyShutdown=nsNotifyShutdown, nsNotifyRestart=nsNotifyRestart, nsNotifyStart=nsNotifyStart)

# Groups
mibBuilder.exportSymbols("NET-SNMP-AGENT-MIB", nsAgentNotifyGroup=nsAgentNotifyGroup, nsDebugGroup=nsDebugGroup, nsTransactionGroup=nsTransactionGroup, nsLoggingGroup=nsLoggingGroup, nsModuleGroup=nsModuleGroup, nsCacheGroup=nsCacheGroup)
