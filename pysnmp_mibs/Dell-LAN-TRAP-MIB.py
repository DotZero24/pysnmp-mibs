_I='Integer32'
_H='read-only'
_G='dellTrapInfo'
_F='dellTrapSeverity'
_E='dellTrapSource'
_D='dellTrapSeqNum'
_C='dellTrapTimeStamp'
_B='current'
_A='Dell-LAN-TRAP-MIB'
if'mibBuilder'not in globals():import sys;sys.stderr.write(__doc__);sys.exit(1)
Integer,OctetString,ObjectIdentifier=mibBuilder.importSymbols('ASN1','Integer','OctetString','ObjectIdentifier')
NamedValues,=mibBuilder.importSymbols('ASN1-ENUMERATION','NamedValues')
ConstraintsIntersection,ConstraintsUnion,SingleValueConstraint,ValueRangeConstraint,ValueSizeConstraint=mibBuilder.importSymbols('ASN1-REFINEMENT','ConstraintsIntersection','ConstraintsUnion','SingleValueConstraint','ValueRangeConstraint','ValueSizeConstraint')
dellLan,dellLanCommon=mibBuilder.importSymbols('Dell-Vendor-MIB','dellLan','dellLanCommon')
ModuleCompliance,NotificationGroup=mibBuilder.importSymbols('SNMPv2-CONF','ModuleCompliance','NotificationGroup')
Bits,Counter32,Counter64,Gauge32,Integer32,IpAddress,ModuleIdentity,MibIdentifier,NotificationType,ObjectIdentity,MibScalar,MibTable,MibTableRow,MibTableColumn,TimeTicks,Unsigned32,iso=mibBuilder.importSymbols('SNMPv2-SMI','Bits','Counter32','Counter64','Gauge32',_I,'IpAddress','ModuleIdentity','MibIdentifier','NotificationType','ObjectIdentity','MibScalar','MibTable','MibTableRow','MibTableColumn','TimeTicks','Unsigned32','iso')
DateAndTime,DisplayString,PhysAddress,TextualConvention=mibBuilder.importSymbols('SNMPv2-TC','DateAndTime','DisplayString','PhysAddress','TextualConvention')
dellAlarmGroup=ModuleIdentity((1,3,6,1,4,1,674,10895,5000,1,1))
_DellTrapInfo_Type=DisplayString
_DellTrapInfo_Object=MibScalar
dellTrapInfo=_DellTrapInfo_Object((1,3,6,1,4,1,674,10895,5000,1,1,1),_DellTrapInfo_Type())
dellTrapInfo.setMaxAccess(_H)
if mibBuilder.loadTexts:dellTrapInfo.setStatus(_B)
class _DellTrapSeverity_Type(Integer32):subtypeSpec=Integer32.subtypeSpec;subtypeSpec+=ConstraintsUnion(SingleValueConstraint(*(0,1,2,3,4)));namedValues=NamedValues(*(('clear',0),('info',1),('minor',2),('major',3),('critical',4)))
_DellTrapSeverity_Type.__name__=_I
_DellTrapSeverity_Object=MibScalar
dellTrapSeverity=_DellTrapSeverity_Object((1,3,6,1,4,1,674,10895,5000,1,1,2),_DellTrapSeverity_Type())
dellTrapSeverity.setMaxAccess(_H)
if mibBuilder.loadTexts:dellTrapSeverity.setStatus(_B)
_DellTrapSource_Type=DisplayString
_DellTrapSource_Object=MibScalar
dellTrapSource=_DellTrapSource_Object((1,3,6,1,4,1,674,10895,5000,1,1,3),_DellTrapSource_Type())
dellTrapSource.setMaxAccess(_H)
if mibBuilder.loadTexts:dellTrapSource.setStatus(_B)
_DellTrapSeqNum_Type=Unsigned32
_DellTrapSeqNum_Object=MibScalar
dellTrapSeqNum=_DellTrapSeqNum_Object((1,3,6,1,4,1,674,10895,5000,1,1,4),_DellTrapSeqNum_Type())
dellTrapSeqNum.setMaxAccess(_H)
if mibBuilder.loadTexts:dellTrapSeqNum.setStatus(_B)
_DellTrapTimeStamp_Type=DateAndTime
_DellTrapTimeStamp_Object=MibScalar
dellTrapTimeStamp=_DellTrapTimeStamp_Object((1,3,6,1,4,1,674,10895,5000,1,1,5),_DellTrapTimeStamp_Type())
dellTrapTimeStamp.setMaxAccess(_H)
if mibBuilder.loadTexts:dellTrapTimeStamp.setStatus(_B)
hwResourceOverflow=NotificationType((1,3,6,1,4,1,674,10895,500))
hwResourceOverflow.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:hwResourceOverflow.setStatus(_B)
swResourceOverflow=NotificationType((1,3,6,1,4,1,674,10895,510))
swResourceOverflow.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:swResourceOverflow.setStatus(_B)
configChanged=NotificationType((1,3,6,1,4,1,674,10895,520))
configChanged.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:configChanged.setStatus(_B)
resetRequired=NotificationType((1,3,6,1,4,1,674,10895,530))
resetRequired.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:resetRequired.setStatus(_B)
endTftp=NotificationType((1,3,6,1,4,1,674,10895,540))
endTftp.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:endTftp.setStatus(_B)
abortTftp=NotificationType((1,3,6,1,4,1,674,10895,550))
abortTftp.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:abortTftp.setStatus(_B)
startTftp=NotificationType((1,3,6,1,4,1,674,10895,560))
startTftp.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:startTftp.setStatus(_B)
linkFailure=NotificationType((1,3,6,1,4,1,674,10895,570))
linkFailure.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:linkFailure.setStatus(_B)
linkFailureSwitchBackUp=NotificationType((1,3,6,1,4,1,674,10895,580))
linkFailureSwitchBackUp.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:linkFailureSwitchBackUp.setStatus(_B)
mainLinkUp=NotificationType((1,3,6,1,4,1,674,10895,590))
mainLinkUp.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:mainLinkUp.setStatus(_B)
errorsDuringInit=NotificationType((1,3,6,1,4,1,674,10895,600))
errorsDuringInit.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:errorsDuringInit.setStatus(_B)
vlanDynPortAdded=NotificationType((1,3,6,1,4,1,674,10895,610))
vlanDynPortAdded.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:vlanDynPortAdded.setStatus(_B)
vlanDynPortRemoved=NotificationType((1,3,6,1,4,1,674,10895,620))
vlanDynPortRemoved.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:vlanDynPortRemoved.setStatus(_B)
ipZhrReqStaticConnNotAccepted=NotificationType((1,3,6,1,4,1,674,10895,630))
ipZhrReqStaticConnNotAccepted.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:ipZhrReqStaticConnNotAccepted.setStatus(_B)
ipZhrVirtualIpAsSource=NotificationType((1,3,6,1,4,1,674,10895,640))
ipZhrVirtualIpAsSource.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:ipZhrVirtualIpAsSource.setStatus(_B)
ipZhrNotAllocVirtualIp=NotificationType((1,3,6,1,4,1,674,10895,650))
ipZhrNotAllocVirtualIp.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:ipZhrNotAllocVirtualIp.setStatus(_B)
stackMasterFailed=NotificationType((1,3,6,1,4,1,674,10895,660))
stackMasterFailed.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:stackMasterFailed.setStatus(_B)
stackNewMasterElected=NotificationType((1,3,6,1,4,1,674,10895,670))
stackNewMasterElected.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:stackNewMasterElected.setStatus(_B)
stackMemberUnitFailed=NotificationType((1,3,6,1,4,1,674,10895,680))
stackMemberUnitFailed.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:stackMemberUnitFailed.setStatus(_B)
stackNewMemberUnitAdded=NotificationType((1,3,6,1,4,1,674,10895,690))
stackNewMemberUnitAdded.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:stackNewMemberUnitAdded.setStatus(_B)
stackMemberUnitRemoved=NotificationType((1,3,6,1,4,1,674,10895,700))
stackMemberUnitRemoved.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:stackMemberUnitRemoved.setStatus(_B)
stackSplitMasterReport=NotificationType((1,3,6,1,4,1,674,10895,710))
stackSplitMasterReport.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:stackSplitMasterReport.setStatus(_B)
stackSplitNewMasterReport=NotificationType((1,3,6,1,4,1,674,10895,720))
stackSplitNewMasterReport.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:stackSplitNewMasterReport.setStatus(_B)
stackRejoined=NotificationType((1,3,6,1,4,1,674,10895,730))
stackRejoined.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:stackRejoined.setStatus(_B)
stackLinkFailed=NotificationType((1,3,6,1,4,1,674,10895,740))
stackLinkFailed.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:stackLinkFailed.setStatus(_B)
dhcpAllocationFailure=NotificationType((1,3,6,1,4,1,674,10895,750))
dhcpAllocationFailure.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:dhcpAllocationFailure.setStatus(_B)
dot1dStpPortStateForwarding=NotificationType((1,3,6,1,4,1,674,10895,760))
dot1dStpPortStateForwarding.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:dot1dStpPortStateForwarding.setStatus(_B)
dot1dStpPortStateNotForwarding=NotificationType((1,3,6,1,4,1,674,10895,770))
dot1dStpPortStateNotForwarding.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:dot1dStpPortStateNotForwarding.setStatus(_B)
policyDropPacketTrap=NotificationType((1,3,6,1,4,1,674,10895,780))
policyDropPacketTrap.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:policyDropPacketTrap.setStatus(_B)
policyForwardPacketTrap=NotificationType((1,3,6,1,4,1,674,10895,790))
policyForwardPacketTrap.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:policyForwardPacketTrap.setStatus(_B)
igmpV1MsgReceived=NotificationType((1,3,6,1,4,1,674,10895,800))
igmpV1MsgReceived.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:igmpV1MsgReceived.setStatus(_B)
vrrpEntriesDeleted=NotificationType((1,3,6,1,4,1,674,10895,810))
vrrpEntriesDeleted.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:vrrpEntriesDeleted.setStatus(_B)
trunkPortAddedTrap=NotificationType((1,3,6,1,4,1,674,10895,820))
trunkPortAddedTrap.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:trunkPortAddedTrap.setStatus(_B)
trunkPortRemovedTrap=NotificationType((1,3,6,1,4,1,674,10895,830))
trunkPortRemovedTrap.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:trunkPortRemovedTrap.setStatus(_B)
lockPortTrap=NotificationType((1,3,6,1,4,1,674,10895,840))
lockPortTrap.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:lockPortTrap.setStatus(_B)
vlanDynVlanAdded=NotificationType((1,3,6,1,4,1,674,10895,850))
vlanDynVlanAdded.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:vlanDynVlanAdded.setStatus(_B)
vlanDynVlanRemoved=NotificationType((1,3,6,1,4,1,674,10895,860))
vlanDynVlanRemoved.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:vlanDynVlanRemoved.setStatus(_B)
vlanDynamicToStatic=NotificationType((1,3,6,1,4,1,674,10895,870))
vlanDynamicToStatic.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:vlanDynamicToStatic.setStatus(_B)
vlanStaticToDynamic=NotificationType((1,3,6,1,4,1,674,10895,880))
vlanStaticToDynamic.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:vlanStaticToDynamic.setStatus(_B)
envMonFanStateChange=NotificationType((1,3,6,1,4,1,674,10895,890))
envMonFanStateChange.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:envMonFanStateChange.setStatus(_B)
envMonPowerSupplyStateChange=NotificationType((1,3,6,1,4,1,674,10895,900))
envMonPowerSupplyStateChange.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:envMonPowerSupplyStateChange.setStatus(_B)
envMonTemperatureRisingAlarm=NotificationType((1,3,6,1,4,1,674,10895,910))
envMonTemperatureRisingAlarm.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:envMonTemperatureRisingAlarm.setStatus(_B)
copyFinished=NotificationType((1,3,6,1,4,1,674,10895,920))
copyFinished.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:copyFinished.setStatus(_B)
copyFailed=NotificationType((1,3,6,1,4,1,674,10895,930))
copyFailed.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:copyFailed.setStatus(_B)
dot1xPortStatusAuthorizedTrap=NotificationType((1,3,6,1,4,1,674,10895,940))
dot1xPortStatusAuthorizedTrap.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:dot1xPortStatusAuthorizedTrap.setStatus(_B)
dot1xPortStatusUnauthorizedTrap=NotificationType((1,3,6,1,4,1,674,10895,950))
dot1xPortStatusUnauthorizedTrap.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:dot1xPortStatusUnauthorizedTrap.setStatus(_B)
broadcastStormDetected=NotificationType((1,3,6,1,4,1,674,10895,960))
broadcastStormDetected.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:broadcastStormDetected.setStatus(_B)
stpElectedAsRoot=NotificationType((1,3,6,1,4,1,674,10895,970))
stpElectedAsRoot.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:stpElectedAsRoot.setStatus(_B)
stpNewRootElected=NotificationType((1,3,6,1,4,1,674,10895,980))
stpNewRootElected.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:stpNewRootElected.setStatus(_B)
igmpElectedAsQuerier=NotificationType((1,3,6,1,4,1,674,10895,990))
igmpElectedAsQuerier.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:igmpElectedAsQuerier.setStatus(_B)
invalidUserLoginAttempted=NotificationType((1,3,6,1,4,1,674,10895,1000))
invalidUserLoginAttempted.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:invalidUserLoginAttempted.setStatus(_B)
managementACLViolation=NotificationType((1,3,6,1,4,1,674,10895,1010))
managementACLViolation.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:managementACLViolation.setStatus(_B)
sfpInserted=NotificationType((1,3,6,1,4,1,674,10895,1020))
sfpInserted.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:sfpInserted.setStatus(_B)
sfpRemoved=NotificationType((1,3,6,1,4,1,674,10895,1030))
sfpRemoved.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:sfpRemoved.setStatus(_B)
xfpInserted=NotificationType((1,3,6,1,4,1,674,10895,1040))
xfpInserted.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:xfpInserted.setStatus(_B)
xfpRemoved=NotificationType((1,3,6,1,4,1,674,10895,1050))
xfpRemoved.setObjects(*((_A,_C),(_A,_D),(_A,_E),(_A,_F),(_A,_G)))
if mibBuilder.loadTexts:xfpRemoved.setStatus(_B)
mibBuilder.exportSymbols(_A,**{'hwResourceOverflow':hwResourceOverflow,'swResourceOverflow':swResourceOverflow,'configChanged':configChanged,'resetRequired':resetRequired,'endTftp':endTftp,'abortTftp':abortTftp,'startTftp':startTftp,'linkFailure':linkFailure,'linkFailureSwitchBackUp':linkFailureSwitchBackUp,'mainLinkUp':mainLinkUp,'errorsDuringInit':errorsDuringInit,'vlanDynPortAdded':vlanDynPortAdded,'vlanDynPortRemoved':vlanDynPortRemoved,'ipZhrReqStaticConnNotAccepted':ipZhrReqStaticConnNotAccepted,'ipZhrVirtualIpAsSource':ipZhrVirtualIpAsSource,'ipZhrNotAllocVirtualIp':ipZhrNotAllocVirtualIp,'stackMasterFailed':stackMasterFailed,'stackNewMasterElected':stackNewMasterElected,'stackMemberUnitFailed':stackMemberUnitFailed,'stackNewMemberUnitAdded':stackNewMemberUnitAdded,'stackMemberUnitRemoved':stackMemberUnitRemoved,'stackSplitMasterReport':stackSplitMasterReport,'stackSplitNewMasterReport':stackSplitNewMasterReport,'stackRejoined':stackRejoined,'stackLinkFailed':stackLinkFailed,'dhcpAllocationFailure':dhcpAllocationFailure,'dot1dStpPortStateForwarding':dot1dStpPortStateForwarding,'dot1dStpPortStateNotForwarding':dot1dStpPortStateNotForwarding,'policyDropPacketTrap':policyDropPacketTrap,'policyForwardPacketTrap':policyForwardPacketTrap,'igmpV1MsgReceived':igmpV1MsgReceived,'vrrpEntriesDeleted':vrrpEntriesDeleted,'trunkPortAddedTrap':trunkPortAddedTrap,'trunkPortRemovedTrap':trunkPortRemovedTrap,'lockPortTrap':lockPortTrap,'vlanDynVlanAdded':vlanDynVlanAdded,'vlanDynVlanRemoved':vlanDynVlanRemoved,'vlanDynamicToStatic':vlanDynamicToStatic,'vlanStaticToDynamic':vlanStaticToDynamic,'envMonFanStateChange':envMonFanStateChange,'envMonPowerSupplyStateChange':envMonPowerSupplyStateChange,'envMonTemperatureRisingAlarm':envMonTemperatureRisingAlarm,'copyFinished':copyFinished,'copyFailed':copyFailed,'dot1xPortStatusAuthorizedTrap':dot1xPortStatusAuthorizedTrap,'dot1xPortStatusUnauthorizedTrap':dot1xPortStatusUnauthorizedTrap,'broadcastStormDetected':broadcastStormDetected,'stpElectedAsRoot':stpElectedAsRoot,'stpNewRootElected':stpNewRootElected,'igmpElectedAsQuerier':igmpElectedAsQuerier,'invalidUserLoginAttempted':invalidUserLoginAttempted,'managementACLViolation':managementACLViolation,'sfpInserted':sfpInserted,'sfpRemoved':sfpRemoved,'xfpInserted':xfpInserted,'xfpRemoved':xfpRemoved,'dellAlarmGroup':dellAlarmGroup,_G:dellTrapInfo,_F:dellTrapSeverity,_E:dellTrapSource,_D:dellTrapSeqNum,_C:dellTrapTimeStamp})