# PySNMP SMI module. Autogenerated from smidump -f python FLOW-METER-MIB
# by libsmi2pysnmp-0.0.4-alpha at Tue Jun 28 11:30:47 2005,
# Python version (2, 4, 0, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( TimeFilter, ) = mibBuilder.importSymbols("RMON2-MIB", "TimeFilter")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Counter64, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibVariable, MibTable, MibTableRow, MibTableColumn, TimeTicks, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibVariable", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "mib-2")
( RowStatus, TextualConvention, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TimeStamp", "TruthValue")

# Types

class ActionNumber(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(3,15,6,5,10,17,2,1,13,14,16,7,9,11,8,4,12,)
    namedValues = namedval.NamedValues(("ignore", 1), ("goto", 10), ("gotoAct", 11), ("pushRuleTo", 12), ("pushRuleToAct", 13), ("pushPktTo", 14), ("pushPktToAct", 15), ("popTo", 16), ("popToAct", 17), ("noMatch", 2), ("count", 3), ("countPkt", 4), ("return", 5), ("gosub", 6), ("gosubAct", 7), ("assign", 8), ("assignAct", 9), )
    pass

class AdjacentAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(3,20)
    pass

class AdjacentType(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(1,3,9,12,13,7,11,15,)
    namedValues = namedval.NamedValues(("ip", 1), ("ipx", 11), ("appletalk", 12), ("decnet", 13), ("fddi", 15), ("nsap", 3), ("ethernet", 7), ("tokenring", 9), )
    pass

class FlowAttributeNumber(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(30,29,31,32,33,18,16,34,15,25,37,4,2,40,27,28,13,7,5,14,38,20,35,26,41,24,22,9,3,39,1,12,10,17,11,8,19,21,6,36,23,)
    namedValues = namedval.NamedValues(("flowIndex", 1), ("sourcePeerMask", 10), ("sourceTransType", 11), ("sourceTransAddress", 12), ("sourceTransMask", 13), ("destInterface", 14), ("destAdjacentType", 15), ("destAdjacentAddress", 16), ("destAdjacentMask", 17), ("destPeerType", 18), ("destPeerAddress", 19), ("flowStatus", 2), ("destPeerMask", 20), ("destTransType", 21), ("destTransAddress", 22), ("destTransMask", 23), ("pduScale", 24), ("octetScale", 25), ("ruleSet", 26), ("toOctets", 27), ("toPDUs", 28), ("fromOctets", 29), ("flowTimeMark", 3), ("fromPDUs", 30), ("firstTime", 31), ("lastActiveTime", 32), ("sourceSubscriberID", 33), ("destSubscriberID", 34), ("sessionID", 35), ("sourceClass", 36), ("destClass", 37), ("flowClass", 38), ("sourceKind", 39), ("sourceInterface", 4), ("destKind", 40), ("flowKind", 41), ("sourceAdjacentType", 5), ("sourceAdjacentAddress", 6), ("sourceAdjacentMask", 7), ("sourcePeerType", 8), ("sourcePeerAddress", 9), )
    pass

class PeerAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(3,20)
    pass

class PeerType(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(3,13,12,1,2,11,)
    namedValues = namedval.NamedValues(("ipv4", 1), ("ipx", 11), ("appletalk", 12), ("decnet", 13), ("ipv6", 2), ("nsap", 3), )
    pass

class RuleAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(2,20)
    pass

class RuleAttributeNumber(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(33,18,16,34,15,0,37,4,50,39,21,38,51,35,53,54,55,41,22,9,14,12,6,11,52,8,19,5,40,36,)
    namedValues = namedval.NamedValues(("null", 0), ("sourceTransType", 11), ("sourceTransAddress", 12), ("destInterface", 14), ("destAdjacentType", 15), ("destAdjacentAddress", 16), ("destPeerType", 18), ("destPeerAddress", 19), ("destTransType", 21), ("destTransAddress", 22), ("sourceSubscriberID", 33), ("destSubscriberID", 34), ("sessionID", 35), ("sourceClass", 36), ("destClass", 37), ("flowClass", 38), ("sourceKind", 39), ("sourceInterface", 4), ("destKind", 40), ("flowKind", 41), ("sourceAdjacentType", 5), ("matchingStoD", 50), ("v1", 51), ("v2", 52), ("v3", 53), ("v4", 54), ("v5", 55), ("sourceAdjacentAddress", 6), ("sourcePeerType", 8), ("sourcePeerAddress", 9), )
    pass

class TransportAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(2,2)
    pass

class TransportType(Integer32):
    subtypeSpec = Integer32.subtypeSpec+constraint.ValueRangeConstraint(1,255)
    pass

class UTF8OwnerString(TextualConvention, OctetString):
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(0,127)
    pass


# Objects

flowMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 40))
flowControl = MibIdentifier((1, 3, 6, 1, 2, 1, 40, 1))
flowRuleSetInfoTable = MibTable((1, 3, 6, 1, 2, 1, 40, 1, 1))
flowRuleSetInfoEntry = MibTableRow((1, 3, 6, 1, 2, 1, 40, 1, 1, 1)).setIndexNames((0, "FLOW-METER-MIB", "flowRuleInfoIndex"))
flowRuleInfoIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 1, 1, 1)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess("noaccess"))
flowRuleInfoSize = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 1, 1, 2)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readwrite"))
flowRuleInfoOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 1, 1, 3)).setColumnInitializer(MibVariable((), UTF8OwnerString()).setMaxAccess("readwrite"))
flowRuleInfoTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 1, 1, 4)).setColumnInitializer(MibVariable((), TimeStamp()).setMaxAccess("readonly"))
flowRuleInfoStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 1, 1, 5)).setColumnInitializer(MibVariable((), RowStatus()).setMaxAccess("readwrite"))
flowRuleInfoName = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 1, 1, 6)).setColumnInitializer(MibVariable((), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 127))).setMaxAccess("readwrite"))
flowRuleInfoRulesReady = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 1, 1, 7)).setColumnInitializer(MibVariable((), TruthValue()).setMaxAccess("readwrite"))
flowRuleInfoFlowRecords = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 1, 1, 8)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readonly"))
flowInterfaceTable = MibTable((1, 3, 6, 1, 2, 1, 40, 1, 2))
flowInterfaceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 40, 1, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
flowInterfaceSampleRate = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 2, 1, 1)).setColumnInitializer(MibVariable((), Integer32().clone(1)).setMaxAccess("readwrite"))
flowInterfaceLostPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 2, 1, 2)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
flowReaderInfoTable = MibTable((1, 3, 6, 1, 2, 1, 40, 1, 3))
flowReaderInfoEntry = MibTableRow((1, 3, 6, 1, 2, 1, 40, 1, 3, 1)).setIndexNames((0, "FLOW-METER-MIB", "flowReaderIndex"))
flowReaderIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 3, 1, 1)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess("noaccess"))
flowReaderTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 3, 1, 2)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readwrite"))
flowReaderOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 3, 1, 3)).setColumnInitializer(MibVariable((), UTF8OwnerString()).setMaxAccess("readwrite"))
flowReaderLastTime = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 3, 1, 4)).setColumnInitializer(MibVariable((), TimeStamp()).setMaxAccess("readwrite"))
flowReaderPreviousTime = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 3, 1, 5)).setColumnInitializer(MibVariable((), TimeStamp()).setMaxAccess("readonly"))
flowReaderStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 3, 1, 6)).setColumnInitializer(MibVariable((), RowStatus()).setMaxAccess("readwrite"))
flowReaderRuleSet = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 3, 1, 7)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess("readwrite"))
flowManagerInfoTable = MibTable((1, 3, 6, 1, 2, 1, 40, 1, 4))
flowManagerInfoEntry = MibTableRow((1, 3, 6, 1, 2, 1, 40, 1, 4, 1)).setIndexNames((0, "FLOW-METER-MIB", "flowManagerIndex"))
flowManagerIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 4, 1, 1)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess("noaccess"))
flowManagerCurrentRuleSet = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 4, 1, 2)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readwrite"))
flowManagerStandbyRuleSet = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 4, 1, 3)).setColumnInitializer(MibVariable((), Integer32().clone(0)).setMaxAccess("readwrite"))
flowManagerHighWaterMark = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 4, 1, 4)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess("readwrite"))
flowManagerCounterWrap = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 4, 1, 5)).setColumnInitializer(MibVariable((), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("wrap", 1), ("scale", 2), )).clone(1)).setMaxAccess("readwrite"))
flowManagerOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 4, 1, 6)).setColumnInitializer(MibVariable((), UTF8OwnerString()).setMaxAccess("readwrite"))
flowManagerTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 4, 1, 7)).setColumnInitializer(MibVariable((), TimeStamp()).setMaxAccess("readonly"))
flowManagerStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 4, 1, 8)).setColumnInitializer(MibVariable((), RowStatus()).setMaxAccess("readwrite"))
flowManagerRunningStandby = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 1, 4, 1, 9)).setColumnInitializer(MibVariable((), TruthValue()).setMaxAccess("readwrite"))
flowFloodMark = MibVariable((1, 3, 6, 1, 2, 1, 40, 1, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100)).clone(95)).setMaxAccess("readwrite")
flowInactivityTimeout = MibVariable((1, 3, 6, 1, 2, 1, 40, 1, 6), Integer32().clone(600)).setMaxAccess("readwrite")
flowActiveFlows = MibVariable((1, 3, 6, 1, 2, 1, 40, 1, 7), Integer32()).setMaxAccess("readonly")
flowMaxFlows = MibVariable((1, 3, 6, 1, 2, 1, 40, 1, 8), Integer32()).setMaxAccess("readonly")
flowFloodMode = MibVariable((1, 3, 6, 1, 2, 1, 40, 1, 9), TruthValue()).setMaxAccess("readwrite")
flowData = MibIdentifier((1, 3, 6, 1, 2, 1, 40, 2))
flowDataTable = MibTable((1, 3, 6, 1, 2, 1, 40, 2, 1))
flowDataEntry = MibTableRow((1, 3, 6, 1, 2, 1, 40, 2, 1, 1)).setIndexNames((0, "FLOW-METER-MIB", "flowDataRuleSet"), (0, "FLOW-METER-MIB", "flowDataTimeMark"), (0, "FLOW-METER-MIB", "flowDataIndex"))
flowDataIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 1)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess("noaccess"))
flowDataTimeMark = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 2)).setColumnInitializer(MibVariable((), TimeFilter()).setMaxAccess("noaccess"))
flowDataStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 3)).setColumnInitializer(MibVariable((), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(("inactive", 1), ("current", 2), ))).setMaxAccess("readonly"))
flowDataSourceInterface = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 4)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readonly"))
flowDataSourceAdjacentType = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 5)).setColumnInitializer(MibVariable((), AdjacentType()).setMaxAccess("readonly"))
flowDataSourceAdjacentAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 6)).setColumnInitializer(MibVariable((), AdjacentAddress()).setMaxAccess("readonly"))
flowDataSourceAdjacentMask = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 7)).setColumnInitializer(MibVariable((), AdjacentAddress()).setMaxAccess("readonly"))
flowDataSourcePeerType = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 8)).setColumnInitializer(MibVariable((), PeerType()).setMaxAccess("readonly"))
flowDataSourcePeerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 9)).setColumnInitializer(MibVariable((), PeerAddress()).setMaxAccess("readonly"))
flowDataSourcePeerMask = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 10)).setColumnInitializer(MibVariable((), PeerAddress()).setMaxAccess("readonly"))
flowDataSourceTransType = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 11)).setColumnInitializer(MibVariable((), TransportType()).setMaxAccess("readonly"))
flowDataSourceTransAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 12)).setColumnInitializer(MibVariable((), TransportAddress()).setMaxAccess("readonly"))
flowDataSourceTransMask = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 13)).setColumnInitializer(MibVariable((), TransportAddress()).setMaxAccess("readonly"))
flowDataDestInterface = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 14)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readonly"))
flowDataDestAdjacentType = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 15)).setColumnInitializer(MibVariable((), AdjacentType()).setMaxAccess("readonly"))
flowDataDestAdjacentAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 16)).setColumnInitializer(MibVariable((), AdjacentAddress()).setMaxAccess("readonly"))
flowDataDestAdjacentMask = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 17)).setColumnInitializer(MibVariable((), AdjacentAddress()).setMaxAccess("readonly"))
flowDataDestPeerType = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 18)).setColumnInitializer(MibVariable((), PeerType()).setMaxAccess("readonly"))
flowDataDestPeerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 19)).setColumnInitializer(MibVariable((), PeerAddress()).setMaxAccess("readonly"))
flowDataDestPeerMask = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 20)).setColumnInitializer(MibVariable((), PeerAddress()).setMaxAccess("readonly"))
flowDataDestTransType = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 21)).setColumnInitializer(MibVariable((), TransportType()).setMaxAccess("readonly"))
flowDataDestTransAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 22)).setColumnInitializer(MibVariable((), TransportAddress()).setMaxAccess("readonly"))
flowDataDestTransMask = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 23)).setColumnInitializer(MibVariable((), TransportAddress()).setMaxAccess("readonly"))
flowDataPDUScale = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 24)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess("readonly"))
flowDataOctetScale = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 25)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess("readonly"))
flowDataRuleSet = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 26)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 255))).setMaxAccess("noaccess"))
flowDataToOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 27)).setColumnInitializer(MibVariable((), Counter64()).setMaxAccess("readonly"))
flowDataToPDUs = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 28)).setColumnInitializer(MibVariable((), Counter64()).setMaxAccess("readonly"))
flowDataFromOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 29)).setColumnInitializer(MibVariable((), Counter64()).setMaxAccess("readonly"))
flowDataFromPDUs = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 30)).setColumnInitializer(MibVariable((), Counter64()).setMaxAccess("readonly"))
flowDataFirstTime = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 31)).setColumnInitializer(MibVariable((), TimeStamp()).setMaxAccess("readonly"))
flowDataLastActiveTime = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 32)).setColumnInitializer(MibVariable((), TimeStamp()).setMaxAccess("readonly"))
flowDataSourceSubscriberID = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 33)).setColumnInitializer(MibVariable((), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(4, 20))).setMaxAccess("readonly"))
flowDataDestSubscriberID = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 34)).setColumnInitializer(MibVariable((), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(4, 20))).setMaxAccess("readonly"))
flowDataSessionID = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 35)).setColumnInitializer(MibVariable((), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(4, 10))).setMaxAccess("readonly"))
flowDataSourceClass = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 36)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 255))).setMaxAccess("readonly"))
flowDataDestClass = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 37)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 255))).setMaxAccess("readonly"))
flowDataClass = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 38)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 255))).setMaxAccess("readonly"))
flowDataSourceKind = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 39)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 255))).setMaxAccess("readonly"))
flowDataDestKind = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 40)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 255))).setMaxAccess("readonly"))
flowDataKind = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 1, 1, 41)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 255))).setMaxAccess("readonly"))
flowColumnActivityTable = MibTable((1, 3, 6, 1, 2, 1, 40, 2, 2))
flowColumnActivityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 40, 2, 2, 1)).setIndexNames((0, "FLOW-METER-MIB", "flowColumnActivityAttribute"), (0, "FLOW-METER-MIB", "flowColumnActivityTime"), (0, "FLOW-METER-MIB", "flowColumnActivityIndex"))
flowColumnActivityAttribute = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 2, 1, 1)).setColumnInitializer(MibVariable((), FlowAttributeNumber()).setMaxAccess("readonly"))
flowColumnActivityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 2, 1, 2)).setColumnInitializer(MibVariable((), TimeFilter()).setMaxAccess("readonly"))
flowColumnActivityIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 2, 1, 3)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess("readonly"))
flowColumnActivityData = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 2, 1, 4)).setColumnInitializer(MibVariable((), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(3, 1000))).setMaxAccess("readonly"))
flowDataPackageTable = MibTable((1, 3, 6, 1, 2, 1, 40, 2, 3))
flowDataPackageEntry = MibTableRow((1, 3, 6, 1, 2, 1, 40, 2, 3, 1)).setIndexNames((0, "FLOW-METER-MIB", "flowPackageSelector"), (0, "FLOW-METER-MIB", "flowPackageRuleSet"), (0, "FLOW-METER-MIB", "flowPackageTime"), (0, "FLOW-METER-MIB", "flowPackageIndex"))
flowPackageSelector = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 3, 1, 1)).setColumnInitializer(MibVariable((), OctetString()).setMaxAccess("noaccess"))
flowPackageRuleSet = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 3, 1, 2)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 255))).setMaxAccess("noaccess"))
flowPackageTime = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 3, 1, 3)).setColumnInitializer(MibVariable((), TimeFilter()).setMaxAccess("noaccess"))
flowPackageIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 3, 1, 4)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess("noaccess"))
flowPackageData = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 2, 3, 1, 5)).setColumnInitializer(MibVariable((), OctetString()).setMaxAccess("readonly"))
flowRules = MibIdentifier((1, 3, 6, 1, 2, 1, 40, 3))
flowRuleTable = MibTable((1, 3, 6, 1, 2, 1, 40, 3, 1))
flowRuleEntry = MibTableRow((1, 3, 6, 1, 2, 1, 40, 3, 1, 1)).setIndexNames((0, "FLOW-METER-MIB", "flowRuleSet"), (0, "FLOW-METER-MIB", "flowRuleIndex"))
flowRuleSet = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 3, 1, 1, 1)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess("noaccess"))
flowRuleIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 3, 1, 1, 2)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess("noaccess"))
flowRuleSelector = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 3, 1, 1, 3)).setColumnInitializer(MibVariable((), RuleAttributeNumber()).setMaxAccess("readwrite"))
flowRuleMask = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 3, 1, 1, 4)).setColumnInitializer(MibVariable((), RuleAddress()).setMaxAccess("readwrite"))
flowRuleMatchedValue = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 3, 1, 1, 5)).setColumnInitializer(MibVariable((), RuleAddress()).setMaxAccess("readwrite"))
flowRuleAction = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 3, 1, 1, 6)).setColumnInitializer(MibVariable((), ActionNumber()).setMaxAccess("readwrite"))
flowRuleParameter = MibTableColumn((1, 3, 6, 1, 2, 1, 40, 3, 1, 1, 7)).setColumnInitializer(MibVariable((), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite"))
flowMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 40, 4))
flowMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 40, 4, 1))
flowMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 40, 4, 2))

# Augmentions

# Groups

flowDataScaleGroup2 = ObjectGroup((1, 3, 6, 1, 2, 1, 40, 4, 2, 8)).setObjects(("FLOW-METER-MIB", "flowDataPDUScale"), ("FLOW-METER-MIB", "flowDataOctetScale"), )
flowDataScaleGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 40, 4, 2, 3)).setObjects(("FLOW-METER-MIB", "flowDataPDUScale"), ("FLOW-METER-MIB", "flowDataOctetScale"), ("FLOW-METER-MIB", "flowManagerCounterWrap"), )
flowControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 40, 4, 2, 1)).setObjects(("FLOW-METER-MIB", "flowFloodMark"), ("FLOW-METER-MIB", "flowManagerOwner"), ("FLOW-METER-MIB", "flowActiveFlows"), ("FLOW-METER-MIB", "flowReaderOwner"), ("FLOW-METER-MIB", "flowManagerStatus"), ("FLOW-METER-MIB", "flowManagerCounterWrap"), ("FLOW-METER-MIB", "flowRuleInfoFlowRecords"), ("FLOW-METER-MIB", "flowInactivityTimeout"), ("FLOW-METER-MIB", "flowMaxFlows"), ("FLOW-METER-MIB", "flowFloodMode"), ("FLOW-METER-MIB", "flowManagerTimeStamp"), ("FLOW-METER-MIB", "flowInterfaceSampleRate"), ("FLOW-METER-MIB", "flowManagerRunningStandby"), ("FLOW-METER-MIB", "flowManagerHighWaterMark"), ("FLOW-METER-MIB", "flowRuleInfoTimeStamp"), ("FLOW-METER-MIB", "flowReaderLastTime"), ("FLOW-METER-MIB", "flowRuleInfoName"), ("FLOW-METER-MIB", "flowRuleInfoOwner"), ("FLOW-METER-MIB", "flowReaderTimeout"), ("FLOW-METER-MIB", "flowReaderStatus"), ("FLOW-METER-MIB", "flowReaderRuleSet"), ("FLOW-METER-MIB", "flowReaderPreviousTime"), ("FLOW-METER-MIB", "flowRuleInfoRulesReady"), ("FLOW-METER-MIB", "flowInterfaceLostPackets"), ("FLOW-METER-MIB", "flowManagerCurrentRuleSet"), ("FLOW-METER-MIB", "flowRuleInfoStatus"), ("FLOW-METER-MIB", "flowManagerStandbyRuleSet"), ("FLOW-METER-MIB", "flowRuleInfoSize"), )
flowRuleTableGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 40, 4, 2, 7)).setObjects(("FLOW-METER-MIB", "flowRuleSelector"), ("FLOW-METER-MIB", "flowRuleAction"), ("FLOW-METER-MIB", "flowRuleParameter"), ("FLOW-METER-MIB", "flowRuleMask"), ("FLOW-METER-MIB", "flowRuleMatchedValue"), )
flowDataColumnTableGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 40, 4, 2, 5)).setObjects(("FLOW-METER-MIB", "flowColumnActivityIndex"), ("FLOW-METER-MIB", "flowColumnActivityTime"), ("FLOW-METER-MIB", "flowColumnActivityData"), ("FLOW-METER-MIB", "flowColumnActivityAttribute"), )
flowDataPackageGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 40, 4, 2, 6)).setObjects(("FLOW-METER-MIB", "flowPackageData"), )
flowControlGroup2 = ObjectGroup((1, 3, 6, 1, 2, 1, 40, 4, 2, 9)).setObjects(("FLOW-METER-MIB", "flowFloodMark"), ("FLOW-METER-MIB", "flowManagerOwner"), ("FLOW-METER-MIB", "flowActiveFlows"), ("FLOW-METER-MIB", "flowReaderOwner"), ("FLOW-METER-MIB", "flowManagerStatus"), ("FLOW-METER-MIB", "flowMaxFlows"), ("FLOW-METER-MIB", "flowRuleInfoFlowRecords"), ("FLOW-METER-MIB", "flowInactivityTimeout"), ("FLOW-METER-MIB", "flowFloodMode"), ("FLOW-METER-MIB", "flowManagerTimeStamp"), ("FLOW-METER-MIB", "flowInterfaceSampleRate"), ("FLOW-METER-MIB", "flowManagerRunningStandby"), ("FLOW-METER-MIB", "flowManagerHighWaterMark"), ("FLOW-METER-MIB", "flowRuleInfoTimeStamp"), ("FLOW-METER-MIB", "flowReaderLastTime"), ("FLOW-METER-MIB", "flowRuleInfoName"), ("FLOW-METER-MIB", "flowRuleInfoOwner"), ("FLOW-METER-MIB", "flowReaderTimeout"), ("FLOW-METER-MIB", "flowReaderStatus"), ("FLOW-METER-MIB", "flowReaderRuleSet"), ("FLOW-METER-MIB", "flowReaderPreviousTime"), ("FLOW-METER-MIB", "flowInterfaceLostPackets"), ("FLOW-METER-MIB", "flowManagerCurrentRuleSet"), ("FLOW-METER-MIB", "flowRuleInfoStatus"), ("FLOW-METER-MIB", "flowManagerStandbyRuleSet"), ("FLOW-METER-MIB", "flowRuleInfoSize"), )
flowDataSubscriberGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 40, 4, 2, 4)).setObjects(("FLOW-METER-MIB", "flowDataSourceSubscriberID"), ("FLOW-METER-MIB", "flowDataSessionID"), ("FLOW-METER-MIB", "flowDataDestSubscriberID"), )
flowDataTableGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 40, 4, 2, 2)).setObjects(("FLOW-METER-MIB", "flowDataSourceClass"), ("FLOW-METER-MIB", "flowDataDestTransType"), ("FLOW-METER-MIB", "flowDataSourceTransMask"), ("FLOW-METER-MIB", "flowDataDestAdjacentMask"), ("FLOW-METER-MIB", "flowDataDestKind"), ("FLOW-METER-MIB", "flowDataSourceAdjacentMask"), ("FLOW-METER-MIB", "flowDataSourceAdjacentType"), ("FLOW-METER-MIB", "flowDataDestInterface"), ("FLOW-METER-MIB", "flowDataDestClass"), ("FLOW-METER-MIB", "flowDataSourceInterface"), ("FLOW-METER-MIB", "flowDataStatus"), ("FLOW-METER-MIB", "flowDataDestTransAddress"), ("FLOW-METER-MIB", "flowDataDestPeerMask"), ("FLOW-METER-MIB", "flowDataClass"), ("FLOW-METER-MIB", "flowDataSourcePeerAddress"), ("FLOW-METER-MIB", "flowDataFromOctets"), ("FLOW-METER-MIB", "flowDataFirstTime"), ("FLOW-METER-MIB", "flowDataSourceAdjacentAddress"), ("FLOW-METER-MIB", "flowDataSourceKind"), ("FLOW-METER-MIB", "flowDataToPDUs"), ("FLOW-METER-MIB", "flowDataDestTransMask"), ("FLOW-METER-MIB", "flowDataKind"), ("FLOW-METER-MIB", "flowDataSourcePeerType"), ("FLOW-METER-MIB", "flowDataSourceTransAddress"), ("FLOW-METER-MIB", "flowDataSourcePeerMask"), ("FLOW-METER-MIB", "flowDataSourceTransType"), ("FLOW-METER-MIB", "flowDataDestPeerAddress"), ("FLOW-METER-MIB", "flowDataDestAdjacentType"), ("FLOW-METER-MIB", "flowDataDestPeerType"), ("FLOW-METER-MIB", "flowDataFromPDUs"), ("FLOW-METER-MIB", "flowDataDestAdjacentAddress"), ("FLOW-METER-MIB", "flowDataLastActiveTime"), ("FLOW-METER-MIB", "flowDataToOctets"), )

# Exports

# Types
mibBuilder.exportSymbols("FLOW-METER-MIB", ActionNumber=ActionNumber, AdjacentAddress=AdjacentAddress, AdjacentType=AdjacentType, FlowAttributeNumber=FlowAttributeNumber, PeerAddress=PeerAddress, PeerType=PeerType, RuleAddress=RuleAddress, RuleAttributeNumber=RuleAttributeNumber, TransportAddress=TransportAddress, TransportType=TransportType, UTF8OwnerString=UTF8OwnerString)

# Objects
mibBuilder.exportSymbols("FLOW-METER-MIB", flowMIB=flowMIB, flowControl=flowControl, flowRuleSetInfoTable=flowRuleSetInfoTable, flowRuleSetInfoEntry=flowRuleSetInfoEntry, flowRuleInfoIndex=flowRuleInfoIndex, flowRuleInfoSize=flowRuleInfoSize, flowRuleInfoOwner=flowRuleInfoOwner, flowRuleInfoTimeStamp=flowRuleInfoTimeStamp, flowRuleInfoStatus=flowRuleInfoStatus, flowRuleInfoName=flowRuleInfoName, flowRuleInfoRulesReady=flowRuleInfoRulesReady, flowRuleInfoFlowRecords=flowRuleInfoFlowRecords, flowInterfaceTable=flowInterfaceTable, flowInterfaceEntry=flowInterfaceEntry, flowInterfaceSampleRate=flowInterfaceSampleRate, flowInterfaceLostPackets=flowInterfaceLostPackets, flowReaderInfoTable=flowReaderInfoTable, flowReaderInfoEntry=flowReaderInfoEntry, flowReaderIndex=flowReaderIndex, flowReaderTimeout=flowReaderTimeout, flowReaderOwner=flowReaderOwner, flowReaderLastTime=flowReaderLastTime, flowReaderPreviousTime=flowReaderPreviousTime, flowReaderStatus=flowReaderStatus, flowReaderRuleSet=flowReaderRuleSet, flowManagerInfoTable=flowManagerInfoTable, flowManagerInfoEntry=flowManagerInfoEntry, flowManagerIndex=flowManagerIndex, flowManagerCurrentRuleSet=flowManagerCurrentRuleSet, flowManagerStandbyRuleSet=flowManagerStandbyRuleSet, flowManagerHighWaterMark=flowManagerHighWaterMark, flowManagerCounterWrap=flowManagerCounterWrap, flowManagerOwner=flowManagerOwner, flowManagerTimeStamp=flowManagerTimeStamp, flowManagerStatus=flowManagerStatus, flowManagerRunningStandby=flowManagerRunningStandby, flowFloodMark=flowFloodMark, flowInactivityTimeout=flowInactivityTimeout, flowActiveFlows=flowActiveFlows, flowMaxFlows=flowMaxFlows, flowFloodMode=flowFloodMode, flowData=flowData, flowDataTable=flowDataTable, flowDataEntry=flowDataEntry, flowDataIndex=flowDataIndex, flowDataTimeMark=flowDataTimeMark, flowDataStatus=flowDataStatus, flowDataSourceInterface=flowDataSourceInterface, flowDataSourceAdjacentType=flowDataSourceAdjacentType, flowDataSourceAdjacentAddress=flowDataSourceAdjacentAddress, flowDataSourceAdjacentMask=flowDataSourceAdjacentMask, flowDataSourcePeerType=flowDataSourcePeerType, flowDataSourcePeerAddress=flowDataSourcePeerAddress, flowDataSourcePeerMask=flowDataSourcePeerMask, flowDataSourceTransType=flowDataSourceTransType, flowDataSourceTransAddress=flowDataSourceTransAddress, flowDataSourceTransMask=flowDataSourceTransMask, flowDataDestInterface=flowDataDestInterface, flowDataDestAdjacentType=flowDataDestAdjacentType, flowDataDestAdjacentAddress=flowDataDestAdjacentAddress, flowDataDestAdjacentMask=flowDataDestAdjacentMask, flowDataDestPeerType=flowDataDestPeerType, flowDataDestPeerAddress=flowDataDestPeerAddress, flowDataDestPeerMask=flowDataDestPeerMask, flowDataDestTransType=flowDataDestTransType, flowDataDestTransAddress=flowDataDestTransAddress, flowDataDestTransMask=flowDataDestTransMask, flowDataPDUScale=flowDataPDUScale, flowDataOctetScale=flowDataOctetScale, flowDataRuleSet=flowDataRuleSet, flowDataToOctets=flowDataToOctets, flowDataToPDUs=flowDataToPDUs, flowDataFromOctets=flowDataFromOctets, flowDataFromPDUs=flowDataFromPDUs, flowDataFirstTime=flowDataFirstTime, flowDataLastActiveTime=flowDataLastActiveTime, flowDataSourceSubscriberID=flowDataSourceSubscriberID, flowDataDestSubscriberID=flowDataDestSubscriberID, flowDataSessionID=flowDataSessionID, flowDataSourceClass=flowDataSourceClass, flowDataDestClass=flowDataDestClass, flowDataClass=flowDataClass, flowDataSourceKind=flowDataSourceKind, flowDataDestKind=flowDataDestKind, flowDataKind=flowDataKind, flowColumnActivityTable=flowColumnActivityTable, flowColumnActivityEntry=flowColumnActivityEntry, flowColumnActivityAttribute=flowColumnActivityAttribute, flowColumnActivityTime=flowColumnActivityTime, flowColumnActivityIndex=flowColumnActivityIndex, flowColumnActivityData=flowColumnActivityData, flowDataPackageTable=flowDataPackageTable, flowDataPackageEntry=flowDataPackageEntry, flowPackageSelector=flowPackageSelector, flowPackageRuleSet=flowPackageRuleSet, flowPackageTime=flowPackageTime, flowPackageIndex=flowPackageIndex, flowPackageData=flowPackageData, flowRules=flowRules, flowRuleTable=flowRuleTable, flowRuleEntry=flowRuleEntry, flowRuleSet=flowRuleSet, flowRuleIndex=flowRuleIndex, flowRuleSelector=flowRuleSelector, flowRuleMask=flowRuleMask, flowRuleMatchedValue=flowRuleMatchedValue, flowRuleAction=flowRuleAction, flowRuleParameter=flowRuleParameter, flowMIBConformance=flowMIBConformance, flowMIBCompliances=flowMIBCompliances, flowMIBGroups=flowMIBGroups)

# Groups
mibBuilder.exportSymbols("FLOW-METER-MIB", flowDataScaleGroup2=flowDataScaleGroup2, flowDataScaleGroup=flowDataScaleGroup, flowControlGroup=flowControlGroup, flowRuleTableGroup=flowRuleTableGroup, flowDataColumnTableGroup=flowDataColumnTableGroup, flowDataPackageGroup=flowDataPackageGroup, flowControlGroup2=flowControlGroup2, flowDataSubscriberGroup=flowDataSubscriberGroup, flowDataTableGroup=flowDataTableGroup)
