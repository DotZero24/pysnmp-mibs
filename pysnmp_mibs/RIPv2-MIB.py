# PySNMP SMI module. Autogenerated from smidump -f python RIPv2-MIB
# by libsmi2pysnmp-0.0.3-alpha at Wed Nov 10 12:10:33 2004,
# Python version (2, 2, 1, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pysnmp.asn1 import subtypes

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( mib_2, ) = mibBuilder.importSymbols("RFC1213-MIB", "mib-2")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibVariable, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibVariable", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks")
( RowStatus, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention")

# Types

class RouteTag(OctetString):
    subtypeConstraints = OctetString.subtypeConstraints + ( subtypes.ValueRangeConstraint(2, 2), )
    pass


# Objects

rip2 = ModuleIdentity((1, 3, 6, 1, 2, 1, 23))
rip2Globals = MibIdentifier((1, 3, 6, 1, 2, 1, 23, 1))
rip2GlobalRouteChanges = MibVariable((1, 3, 6, 1, 2, 1, 23, 1, 1), Counter32()).setMaxAccess("readonly")
rip2GlobalQueries = MibVariable((1, 3, 6, 1, 2, 1, 23, 1, 2), Counter32()).setMaxAccess("readonly")
rip2IfStatTable = MibTable((1, 3, 6, 1, 2, 1, 23, 2))
rip2IfStatEntry = MibTableRow((1, 3, 6, 1, 2, 1, 23, 2, 1)).setIndexNames((0, "RIPv2-MIB", "rip2IfStatAddress"))
rip2IfStatAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 2, 1, 1)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("readonly"))
rip2IfStatRcvBadPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 2, 1, 2)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
rip2IfStatRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 2, 1, 3)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
rip2IfStatSentUpdates = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 2, 1, 4)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
rip2IfStatStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 2, 1, 5)).setColumnInitializer(MibVariable((), RowStatus()).setMaxAccess("readwrite"))
rip2IfConfTable = MibTable((1, 3, 6, 1, 2, 1, 23, 3))
rip2IfConfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 23, 3, 1)).setIndexNames((0, "RIPv2-MIB", "rip2IfConfAddress"))
rip2IfConfAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 1)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("readonly"))
rip2IfConfDomain = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 2)).setColumnInitializer(MibVariable((), RouteTag()).setMaxAccess("readwrite"))
rip2IfConfAuthType = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 3)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(1,2,3,)).addNamedValues(("noAuthentication", 1), ("simplePassword", 2), ("md5", 3), ).set(1)).setMaxAccess("readwrite"))
rip2IfConfAuthKey = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 4)).setColumnInitializer(MibVariable((), OctetString().addConstraints(subtypes.ValueRangeConstraint(0, 16)).set('')).setMaxAccess("readwrite"))
rip2IfConfSend = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 5)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(4,2,5,1,3,6,)).addNamedValues(("doNotSend", 1), ("ripVersion1", 2), ("rip1Compatible", 3), ("ripVersion2", 4), ("ripV1Demand", 5), ("ripV2Demand", 6), ).set(3)).setMaxAccess("readwrite"))
rip2IfConfReceive = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 6)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(2,1,4,3,)).addNamedValues(("rip1", 1), ("rip2", 2), ("rip1OrRip2", 3), ("doNotRecieve", 4), ).set(3)).setMaxAccess("readwrite"))
rip2IfConfDefaultMetric = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 7)).setColumnInitializer(MibVariable((), Integer32().addConstraints(subtypes.ValueRangeConstraint(0, 15))).setMaxAccess("readwrite"))
rip2IfConfStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 8)).setColumnInitializer(MibVariable((), RowStatus()).setMaxAccess("readwrite"))
rip2IfConfSrcAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 9)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("readwrite"))
rip2PeerTable = MibTable((1, 3, 6, 1, 2, 1, 23, 4))
rip2PeerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 23, 4, 1)).setIndexNames((0, "RIPv2-MIB", "rip2PeerAddress"), (0, "RIPv2-MIB", "rip2PeerDomain"))
rip2PeerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 4, 1, 1)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("readonly"))
rip2PeerDomain = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 4, 1, 2)).setColumnInitializer(MibVariable((), RouteTag()).setMaxAccess("readonly"))
rip2PeerLastUpdate = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 4, 1, 3)).setColumnInitializer(MibVariable((), TimeTicks()).setMaxAccess("readonly"))
rip2PeerVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 4, 1, 4)).setColumnInitializer(MibVariable((), Integer32().addConstraints(subtypes.ValueRangeConstraint(0, 255))).setMaxAccess("readonly"))
rip2PeerRcvBadPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 4, 1, 5)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
rip2PeerRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 4, 1, 6)).setColumnInitializer(MibVariable((), Counter32()).setMaxAccess("readonly"))
rip2Conformance = MibIdentifier((1, 3, 6, 1, 2, 1, 23, 5))
rip2Groups = MibIdentifier((1, 3, 6, 1, 2, 1, 23, 5, 1))
rip2Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 23, 5, 2))

# Augmentions

# Groups

rip2IfConfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 23, 5, 1, 3)).setObjects(("RIPv2-MIB", "rip2IfConfSrcAddress"), ("RIPv2-MIB", "rip2IfConfReceive"), ("RIPv2-MIB", "rip2IfConfSend"), ("RIPv2-MIB", "rip2IfConfAddress"), ("RIPv2-MIB", "rip2IfConfAuthKey"), ("RIPv2-MIB", "rip2IfConfAuthType"), ("RIPv2-MIB", "rip2IfConfStatus"), ("RIPv2-MIB", "rip2IfConfDefaultMetric"), )
rip2GlobalGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 23, 5, 1, 1)).setObjects(("RIPv2-MIB", "rip2GlobalRouteChanges"), ("RIPv2-MIB", "rip2GlobalQueries"), )
rip2IfStatGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 23, 5, 1, 2)).setObjects(("RIPv2-MIB", "rip2IfStatRcvBadPackets"), ("RIPv2-MIB", "rip2IfStatStatus"), ("RIPv2-MIB", "rip2IfStatAddress"), ("RIPv2-MIB", "rip2IfStatRcvBadRoutes"), ("RIPv2-MIB", "rip2IfStatSentUpdates"), )
rip2PeerGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 23, 5, 1, 4)).setObjects(("RIPv2-MIB", "rip2PeerAddress"), ("RIPv2-MIB", "rip2PeerVersion"), ("RIPv2-MIB", "rip2PeerRcvBadRoutes"), ("RIPv2-MIB", "rip2PeerLastUpdate"), ("RIPv2-MIB", "rip2PeerRcvBadPackets"), ("RIPv2-MIB", "rip2PeerDomain"), )

# Exports

# Types
mibBuilder.exportSymbols("RIPv2-MIB", RouteTag=RouteTag)

# Objects
mibBuilder.exportSymbols("RIPv2-MIB", rip2=rip2, rip2Globals=rip2Globals, rip2GlobalRouteChanges=rip2GlobalRouteChanges, rip2GlobalQueries=rip2GlobalQueries, rip2IfStatTable=rip2IfStatTable, rip2IfStatEntry=rip2IfStatEntry, rip2IfStatAddress=rip2IfStatAddress, rip2IfStatRcvBadPackets=rip2IfStatRcvBadPackets, rip2IfStatRcvBadRoutes=rip2IfStatRcvBadRoutes, rip2IfStatSentUpdates=rip2IfStatSentUpdates, rip2IfStatStatus=rip2IfStatStatus, rip2IfConfTable=rip2IfConfTable, rip2IfConfEntry=rip2IfConfEntry, rip2IfConfAddress=rip2IfConfAddress, rip2IfConfDomain=rip2IfConfDomain, rip2IfConfAuthType=rip2IfConfAuthType, rip2IfConfAuthKey=rip2IfConfAuthKey, rip2IfConfSend=rip2IfConfSend, rip2IfConfReceive=rip2IfConfReceive, rip2IfConfDefaultMetric=rip2IfConfDefaultMetric, rip2IfConfStatus=rip2IfConfStatus, rip2IfConfSrcAddress=rip2IfConfSrcAddress, rip2PeerTable=rip2PeerTable, rip2PeerEntry=rip2PeerEntry, rip2PeerAddress=rip2PeerAddress, rip2PeerDomain=rip2PeerDomain, rip2PeerLastUpdate=rip2PeerLastUpdate, rip2PeerVersion=rip2PeerVersion, rip2PeerRcvBadPackets=rip2PeerRcvBadPackets, rip2PeerRcvBadRoutes=rip2PeerRcvBadRoutes, rip2Conformance=rip2Conformance, rip2Groups=rip2Groups, rip2Compliances=rip2Compliances)

# Groups
mibBuilder.exportSymbols("RIPv2-MIB", rip2IfConfGroup=rip2IfConfGroup, rip2GlobalGroup=rip2GlobalGroup, rip2IfStatGroup=rip2IfStatGroup, rip2PeerGroup=rip2PeerGroup)
