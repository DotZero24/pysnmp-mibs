# PySNMP SMI module. Autogenerated from smidump -f python ISDN-MIB
# by libsmi2pysnmp-0.0.5-alpha at Fri Oct 28 00:30:43 2005,
# Python version (2, 4, 0, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( IANAifType, ) = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
( InterfaceIndex, ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
( transmission, ) = mibBuilder.importSymbols("RFC1213-MIB", "transmission")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, RowStatus, TextualConvention, TestAndIncr, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TestAndIncr", "TimeStamp", "TruthValue")

# Types

class IsdnSignalingProtocol(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(25,6,5,17,16,7,15,14,13,12,10,11,9,20,22,21,19,1,2,24,3,8,4,23,18,)
    namedValues = namedval.NamedValues(("other", 1), ("ni2", 10), ("ni3", 11), ("vn2", 12), ("vn3", 13), ("vn4", 14), ("vn6", 15), ("kdd", 16), ("ins64", 17), ("ins1500", 18), ("itr6", 19), ("dss1", 2), ("cornet", 20), ("ts013", 21), ("ts014", 22), ("qsig", 23), ("swissnet2", 24), ("swissnet3", 25), ("etsi", 3), ("dass2", 4), ("ess4", 5), ("ess5", 6), ("dms100", 7), ("dms250", 8), ("ni1", 9), )
    pass


# Objects

isdnMib = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 20))
isdnMibObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 20, 1))
isdnBasicRateGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 20, 1, 1))
isdnBasicRateTable = MibTable((1, 3, 6, 1, 2, 1, 10, 20, 1, 1, 1))
isdnBasicRateEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 20, 1, 1, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
isdnBasicRateIfType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 1, 1, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(75,76,)).subtype(namedValues=namedval.NamedValues(("isdns", 75), ("isdnu", 76), ))).setMaxAccess("readwrite")
isdnBasicRateLineTopology = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 1, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(("pointToPoint", 1), ("pointToMultipoint", 2), ))).setMaxAccess("readwrite")
isdnBasicRateIfMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 1, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("te", 1), ("nt", 2), ))).setMaxAccess("readwrite")
isdnBasicRateSignalMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 1, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("active", 1), ("inactive", 2), ))).setMaxAccess("readwrite")
isdnBearerGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 20, 1, 2))
isdnBearerTable = MibTable((1, 3, 6, 1, 2, 1, 10, 20, 1, 2, 1))
isdnBearerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 20, 1, 2, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
isdnBearerChannelType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 2, 1, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("dialup", 1), ("leased", 2), ))).setMaxAccess("readwrite")
isdnBearerOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 2, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(("idle", 1), ("connecting", 2), ("connected", 3), ("active", 4), ))).setMaxAccess("readonly")
isdnBearerChannelNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
isdnBearerPeerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
isdnBearerPeerSubAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
isdnBearerCallOrigin = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 2, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,4,)).subtype(namedValues=namedval.NamedValues(("unknown", 1), ("originate", 2), ("answer", 3), ("callback", 4), ))).setMaxAccess("readonly")
isdnBearerInfoType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 2, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,4,1,7,5,6,2,9,8,)).subtype(namedValues=namedval.NamedValues(("unknown", 1), ("speech", 2), ("unrestrictedDigital", 3), ("unrestrictedDigital56", 4), ("restrictedDigital", 5), ("audio31", 6), ("audio7", 7), ("video", 8), ("packetSwitched", 9), ))).setMaxAccess("readonly")
isdnBearerMultirate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 2, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
isdnBearerCallSetupTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 2, 1, 1, 9), TimeStamp()).setMaxAccess("readonly")
isdnBearerCallConnectTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 2, 1, 1, 10), TimeStamp()).setMaxAccess("readonly")
isdnBearerChargedUnits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
isdnSignalingGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 20, 1, 3))
isdnSignalingGetIndex = MibScalar((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 1), TestAndIncr()).setMaxAccess("readwrite")
isdnSignalingTable = MibTable((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 2))
isdnSignalingEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 2, 1)).setIndexNames((0, "ISDN-MIB", "isdnSignalingIndex"))
isdnSignalingIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess("noaccess")
isdnSignalingIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
isdnSignalingProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 2, 1, 3), IsdnSignalingProtocol()).setMaxAccess("readwrite")
isdnSignalingCallingAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
isdnSignalingSubAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
isdnSignalingBchannelCount = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
isdnSignalingInfoTrapEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 2, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(("enabled", 1), ("disabled", 2), )).clone(2)).setMaxAccess("readwrite")
isdnSignalingStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 2, 1, 8), RowStatus()).setMaxAccess("readwrite")
isdnSignalingStatsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 3))
isdnSignalingStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 3, 1))
isdnSigStatsInCalls = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 3, 1, 1), Counter32()).setMaxAccess("readonly")
isdnSigStatsInConnected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
isdnSigStatsOutCalls = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
isdnSigStatsOutConnected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
isdnSigStatsChargedUnits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
isdnLapdTable = MibTable((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 4))
isdnLapdEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
isdnLapdPrimaryChannel = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
isdnLapdOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 4, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(("inactive", 1), ("l1Active", 2), ("l2Active", 3), ))).setMaxAccess("readonly")
isdnLapdPeerSabme = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
isdnLapdRecvdFrmr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
isdnEndpointGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 20, 1, 4))
isdnEndpointGetIndex = MibScalar((1, 3, 6, 1, 2, 1, 10, 20, 1, 4, 1), TestAndIncr()).setMaxAccess("readwrite")
isdnEndpointTable = MibTable((1, 3, 6, 1, 2, 1, 10, 20, 1, 4, 2))
isdnEndpointEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 20, 1, 4, 2, 1)).setIndexNames((0, "ISDN-MIB", "isdnEndpointIndex"))
isdnEndpointIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess("noaccess")
isdnEndpointIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 4, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
isdnEndpointIfType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 4, 2, 1, 3), IANAifType()).setMaxAccess("readwrite")
isdnEndpointTeiType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 4, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(("dynamic", 1), ("static", 2), ))).setMaxAccess("readwrite")
isdnEndpointTeiValue = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
isdnEndpointSpid = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 4, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
isdnEndpointStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 4, 2, 1, 7), RowStatus()).setMaxAccess("readwrite")
isdnDirectoryGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 20, 1, 5))
isdnDirectoryTable = MibTable((1, 3, 6, 1, 2, 1, 10, 20, 1, 5, 1))
isdnDirectoryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 20, 1, 5, 1, 1)).setIndexNames((0, "ISDN-MIB", "isdnDirectoryIndex"))
isdnDirectoryIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess("noaccess")
isdnDirectoryNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
isdnDirectorySigIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess("readwrite")
isdnDirectoryStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 20, 1, 5, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
isdnMibTrapPrefix = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 20, 2))
isdnMibTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 20, 2, 0))
isdnMibCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 20, 2, 1))
isdnMibGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 20, 2, 2))

# Augmentions
isdnSignalingEntry.registerAugmentions(("ISDN-MIB", "isdnSignalingStatsEntry"))
apply(isdnSignalingStatsEntry.setIndexNames, isdnSignalingEntry.getIndexNames())

# Notifications

isdnMibCallInformation = NotificationType((1, 3, 6, 1, 2, 1, 10, 20, 2, 0, 1)).setObjects(("ISDN-MIB", "isdnBearerOperStatus"), ("ISDN-MIB", "isdnBearerPeerSubAddress"), ("ISDN-MIB", "isdnBearerCallSetupTime"), ("ISDN-MIB", "isdnBearerCallOrigin"), ("ISDN-MIB", "isdnBearerPeerAddress"), ("IF-MIB", "ifIndex"), ("ISDN-MIB", "isdnBearerInfoType"), )

# Groups

isdnMibSignalingGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 20, 2, 2, 3)).setObjects(("ISDN-MIB", "isdnLapdPeerSabme"), ("ISDN-MIB", "isdnLapdOperStatus"), ("ISDN-MIB", "isdnSignalingCallingAddress"), ("ISDN-MIB", "isdnSigStatsOutCalls"), ("ISDN-MIB", "isdnLapdRecvdFrmr"), ("ISDN-MIB", "isdnLapdPrimaryChannel"), ("ISDN-MIB", "isdnSignalingGetIndex"), ("ISDN-MIB", "isdnSignalingStatus"), ("ISDN-MIB", "isdnSigStatsOutConnected"), ("ISDN-MIB", "isdnSigStatsChargedUnits"), ("ISDN-MIB", "isdnSignalingIfIndex"), ("ISDN-MIB", "isdnSigStatsInConnected"), ("ISDN-MIB", "isdnSigStatsInCalls"), ("ISDN-MIB", "isdnSignalingProtocol"), ("ISDN-MIB", "isdnSignalingBchannelCount"), ("ISDN-MIB", "isdnSignalingInfoTrapEnable"), ("ISDN-MIB", "isdnSignalingSubAddress"), )
isdnMibNotificationsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 20, 2, 2, 6)).setObjects(("ISDN-MIB", "isdnMibCallInformation"), )
isdnMibBasicRateGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 20, 2, 2, 1)).setObjects(("ISDN-MIB", "isdnBasicRateIfType"), ("ISDN-MIB", "isdnBasicRateIfMode"), ("ISDN-MIB", "isdnBasicRateLineTopology"), ("ISDN-MIB", "isdnBasicRateSignalMode"), )
isdnMibDirectoryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 20, 2, 2, 5)).setObjects(("ISDN-MIB", "isdnDirectoryNumber"), ("ISDN-MIB", "isdnDirectoryStatus"), ("ISDN-MIB", "isdnDirectorySigIndex"), )
isdnMibEndpointGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 20, 2, 2, 4)).setObjects(("ISDN-MIB", "isdnEndpointGetIndex"), ("ISDN-MIB", "isdnEndpointIfType"), ("ISDN-MIB", "isdnEndpointSpid"), ("ISDN-MIB", "isdnEndpointTeiType"), ("ISDN-MIB", "isdnEndpointIfIndex"), ("ISDN-MIB", "isdnEndpointTeiValue"), ("ISDN-MIB", "isdnEndpointStatus"), )
isdnMibBearerGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 20, 2, 2, 2)).setObjects(("ISDN-MIB", "isdnBearerOperStatus"), ("ISDN-MIB", "isdnBearerPeerSubAddress"), ("ISDN-MIB", "isdnBearerCallSetupTime"), ("ISDN-MIB", "isdnBearerMultirate"), ("ISDN-MIB", "isdnBearerCallOrigin"), ("ISDN-MIB", "isdnBearerChannelNumber"), ("ISDN-MIB", "isdnBearerChannelType"), ("ISDN-MIB", "isdnBearerPeerAddress"), ("ISDN-MIB", "isdnBearerCallConnectTime"), ("ISDN-MIB", "isdnBearerChargedUnits"), ("ISDN-MIB", "isdnBearerInfoType"), )

# Exports

# Types
mibBuilder.exportSymbols("ISDN-MIB", IsdnSignalingProtocol=IsdnSignalingProtocol)

# Objects
mibBuilder.exportSymbols("ISDN-MIB", isdnMib=isdnMib, isdnMibObjects=isdnMibObjects, isdnBasicRateGroup=isdnBasicRateGroup, isdnBasicRateTable=isdnBasicRateTable, isdnBasicRateEntry=isdnBasicRateEntry, isdnBasicRateIfType=isdnBasicRateIfType, isdnBasicRateLineTopology=isdnBasicRateLineTopology, isdnBasicRateIfMode=isdnBasicRateIfMode, isdnBasicRateSignalMode=isdnBasicRateSignalMode, isdnBearerGroup=isdnBearerGroup, isdnBearerTable=isdnBearerTable, isdnBearerEntry=isdnBearerEntry, isdnBearerChannelType=isdnBearerChannelType, isdnBearerOperStatus=isdnBearerOperStatus, isdnBearerChannelNumber=isdnBearerChannelNumber, isdnBearerPeerAddress=isdnBearerPeerAddress, isdnBearerPeerSubAddress=isdnBearerPeerSubAddress, isdnBearerCallOrigin=isdnBearerCallOrigin, isdnBearerInfoType=isdnBearerInfoType, isdnBearerMultirate=isdnBearerMultirate, isdnBearerCallSetupTime=isdnBearerCallSetupTime, isdnBearerCallConnectTime=isdnBearerCallConnectTime, isdnBearerChargedUnits=isdnBearerChargedUnits, isdnSignalingGroup=isdnSignalingGroup, isdnSignalingGetIndex=isdnSignalingGetIndex, isdnSignalingTable=isdnSignalingTable, isdnSignalingEntry=isdnSignalingEntry, isdnSignalingIndex=isdnSignalingIndex, isdnSignalingIfIndex=isdnSignalingIfIndex, isdnSignalingProtocol=isdnSignalingProtocol, isdnSignalingCallingAddress=isdnSignalingCallingAddress, isdnSignalingSubAddress=isdnSignalingSubAddress, isdnSignalingBchannelCount=isdnSignalingBchannelCount, isdnSignalingInfoTrapEnable=isdnSignalingInfoTrapEnable, isdnSignalingStatus=isdnSignalingStatus, isdnSignalingStatsTable=isdnSignalingStatsTable, isdnSignalingStatsEntry=isdnSignalingStatsEntry, isdnSigStatsInCalls=isdnSigStatsInCalls, isdnSigStatsInConnected=isdnSigStatsInConnected, isdnSigStatsOutCalls=isdnSigStatsOutCalls, isdnSigStatsOutConnected=isdnSigStatsOutConnected, isdnSigStatsChargedUnits=isdnSigStatsChargedUnits, isdnLapdTable=isdnLapdTable, isdnLapdEntry=isdnLapdEntry, isdnLapdPrimaryChannel=isdnLapdPrimaryChannel, isdnLapdOperStatus=isdnLapdOperStatus, isdnLapdPeerSabme=isdnLapdPeerSabme, isdnLapdRecvdFrmr=isdnLapdRecvdFrmr, isdnEndpointGroup=isdnEndpointGroup, isdnEndpointGetIndex=isdnEndpointGetIndex, isdnEndpointTable=isdnEndpointTable, isdnEndpointEntry=isdnEndpointEntry, isdnEndpointIndex=isdnEndpointIndex, isdnEndpointIfIndex=isdnEndpointIfIndex, isdnEndpointIfType=isdnEndpointIfType, isdnEndpointTeiType=isdnEndpointTeiType, isdnEndpointTeiValue=isdnEndpointTeiValue, isdnEndpointSpid=isdnEndpointSpid, isdnEndpointStatus=isdnEndpointStatus, isdnDirectoryGroup=isdnDirectoryGroup, isdnDirectoryTable=isdnDirectoryTable, isdnDirectoryEntry=isdnDirectoryEntry, isdnDirectoryIndex=isdnDirectoryIndex, isdnDirectoryNumber=isdnDirectoryNumber, isdnDirectorySigIndex=isdnDirectorySigIndex, isdnDirectoryStatus=isdnDirectoryStatus, isdnMibTrapPrefix=isdnMibTrapPrefix, isdnMibTraps=isdnMibTraps, isdnMibCompliances=isdnMibCompliances, isdnMibGroups=isdnMibGroups)

# Notifications
mibBuilder.exportSymbols("ISDN-MIB", isdnMibCallInformation=isdnMibCallInformation)

# Groups
mibBuilder.exportSymbols("ISDN-MIB", isdnMibSignalingGroup=isdnMibSignalingGroup, isdnMibNotificationsGroup=isdnMibNotificationsGroup, isdnMibBasicRateGroup=isdnMibBasicRateGroup, isdnMibDirectoryGroup=isdnMibDirectoryGroup, isdnMibEndpointGroup=isdnMibEndpointGroup, isdnMibBearerGroup=isdnMibBearerGroup)
