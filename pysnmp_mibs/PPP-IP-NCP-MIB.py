# PySNMP SMI module. Autogenerated from smidump -f python PPP-IP-NCP-MIB
# by libsmi2pysnmp-0.0.3-alpha at Wed Nov 10 12:10:29 2004,
# Python version (2, 2, 1, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pysnmp.asn1 import subtypes

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( ppp, ) = mibBuilder.importSymbols("PPP-LCP-MIB", "ppp")
( MibVariable, MibTable, MibTableRow, MibTableColumn, ) = mibBuilder.importSymbols("RFC-1212", "MibVariable", "MibTable", "MibTableRow", "MibTableColumn")
( Counter, ) = mibBuilder.importSymbols("RFC1155-SMI", "Counter")
( ifIndex, ) = mibBuilder.importSymbols("RFC1213-MIB", "ifIndex")
( Bits, Integer32, MibIdentifier, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "MibIdentifier", "TimeTicks")

# Objects

pppIp = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 3))
pppIpTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 3, 1))
pppIpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1)).setIndexNames((0, "RFC1213-MIB", "ifIndex"))
pppIpOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 1)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(2,1,)).addNamedValues(("opened", 1), ("not-opened", 2), )).setMaxAccess("readonly"))
pppIpLocalToRemoteCompressionProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 2)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(2,1,)).addNamedValues(("none", 1), ("vj-tcp", 2), )).setMaxAccess("readonly"))
pppIpRemoteToLocalCompressionProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 3)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(2,1,)).addNamedValues(("none", 1), ("vj-tcp", 2), )).setMaxAccess("readonly"))
pppIpRemoteMaxSlotId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 4)).setColumnInitializer(MibVariable((), Integer32().addConstraints(subtypes.ValueRangeConstraint(0, 255))).setMaxAccess("readonly"))
pppIpLocalMaxSlotId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 5)).setColumnInitializer(MibVariable((), Integer32().addConstraints(subtypes.ValueRangeConstraint(0, 255))).setMaxAccess("readonly"))
pppIpConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 3, 2))
pppIpConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 3, 2, 1)).setIndexNames((0, "RFC1213-MIB", "ifIndex"))
pppIpConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 2, 1, 1)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(2,1,)).addNamedValues(("open", 1), ("close", 2), )).setMaxAccess("readwrite"))
pppIpConfigCompression = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 2, 1, 2)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(2,1,)).addNamedValues(("none", 1), ("vj-tcp", 2), ).set(1)).setMaxAccess("readwrite"))

# Augmentions

# Exports

# Objects
mibBuilder.exportSymbols("PPP-IP-NCP-MIB", pppIp=pppIp, pppIpTable=pppIpTable, pppIpEntry=pppIpEntry, pppIpOperStatus=pppIpOperStatus, pppIpLocalToRemoteCompressionProtocol=pppIpLocalToRemoteCompressionProtocol, pppIpRemoteToLocalCompressionProtocol=pppIpRemoteToLocalCompressionProtocol, pppIpRemoteMaxSlotId=pppIpRemoteMaxSlotId, pppIpLocalMaxSlotId=pppIpLocalMaxSlotId, pppIpConfigTable=pppIpConfigTable, pppIpConfigEntry=pppIpConfigEntry, pppIpConfigAdminStatus=pppIpConfigAdminStatus, pppIpConfigCompression=pppIpConfigCompression)

