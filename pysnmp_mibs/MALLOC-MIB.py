# PySNMP SMI module. Autogenerated from smidump -f python MALLOC-MIB
# by libsmi2pysnmp-0.0.3-alpha at Wed Nov 10 12:10:24 2004,
# Python version (2, 2, 1, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pysnmp.asn1 import subtypes

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( IANAmallocRangeSource, IANAscopeSource, ) = mibBuilder.importSymbols("IANA-MALLOC-MIB", "IANAmallocRangeSource", "IANAscopeSource")
( InetAddress, InetAddressType, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
( LanguageTag, ) = mibBuilder.importSymbols("IPMROUTE-STD-MIB", "LanguageTag")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Gauge32, Integer32, ModuleIdentity, MibIdentifier, ObjectIdentity, MibVariable, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "MibVariable", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "mib-2")
( RowStatus, StorageType, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "StorageType", "TruthValue")

# Objects

mallocMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 101))
mallocMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 101, 1))
malloc = MibIdentifier((1, 3, 6, 1, 2, 1, 101, 1, 1))
mallocCapabilities = MibVariable((1, 3, 6, 1, 2, 1, 101, 1, 1, 1), Bits().addNamedValues(("startTime", 0), ("serverMobility", 1), ("retryAfter", 2), )).setMaxAccess("readonly")
mallocScopeTable = MibTable((1, 3, 6, 1, 2, 1, 101, 1, 1, 2))
mallocScopeEntry = MibTableRow((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1)).setIndexNames((0, "MALLOC-MIB", "mallocScopeAddressType"), (0, "MALLOC-MIB", "mallocScopeFirstAddress"))
mallocScopeAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 1)).setColumnInitializer(MibVariable((), InetAddressType()).setMaxAccess("noaccess"))
mallocScopeFirstAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 2)).setColumnInitializer(MibVariable((), InetAddress().addConstraints(subtypes.ValueRangeConstraint(0, 20))).setMaxAccess("noaccess"))
mallocScopeLastAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 3)).setColumnInitializer(MibVariable((), InetAddress().addConstraints(subtypes.ValueRangeConstraint(0, 20))).setMaxAccess("readwrite"))
mallocScopeHopLimit = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 4)).setColumnInitializer(MibVariable((), Unsigned32().addConstraints(subtypes.ValueRangeConstraint(0, 255))).setMaxAccess("readwrite"))
mallocScopeStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 5)).setColumnInitializer(MibVariable((), RowStatus()).setMaxAccess("readwrite"))
mallocScopeSource = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 6)).setColumnInitializer(MibVariable((), IANAscopeSource()).setMaxAccess("readonly"))
mallocScopeDivisible = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 7)).setColumnInitializer(MibVariable((), TruthValue()).setMaxAccess("readwrite"))
mallocScopeServerAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 8)).setColumnInitializer(MibVariable((), InetAddressType()).setMaxAccess("readwrite"))
mallocScopeServerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 9)).setColumnInitializer(MibVariable((), InetAddress()).setMaxAccess("readwrite"))
mallocScopeSSM = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 10)).setColumnInitializer(MibVariable((), TruthValue()).setMaxAccess("readwrite"))
mallocScopeStorage = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 11)).setColumnInitializer(MibVariable((), StorageType()).setMaxAccess("readwrite"))
mallocScopeNameTable = MibTable((1, 3, 6, 1, 2, 1, 101, 1, 1, 3))
mallocScopeNameEntry = MibTableRow((1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1)).setIndexNames((0, "MALLOC-MIB", "mallocScopeAddressType"), (0, "MALLOC-MIB", "mallocScopeFirstAddress"), (0, "MALLOC-MIB", "mallocScopeNameLangName"))
mallocScopeNameLangName = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1, 1)).setColumnInitializer(MibVariable((), LanguageTag().addConstraints(subtypes.ValueRangeConstraint(1, 94))).setMaxAccess("noaccess"))
mallocScopeNameScopeName = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1, 2)).setColumnInitializer(MibVariable((), SnmpAdminString()).setMaxAccess("readwrite"))
mallocScopeNameDefault = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1, 3)).setColumnInitializer(MibVariable((), TruthValue()).setMaxAccess("readwrite"))
mallocScopeNameStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1, 4)).setColumnInitializer(MibVariable((), RowStatus()).setMaxAccess("readwrite"))
mallocScopeNameStorage = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1, 5)).setColumnInitializer(MibVariable((), StorageType()).setMaxAccess("readwrite"))
mallocAllocRangeTable = MibTable((1, 3, 6, 1, 2, 1, 101, 1, 1, 4))
mallocAllocRangeEntry = MibTableRow((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1)).setIndexNames((0, "MALLOC-MIB", "mallocScopeAddressType"), (0, "MALLOC-MIB", "mallocScopeFirstAddress"), (0, "MALLOC-MIB", "mallocAllocRangeFirstAddress"))
mallocAllocRangeFirstAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 1)).setColumnInitializer(MibVariable((), InetAddress().addConstraints(subtypes.ValueRangeConstraint(0, 20))).setMaxAccess("noaccess"))
mallocAllocRangeLastAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 2)).setColumnInitializer(MibVariable((), InetAddress().addConstraints(subtypes.ValueRangeConstraint(0, 20))).setMaxAccess("readwrite"))
mallocAllocRangeStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 3)).setColumnInitializer(MibVariable((), RowStatus()).setMaxAccess("readwrite"))
mallocAllocRangeSource = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 4)).setColumnInitializer(MibVariable((), IANAmallocRangeSource()).setMaxAccess("readonly"))
mallocAllocRangeLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 5)).setColumnInitializer(MibVariable((), Unsigned32()).setMaxAccess("readwrite"))
mallocAllocRangeMaxLeaseAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 6)).setColumnInitializer(MibVariable((), Unsigned32()).setMaxAccess("readwrite"))
mallocAllocRangeMaxLeaseTime = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 7)).setColumnInitializer(MibVariable((), Unsigned32()).setMaxAccess("readwrite"))
mallocAllocRangeNumAllocatedAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 8)).setColumnInitializer(MibVariable((), Gauge32()).setMaxAccess("readonly"))
mallocAllocRangeNumOfferedAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 9)).setColumnInitializer(MibVariable((), Gauge32()).setMaxAccess("readonly"))
mallocAllocRangeNumWaitingAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 10)).setColumnInitializer(MibVariable((), Gauge32()).setMaxAccess("readonly"))
mallocAllocRangeNumTryingAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 11)).setColumnInitializer(MibVariable((), Gauge32()).setMaxAccess("readonly"))
mallocAllocRangeAdvertisable = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 12)).setColumnInitializer(MibVariable((), TruthValue()).setMaxAccess("readwrite"))
mallocAllocRangeTotalAllocatedAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 13)).setColumnInitializer(MibVariable((), Gauge32()).setMaxAccess("readonly"))
mallocAllocRangeTotalRequestedAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 14)).setColumnInitializer(MibVariable((), Gauge32()).setMaxAccess("readonly"))
mallocAllocRangeStorage = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 15)).setColumnInitializer(MibVariable((), StorageType()).setMaxAccess("readwrite"))
mallocRequestTable = MibTable((1, 3, 6, 1, 2, 1, 101, 1, 1, 5))
mallocRequestEntry = MibTableRow((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1)).setIndexNames((0, "MALLOC-MIB", "mallocRequestId"))
mallocRequestId = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 1)).setColumnInitializer(MibVariable((), Unsigned32().addConstraints(subtypes.ValueRangeConstraint(1, 4294967295L))).setMaxAccess("noaccess"))
mallocRequestScopeAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 2)).setColumnInitializer(MibVariable((), InetAddressType()).setMaxAccess("readonly"))
mallocRequestScopeFirstAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 3)).setColumnInitializer(MibVariable((), InetAddress()).setMaxAccess("readonly"))
mallocRequestStartTime = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 4)).setColumnInitializer(MibVariable((), Unsigned32()).setMaxAccess("readonly"))
mallocRequestEndTime = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 5)).setColumnInitializer(MibVariable((), Unsigned32()).setMaxAccess("readonly"))
mallocRequestNumAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 6)).setColumnInitializer(MibVariable((), Unsigned32()).setMaxAccess("readonly"))
mallocRequestState = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 7)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(3,1,4,2,)).addNamedValues(("allocated", 1), ("offered", 2), ("waiting", 3), ("trying", 4), )).setMaxAccess("readonly"))
mallocRequestClientAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 8)).setColumnInitializer(MibVariable((), InetAddressType()).setMaxAccess("readonly"))
mallocRequestClientAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 9)).setColumnInitializer(MibVariable((), InetAddress()).setMaxAccess("readonly"))
mallocRequestServerAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 10)).setColumnInitializer(MibVariable((), InetAddressType()).setMaxAccess("readonly"))
mallocRequestServerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 11)).setColumnInitializer(MibVariable((), InetAddress()).setMaxAccess("readonly"))
mallocRequestLeaseIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 12)).setColumnInitializer(MibVariable((), OctetString().addConstraints(subtypes.ValueRangeConstraint(0, 255))).setMaxAccess("readonly"))
mallocAddressTable = MibTable((1, 3, 6, 1, 2, 1, 101, 1, 1, 6))
mallocAddressEntry = MibTableRow((1, 3, 6, 1, 2, 1, 101, 1, 1, 6, 1)).setIndexNames((0, "MALLOC-MIB", "mallocAddressAddressType"), (0, "MALLOC-MIB", "mallocAddressFirstAddress"))
mallocAddressAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 6, 1, 1)).setColumnInitializer(MibVariable((), InetAddressType()).setMaxAccess("noaccess"))
mallocAddressFirstAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 6, 1, 2)).setColumnInitializer(MibVariable((), InetAddress().addConstraints(subtypes.ValueRangeConstraint(0, 20))).setMaxAccess("noaccess"))
mallocAddressNumAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 6, 1, 3)).setColumnInitializer(MibVariable((), Unsigned32()).setMaxAccess("readonly"))
mallocAddressRequestId = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 6, 1, 4)).setColumnInitializer(MibVariable((), Unsigned32()).setMaxAccess("readonly"))
madcap = MibIdentifier((1, 3, 6, 1, 2, 1, 101, 1, 2))
madcapConfig = MibIdentifier((1, 3, 6, 1, 2, 1, 101, 1, 2, 1))
madcapConfigExtraAllocationTime = MibVariable((1, 3, 6, 1, 2, 1, 101, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readwrite").setUnits("seconds")
madcapConfigNoResponseDelay = MibVariable((1, 3, 6, 1, 2, 1, 101, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readwrite").setUnits("seconds")
madcapConfigOfferHold = MibVariable((1, 3, 6, 1, 2, 1, 101, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite").setUnits("seconds")
madcapConfigResponseCacheInterval = MibVariable((1, 3, 6, 1, 2, 1, 101, 1, 2, 1, 4), Unsigned32().addConstraints(subtypes.ValueRangeConstraint(0, 300))).setMaxAccess("readwrite").setUnits("seconds")
madcapConfigClockSkewAllowance = MibVariable((1, 3, 6, 1, 2, 1, 101, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite").setUnits("seconds")
madcapCounters = MibIdentifier((1, 3, 6, 1, 2, 1, 101, 1, 2, 2))
madcapTotalErrors = MibVariable((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
madcapRequestsDenied = MibVariable((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
madcapInvalidRequests = MibVariable((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 3), Counter32()).setMaxAccess("readonly")
madcapExcessiveClockSkews = MibVariable((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 4), Counter32()).setMaxAccess("readonly")
madcapBadLeaseIds = MibVariable((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
madcapDiscovers = MibVariable((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
madcapInforms = MibVariable((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
madcapRequests = MibVariable((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
madcapRenews = MibVariable((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 9), Counter32()).setMaxAccess("readonly")
madcapReleases = MibVariable((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 10), Counter32()).setMaxAccess("readonly")
mallocConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 101, 2))
mallocCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 101, 2, 1))
mallocGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 101, 2, 2))

# Augmentions

# Groups

mallocServerGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 101, 2, 2, 2)).setObjects(("MALLOC-MIB", "mallocAllocRangeMaxLeaseTime"), ("MALLOC-MIB", "mallocAllocRangeLastAddress"), ("MALLOC-MIB", "mallocAllocRangeStatus"), ("MALLOC-MIB", "mallocScopeStorage"), ("MALLOC-MIB", "mallocRequestClientAddressType"), ("MALLOC-MIB", "mallocAllocRangeStorage"), ("MALLOC-MIB", "mallocRequestClientAddress"), ("MALLOC-MIB", "mallocAllocRangeMaxLeaseAddrs"), ("MALLOC-MIB", "mallocScopeLastAddress"), ("MALLOC-MIB", "mallocScopeNameScopeName"), ("MALLOC-MIB", "mallocAllocRangeSource"), ("MALLOC-MIB", "mallocScopeStatus"), ("MALLOC-MIB", "mallocAllocRangeNumOfferedAddrs"), ("MALLOC-MIB", "mallocAllocRangeLifetime"), ("MALLOC-MIB", "mallocScopeNameStatus"), ("MALLOC-MIB", "mallocAllocRangeNumTryingAddrs"), ("MALLOC-MIB", "mallocScopeDivisible"), ("MALLOC-MIB", "mallocAllocRangeNumAllocatedAddrs"), ("MALLOC-MIB", "mallocScopeNameDefault"), ("MALLOC-MIB", "mallocScopeSource"), ("MALLOC-MIB", "mallocAllocRangeNumWaitingAddrs"), ("MALLOC-MIB", "mallocScopeHopLimit"), ("MALLOC-MIB", "mallocScopeNameStorage"), ("MALLOC-MIB", "mallocScopeSSM"), )
madcapServerGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 101, 2, 2, 4)).setObjects(("MALLOC-MIB", "madcapTotalErrors"), ("MALLOC-MIB", "madcapRenews"), ("MALLOC-MIB", "madcapConfigOfferHold"), ("MALLOC-MIB", "madcapInforms"), ("MALLOC-MIB", "madcapInvalidRequests"), ("MALLOC-MIB", "madcapDiscovers"), ("MALLOC-MIB", "madcapConfigExtraAllocationTime"), ("MALLOC-MIB", "madcapExcessiveClockSkews"), ("MALLOC-MIB", "madcapConfigClockSkewAllowance"), ("MALLOC-MIB", "madcapRequestsDenied"), ("MALLOC-MIB", "madcapRequests"), ("MALLOC-MIB", "madcapReleases"), ("MALLOC-MIB", "madcapConfigResponseCacheInterval"), ("MALLOC-MIB", "madcapBadLeaseIds"), )
mallocClientGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 101, 2, 2, 3)).setObjects(("MALLOC-MIB", "mallocRequestServerAddressType"), ("MALLOC-MIB", "mallocRequestServerAddress"), )
madcapClientGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 101, 2, 2, 5)).setObjects(("MALLOC-MIB", "mallocRequestLeaseIdentifier"), ("MALLOC-MIB", "madcapConfigNoResponseDelay"), )
mallocPrefixCoordinatorGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 101, 2, 2, 7)).setObjects(("MALLOC-MIB", "mallocAllocRangeAdvertisable"), ("MALLOC-MIB", "mallocAllocRangeLastAddress"), ("MALLOC-MIB", "mallocAllocRangeStatus"), ("MALLOC-MIB", "mallocAllocRangeSource"), ("MALLOC-MIB", "mallocAllocRangeLifetime"), ("MALLOC-MIB", "mallocScopeDivisible"), ("MALLOC-MIB", "mallocScopeLastAddress"), ("MALLOC-MIB", "mallocAllocRangeStorage"), ("MALLOC-MIB", "mallocAllocRangeTotalAllocatedAddrs"), ("MALLOC-MIB", "mallocAllocRangeTotalRequestedAddrs"), ("MALLOC-MIB", "mallocScopeSource"), )
mallocClientScopeGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 101, 2, 2, 6)).setObjects(("MALLOC-MIB", "mallocScopeStorage"), ("MALLOC-MIB", "mallocScopeHopLimit"), ("MALLOC-MIB", "mallocScopeNameStatus"), ("MALLOC-MIB", "mallocScopeLastAddress"), ("MALLOC-MIB", "mallocScopeNameDefault"), ("MALLOC-MIB", "mallocScopeServerAddress"), ("MALLOC-MIB", "mallocScopeNameStorage"), ("MALLOC-MIB", "mallocScopeSSM"), ("MALLOC-MIB", "mallocScopeNameScopeName"), ("MALLOC-MIB", "mallocScopeServerAddressType"), ("MALLOC-MIB", "mallocScopeSource"), ("MALLOC-MIB", "mallocScopeStatus"), )
mallocBasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 101, 2, 2, 1)).setObjects(("MALLOC-MIB", "mallocRequestState"), ("MALLOC-MIB", "mallocRequestScopeFirstAddress"), ("MALLOC-MIB", "mallocAddressRequestId"), ("MALLOC-MIB", "mallocRequestScopeAddressType"), ("MALLOC-MIB", "mallocAddressNumAddrs"), ("MALLOC-MIB", "mallocRequestStartTime"), ("MALLOC-MIB", "mallocRequestNumAddrs"), ("MALLOC-MIB", "mallocCapabilities"), ("MALLOC-MIB", "mallocRequestEndTime"), )

# Exports

# Objects
mibBuilder.exportSymbols("MALLOC-MIB", mallocMIB=mallocMIB, mallocMIBObjects=mallocMIBObjects, malloc=malloc, mallocCapabilities=mallocCapabilities, mallocScopeTable=mallocScopeTable, mallocScopeEntry=mallocScopeEntry, mallocScopeAddressType=mallocScopeAddressType, mallocScopeFirstAddress=mallocScopeFirstAddress, mallocScopeLastAddress=mallocScopeLastAddress, mallocScopeHopLimit=mallocScopeHopLimit, mallocScopeStatus=mallocScopeStatus, mallocScopeSource=mallocScopeSource, mallocScopeDivisible=mallocScopeDivisible, mallocScopeServerAddressType=mallocScopeServerAddressType, mallocScopeServerAddress=mallocScopeServerAddress, mallocScopeSSM=mallocScopeSSM, mallocScopeStorage=mallocScopeStorage, mallocScopeNameTable=mallocScopeNameTable, mallocScopeNameEntry=mallocScopeNameEntry, mallocScopeNameLangName=mallocScopeNameLangName, mallocScopeNameScopeName=mallocScopeNameScopeName, mallocScopeNameDefault=mallocScopeNameDefault, mallocScopeNameStatus=mallocScopeNameStatus, mallocScopeNameStorage=mallocScopeNameStorage, mallocAllocRangeTable=mallocAllocRangeTable, mallocAllocRangeEntry=mallocAllocRangeEntry, mallocAllocRangeFirstAddress=mallocAllocRangeFirstAddress, mallocAllocRangeLastAddress=mallocAllocRangeLastAddress, mallocAllocRangeStatus=mallocAllocRangeStatus, mallocAllocRangeSource=mallocAllocRangeSource, mallocAllocRangeLifetime=mallocAllocRangeLifetime, mallocAllocRangeMaxLeaseAddrs=mallocAllocRangeMaxLeaseAddrs, mallocAllocRangeMaxLeaseTime=mallocAllocRangeMaxLeaseTime, mallocAllocRangeNumAllocatedAddrs=mallocAllocRangeNumAllocatedAddrs, mallocAllocRangeNumOfferedAddrs=mallocAllocRangeNumOfferedAddrs, mallocAllocRangeNumWaitingAddrs=mallocAllocRangeNumWaitingAddrs, mallocAllocRangeNumTryingAddrs=mallocAllocRangeNumTryingAddrs, mallocAllocRangeAdvertisable=mallocAllocRangeAdvertisable, mallocAllocRangeTotalAllocatedAddrs=mallocAllocRangeTotalAllocatedAddrs, mallocAllocRangeTotalRequestedAddrs=mallocAllocRangeTotalRequestedAddrs, mallocAllocRangeStorage=mallocAllocRangeStorage, mallocRequestTable=mallocRequestTable, mallocRequestEntry=mallocRequestEntry, mallocRequestId=mallocRequestId, mallocRequestScopeAddressType=mallocRequestScopeAddressType, mallocRequestScopeFirstAddress=mallocRequestScopeFirstAddress, mallocRequestStartTime=mallocRequestStartTime, mallocRequestEndTime=mallocRequestEndTime, mallocRequestNumAddrs=mallocRequestNumAddrs, mallocRequestState=mallocRequestState, mallocRequestClientAddressType=mallocRequestClientAddressType, mallocRequestClientAddress=mallocRequestClientAddress, mallocRequestServerAddressType=mallocRequestServerAddressType, mallocRequestServerAddress=mallocRequestServerAddress, mallocRequestLeaseIdentifier=mallocRequestLeaseIdentifier, mallocAddressTable=mallocAddressTable, mallocAddressEntry=mallocAddressEntry, mallocAddressAddressType=mallocAddressAddressType, mallocAddressFirstAddress=mallocAddressFirstAddress, mallocAddressNumAddrs=mallocAddressNumAddrs, mallocAddressRequestId=mallocAddressRequestId, madcap=madcap, madcapConfig=madcapConfig, madcapConfigExtraAllocationTime=madcapConfigExtraAllocationTime, madcapConfigNoResponseDelay=madcapConfigNoResponseDelay, madcapConfigOfferHold=madcapConfigOfferHold, madcapConfigResponseCacheInterval=madcapConfigResponseCacheInterval, madcapConfigClockSkewAllowance=madcapConfigClockSkewAllowance, madcapCounters=madcapCounters, madcapTotalErrors=madcapTotalErrors, madcapRequestsDenied=madcapRequestsDenied, madcapInvalidRequests=madcapInvalidRequests, madcapExcessiveClockSkews=madcapExcessiveClockSkews, madcapBadLeaseIds=madcapBadLeaseIds, madcapDiscovers=madcapDiscovers, madcapInforms=madcapInforms, madcapRequests=madcapRequests, madcapRenews=madcapRenews, madcapReleases=madcapReleases, mallocConformance=mallocConformance, mallocCompliances=mallocCompliances, mallocGroups=mallocGroups)

# Groups
mibBuilder.exportSymbols("MALLOC-MIB", mallocServerGroup=mallocServerGroup, madcapServerGroup=madcapServerGroup, mallocClientGroup=mallocClientGroup, madcapClientGroup=madcapClientGroup, mallocPrefixCoordinatorGroup=mallocPrefixCoordinatorGroup, mallocClientScopeGroup=mallocClientScopeGroup, mallocBasicGroup=mallocBasicGroup)
