#
# PySNMP MIB module SWITCH-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/rob/Code/pysnmp-mibs/mibs/raisecom/SWITCH-VLAN-MIB
# Produced by pysmi-1.1.12 at Mon Aug  4 17:22:51 2025
# On host macmini.vegmond.io platform Darwin version 24.5.0 by user rob
# Using Python version 3.12.8 (main, Dec  3 2024, 18:42:41) [Clang 16.0.0 (clang-1600.0.26.4)]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
iscomSwitch, = mibBuilder.importSymbols("RAISECOM-BASE-MIB", "iscomSwitch")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32, Integer32, Gauge32, ModuleIdentity, TimeTicks, NotificationType, Counter32, Bits, IpAddress, iso, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32", "Integer32", "Gauge32", "ModuleIdentity", "TimeTicks", "NotificationType", "Counter32", "Bits", "IpAddress", "iso", "ObjectIdentity", "Counter64")
TextualConvention, DisplayString, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "MacAddress")
Vlanset, PortList, EnableVar = mibBuilder.importSymbols("SWITCH-TC", "Vlanset", "PortList", "EnableVar")
rcVlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19))
if mibBuilder.loadTexts: rcVlan.setLastUpdated('200502220000Z')
if mibBuilder.loadTexts: rcVlan.setOrganization('Raisecom, Inc.')
switchportConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1))
dot1qConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 2))
rcPortBasedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 3), )
if mibBuilder.loadTexts: rcPortBasedVlanTable.setStatus('current')
rcQinQVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 4), )
if mibBuilder.loadTexts: rcQinQVlanPortTable.setStatus('current')
rcQinQVlanTranslationTable = MibTable((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 5), )
if mibBuilder.loadTexts: rcQinQVlanTranslationTable.setStatus('current')
rcVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 1), )
if mibBuilder.loadTexts: rcVlanPortTable.setStatus('current')
rcVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 1, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "rcVlanPortId"))
if mibBuilder.loadTexts: rcVlanPortEntry.setStatus('current')
rcVlanPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rcVlanPortId.setStatus('current')
rcVlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("access", 2), ("hybrid", 3), ("trunk", 4), ("dot1q-tunnel", 5), ("hybrid-dt", 6), ("trunk-dt", 7), ("hybrid-tn", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortMode.setStatus('current')
rcVlanPortAccessVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortAccessVlanId.setStatus('current')
rcVlanPortHybridVlanAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 1, 1, 4), Vlanset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortHybridVlanAllow.setStatus('current')
rcVlanPortHybridVlanUntag = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 1, 1, 5), Vlanset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortHybridVlanUntag.setStatus('current')
rcVlanPortTrunkVlanAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 1, 1, 6), Vlanset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortTrunkVlanAllow.setStatus('current')
rcVlanPortVlanNative = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortVlanNative.setStatus('current')
rcVlanPortTrunkTagNativeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 1, 1, 8), EnableVar()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortTrunkTagNativeEnable.setStatus('current')
rcVlanPortServiceEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortServiceEtherType.setStatus('current')
rcVlanPortIngressVlanTranslateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 1, 1, 10), EnableVar()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortIngressVlanTranslateEnable.setStatus('current')
rcVlanPortEgressVlanTranslateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 1, 1, 11), EnableVar()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortEgressVlanTranslateEnable.setStatus('current')
rcVlanPortEgressVlanTranslateOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortEgressVlanTranslateOffset.setStatus('current')
rcVlanPortAcceptFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("tag", 2), ("untag", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortAcceptFrameType.setStatus('current')
rcVlanPortIngressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 1, 1, 14), EnableVar()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortIngressFiltering.setStatus('current')
rcVlanPortSvlVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 1, 1, 15), Vlanset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortSvlVlans.setStatus('current')
rcVlanMappingTable = MibTable((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 2), )
if mibBuilder.loadTexts: rcVlanMappingTable.setStatus('current')
rcVlanMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 2, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "rcVlanMappingPortId"), (0, "SWITCH-VLAN-MIB", "rcVlanMappingInnerVlanId"))
if mibBuilder.loadTexts: rcVlanMappingEntry.setStatus('current')
rcVlanMappingPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: rcVlanMappingPortId.setStatus('current')
rcVlanMappingInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: rcVlanMappingInnerVlanId.setStatus('current')
rcVlanMappingOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanMappingOuterVlanId.setStatus('current')
rcVlanMappingHwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 2, 1, 4), EnableVar()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanMappingHwStatus.setStatus('current')
rcVlanMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanMappingRowStatus.setStatus('current')
rDot1qVlanStaticTable = MibTable((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 2, 1), )
if mibBuilder.loadTexts: rDot1qVlanStaticTable.setStatus('current')
rDot1qVlanStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 2, 1, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "rDot1qVlanIndex"))
if mibBuilder.loadTexts: rDot1qVlanStaticEntry.setStatus('current')
rDot1qVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: rDot1qVlanIndex.setStatus('current')
rDot1qVlanStaticName = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rDot1qVlanStaticName.setStatus('current')
rDot1qVlanStaticEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 2, 1, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rDot1qVlanStaticEgressPorts.setStatus('current')
rDot1qVlanStaticUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 2, 1, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rDot1qVlanStaticUntaggedPorts.setStatus('current')
rDot1qVlanStaticActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("suspend", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rDot1qVlanStaticActiveStatus.setStatus('current')
rDot1qVlanStaticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rDot1qVlanStaticRowStatus.setStatus('current')
rDot1qVlanStaticPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rDot1qVlanStaticPriority.setStatus('current')
rcVlanDtEnable = MibScalar((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 2, 2), EnableVar()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanDtEnable.setStatus('obsolete')
rcVlanDtOuterTpid = MibScalar((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanDtOuterTpid.setStatus('current')
rcPortBasedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 3, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "rcPortBasedVlanIndex"))
if mibBuilder.loadTexts: rcPortBasedVlanEntry.setStatus('current')
rcPortBasedVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: rcPortBasedVlanIndex.setStatus('current')
rcPortBasedVlanPortlist = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 3, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcPortBasedVlanPortlist.setStatus('current')
rcQinQVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 4, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "rcPortBasedVlanIndex"))
if mibBuilder.loadTexts: rcQinQVlanPortEntry.setStatus('current')
rcQinQVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: rcQinQVlanPortIndex.setStatus('current')
rcVlanTranslationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanTranslationStatus.setStatus('current')
rcQinQVlanTranslationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 5, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "rcVlanTranslationIndex"))
if mibBuilder.loadTexts: rcQinQVlanTranslationEntry.setStatus('current')
rcVlanTranslationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: rcVlanTranslationIndex.setStatus('current')
rcVlanTranslatedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanTranslatedNum.setStatus('current')
rcVlanTranslationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8886, 6, 1, 19, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcVlanTranslationRowStatus.setStatus('current')
mibBuilder.exportSymbols("SWITCH-VLAN-MIB", rcVlanPortIngressVlanTranslateEnable=rcVlanPortIngressVlanTranslateEnable, rcPortBasedVlanIndex=rcPortBasedVlanIndex, rDot1qVlanStaticRowStatus=rDot1qVlanStaticRowStatus, rcVlanPortTrunkTagNativeEnable=rcVlanPortTrunkTagNativeEnable, switchportConfig=switchportConfig, rcVlanPortMode=rcVlanPortMode, rcVlanPortTrunkVlanAllow=rcVlanPortTrunkVlanAllow, rcVlanPortHybridVlanUntag=rcVlanPortHybridVlanUntag, rcVlanMappingRowStatus=rcVlanMappingRowStatus, rcVlanMappingTable=rcVlanMappingTable, rDot1qVlanStaticUntaggedPorts=rDot1qVlanStaticUntaggedPorts, rDot1qVlanStaticEntry=rDot1qVlanStaticEntry, rcVlanPortServiceEtherType=rcVlanPortServiceEtherType, rcVlanPortAcceptFrameType=rcVlanPortAcceptFrameType, rcVlanPortTable=rcVlanPortTable, rcVlanPortEgressVlanTranslateOffset=rcVlanPortEgressVlanTranslateOffset, rcVlanPortHybridVlanAllow=rcVlanPortHybridVlanAllow, rcVlanPortAccessVlanId=rcVlanPortAccessVlanId, rDot1qVlanStaticActiveStatus=rDot1qVlanStaticActiveStatus, rcQinQVlanPortEntry=rcQinQVlanPortEntry, dot1qConfig=dot1qConfig, rcVlanDtOuterTpid=rcVlanDtOuterTpid, rcPortBasedVlanPortlist=rcPortBasedVlanPortlist, rcQinQVlanTranslationEntry=rcQinQVlanTranslationEntry, rDot1qVlanStaticPriority=rDot1qVlanStaticPriority, rDot1qVlanStaticTable=rDot1qVlanStaticTable, rcVlanMappingPortId=rcVlanMappingPortId, rcQinQVlanTranslationTable=rcQinQVlanTranslationTable, rcVlan=rcVlan, rcVlanPortSvlVlans=rcVlanPortSvlVlans, rcVlanMappingOuterVlanId=rcVlanMappingOuterVlanId, rcVlanMappingEntry=rcVlanMappingEntry, rcPortBasedVlanTable=rcPortBasedVlanTable, rcVlanPortEgressVlanTranslateEnable=rcVlanPortEgressVlanTranslateEnable, rDot1qVlanIndex=rDot1qVlanIndex, rcQinQVlanPortIndex=rcQinQVlanPortIndex, rcVlanPortEntry=rcVlanPortEntry, rcVlanTranslatedNum=rcVlanTranslatedNum, rcVlanPortIngressFiltering=rcVlanPortIngressFiltering, rcVlanDtEnable=rcVlanDtEnable, rcVlanPortVlanNative=rcVlanPortVlanNative, rcVlanTranslationRowStatus=rcVlanTranslationRowStatus, rDot1qVlanStaticEgressPorts=rDot1qVlanStaticEgressPorts, PYSNMP_MODULE_ID=rcVlan, rcPortBasedVlanEntry=rcPortBasedVlanEntry, rcVlanMappingHwStatus=rcVlanMappingHwStatus, rDot1qVlanStaticName=rDot1qVlanStaticName, rcQinQVlanPortTable=rcQinQVlanPortTable, rcVlanMappingInnerVlanId=rcVlanMappingInnerVlanId, rcVlanPortId=rcVlanPortId, rcVlanTranslationIndex=rcVlanTranslationIndex, rcVlanTranslationStatus=rcVlanTranslationStatus)
