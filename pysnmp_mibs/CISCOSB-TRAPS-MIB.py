_G='rldot1dStpTrapVrblifIndex'
_F='rldot1dStpTrapVrblVID'
_E='CISCOSB-BRIDGEMIBOBJECTS-MIB'
_D='current'
_C='rndErrorSeverity'
_B='rndErrorDesc'
_A='CISCOSB-DEVICEPARAMS-MIB'
if'mibBuilder'not in globals():import sys;sys.stderr.write(__doc__);sys.exit(1)
Integer,OctetString,ObjectIdentifier=mibBuilder.importSymbols('ASN1','Integer','OctetString','ObjectIdentifier')
NamedValues,=mibBuilder.importSymbols('ASN1-ENUMERATION','NamedValues')
ConstraintsIntersection,ConstraintsUnion,SingleValueConstraint,ValueRangeConstraint,ValueSizeConstraint=mibBuilder.importSymbols('ASN1-REFINEMENT','ConstraintsIntersection','ConstraintsUnion','SingleValueConstraint','ValueRangeConstraint','ValueSizeConstraint')
rldot1dStpTrapVrblVID,rldot1dStpTrapVrblifIndex=mibBuilder.importSymbols(_E,_F,_G)
rndErrorDesc,rndErrorSeverity=mibBuilder.importSymbols(_A,_B,_C)
switch001,=mibBuilder.importSymbols('CISCOSB-MIB','switch001')
ModuleCompliance,NotificationGroup=mibBuilder.importSymbols('SNMPv2-CONF','ModuleCompliance','NotificationGroup')
Bits,Counter32,Counter64,Gauge32,Integer32,IpAddress,ModuleIdentity,MibIdentifier,NotificationType,ObjectIdentity,MibScalar,MibTable,MibTableRow,MibTableColumn,TimeTicks,Unsigned32,iso=mibBuilder.importSymbols('SNMPv2-SMI','Bits','Counter32','Counter64','Gauge32','Integer32','IpAddress','ModuleIdentity','MibIdentifier','NotificationType','ObjectIdentity','MibScalar','MibTable','MibTableRow','MibTableColumn','TimeTicks','Unsigned32','iso')
DisplayString,PhysAddress,TextualConvention=mibBuilder.importSymbols('SNMPv2-TC','DisplayString','PhysAddress','TextualConvention')
rndNotifications=ModuleIdentity((1,3,6,1,4,1,9,6,1,101,0))
if mibBuilder.loadTexts:rndNotifications.setRevisions(('2010-06-25 00:00',))
rxOverflowHWFault=NotificationType((1,3,6,1,4,1,9,6,1,101,0,3))
rxOverflowHWFault.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rxOverflowHWFault.setStatus(_D)
txOverflowHWFault=NotificationType((1,3,6,1,4,1,9,6,1,101,0,4))
txOverflowHWFault.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:txOverflowHWFault.setStatus(_D)
routeTableOverflow=NotificationType((1,3,6,1,4,1,9,6,1,101,0,5))
routeTableOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:routeTableOverflow.setStatus(_D)
resetRequired=NotificationType((1,3,6,1,4,1,9,6,1,101,0,10))
resetRequired.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:resetRequired.setStatus(_D)
endTftp=NotificationType((1,3,6,1,4,1,9,6,1,101,0,12))
endTftp.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:endTftp.setStatus(_D)
abortTftp=NotificationType((1,3,6,1,4,1,9,6,1,101,0,13))
abortTftp.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:abortTftp.setStatus(_D)
startTftp=NotificationType((1,3,6,1,4,1,9,6,1,101,0,14))
startTftp.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:startTftp.setStatus(_D)
faultBackUp=NotificationType((1,3,6,1,4,1,9,6,1,101,0,23))
faultBackUp.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:faultBackUp.setStatus(_D)
mainLinkUp=NotificationType((1,3,6,1,4,1,9,6,1,101,0,24))
mainLinkUp.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:mainLinkUp.setStatus(_D)
ipxRipTblOverflow=NotificationType((1,3,6,1,4,1,9,6,1,101,0,36))
ipxRipTblOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:ipxRipTblOverflow.setStatus(_D)
ipxSapTblOverflow=NotificationType((1,3,6,1,4,1,9,6,1,101,0,37))
ipxSapTblOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:ipxSapTblOverflow.setStatus(_D)
facsAccessVoilation=NotificationType((1,3,6,1,4,1,9,6,1,101,0,49))
facsAccessVoilation.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:facsAccessVoilation.setStatus(_D)
autoConfigurationCompleted=NotificationType((1,3,6,1,4,1,9,6,1,101,0,50))
autoConfigurationCompleted.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:autoConfigurationCompleted.setStatus(_D)
forwardingTabOverflow=NotificationType((1,3,6,1,4,1,9,6,1,101,0,51))
forwardingTabOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:forwardingTabOverflow.setStatus(_D)
framRelaySwitchConnectionUp=NotificationType((1,3,6,1,4,1,9,6,1,101,0,53))
framRelaySwitchConnectionUp.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:framRelaySwitchConnectionUp.setStatus(_D)
framRelaySwitchConnectionDown=NotificationType((1,3,6,1,4,1,9,6,1,101,0,54))
framRelaySwitchConnectionDown.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:framRelaySwitchConnectionDown.setStatus(_D)
errorsDuringInit=NotificationType((1,3,6,1,4,1,9,6,1,101,0,61))
errorsDuringInit.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:errorsDuringInit.setStatus(_D)
vlanDynPortAdded=NotificationType((1,3,6,1,4,1,9,6,1,101,0,66))
vlanDynPortAdded.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:vlanDynPortAdded.setStatus(_D)
vlanDynPortRemoved=NotificationType((1,3,6,1,4,1,9,6,1,101,0,67))
vlanDynPortRemoved.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:vlanDynPortRemoved.setStatus(_D)
rsSDclientsTableOverflow=NotificationType((1,3,6,1,4,1,9,6,1,101,0,68))
rsSDclientsTableOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsSDclientsTableOverflow.setStatus(_D)
rsSDinactiveServer=NotificationType((1,3,6,1,4,1,9,6,1,101,0,69))
rsSDinactiveServer.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsSDinactiveServer.setStatus(_D)
rsIpZhrConnectionsTableOverflow=NotificationType((1,3,6,1,4,1,9,6,1,101,0,70))
rsIpZhrConnectionsTableOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsIpZhrConnectionsTableOverflow.setStatus(_D)
rsIpZhrReqStaticConnNotAccepted=NotificationType((1,3,6,1,4,1,9,6,1,101,0,71))
rsIpZhrReqStaticConnNotAccepted.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsIpZhrReqStaticConnNotAccepted.setStatus(_D)
rsIpZhrVirtualIpAsSource=NotificationType((1,3,6,1,4,1,9,6,1,101,0,72))
rsIpZhrVirtualIpAsSource.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsIpZhrVirtualIpAsSource.setStatus(_D)
rsIpZhrNotAllocVirtualIp=NotificationType((1,3,6,1,4,1,9,6,1,101,0,73))
rsIpZhrNotAllocVirtualIp.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsIpZhrNotAllocVirtualIp.setStatus(_D)
rsSnmpSetRequestInSpecialCfgState=NotificationType((1,3,6,1,4,1,9,6,1,101,0,74))
rsSnmpSetRequestInSpecialCfgState.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsSnmpSetRequestInSpecialCfgState.setStatus(_D)
rsPingCompletion=NotificationType((1,3,6,1,4,1,9,6,1,101,0,136))
rsPingCompletion.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsPingCompletion.setStatus(_D)
pppSecurityViolation=NotificationType((1,3,6,1,4,1,9,6,1,101,0,137))
pppSecurityViolation.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:pppSecurityViolation.setStatus(_D)
frDLCIStatudChange=NotificationType((1,3,6,1,4,1,9,6,1,101,0,138))
frDLCIStatudChange.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:frDLCIStatudChange.setStatus(_D)
papFailedCommunication=NotificationType((1,3,6,1,4,1,9,6,1,101,0,139))
papFailedCommunication.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:papFailedCommunication.setStatus(_D)
chapFailedCommunication=NotificationType((1,3,6,1,4,1,9,6,1,101,0,140))
chapFailedCommunication.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:chapFailedCommunication.setStatus(_D)
rsWSDRedundancySwitch=NotificationType((1,3,6,1,4,1,9,6,1,101,0,141))
rsWSDRedundancySwitch.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsWSDRedundancySwitch.setStatus(_D)
rsDhcpAllocationFailure=NotificationType((1,3,6,1,4,1,9,6,1,101,0,142))
rsDhcpAllocationFailure.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsDhcpAllocationFailure.setStatus(_D)
rlIpFftStnOverflow=NotificationType((1,3,6,1,4,1,9,6,1,101,0,145))
rlIpFftStnOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlIpFftStnOverflow.setStatus(_D)
rlIpFftSubOverflow=NotificationType((1,3,6,1,4,1,9,6,1,101,0,146))
rlIpFftSubOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlIpFftSubOverflow.setStatus(_D)
rlIpxFftStnOverflow=NotificationType((1,3,6,1,4,1,9,6,1,101,0,147))
rlIpxFftStnOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlIpxFftStnOverflow.setStatus(_D)
rlIpxFftSubOverflow=NotificationType((1,3,6,1,4,1,9,6,1,101,0,148))
rlIpxFftSubOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlIpxFftSubOverflow.setStatus(_D)
rlIpmFftOverflow=NotificationType((1,3,6,1,4,1,9,6,1,101,0,149))
rlIpmFftOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlIpmFftOverflow.setStatus(_D)
rlPhysicalDescriptionChanged=NotificationType((1,3,6,1,4,1,9,6,1,101,0,150))
rlPhysicalDescriptionChanged.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlPhysicalDescriptionChanged.setStatus(_D)
rldot1dStpPortStateForwarding=NotificationType((1,3,6,1,4,1,9,6,1,101,0,151))
rldot1dStpPortStateForwarding.setObjects(*((_A,_B),(_A,_C),(_E,_G),(_E,_F)))
if mibBuilder.loadTexts:rldot1dStpPortStateForwarding.setStatus(_D)
rldot1dStpPortStateNotForwarding=NotificationType((1,3,6,1,4,1,9,6,1,101,0,152))
rldot1dStpPortStateNotForwarding.setObjects(*((_A,_B),(_A,_C),(_E,_G),(_E,_F)))
if mibBuilder.loadTexts:rldot1dStpPortStateNotForwarding.setStatus(_D)
rlPolicyDropPacketTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,153))
rlPolicyDropPacketTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlPolicyDropPacketTrap.setStatus(_D)
rlPolicyForwardPacketTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,154))
rlPolicyForwardPacketTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlPolicyForwardPacketTrap.setStatus(_D)
rlIgmpProxyTableOverflow=NotificationType((1,3,6,1,4,1,9,6,1,101,0,156))
rlIgmpProxyTableOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlIgmpProxyTableOverflow.setStatus(_D)
rlIgmpV1MsgReceived=NotificationType((1,3,6,1,4,1,9,6,1,101,0,157))
rlIgmpV1MsgReceived.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlIgmpV1MsgReceived.setStatus(_D)
rlVrrpEntriesDeleted=NotificationType((1,3,6,1,4,1,9,6,1,101,0,158))
rlVrrpEntriesDeleted.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlVrrpEntriesDeleted.setStatus(_D)
rlHotSwapTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,159))
rlHotSwapTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlHotSwapTrap.setStatus(_D)
rlTrunkPortAddedTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,160))
rlTrunkPortAddedTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlTrunkPortAddedTrap.setStatus(_D)
rlTrunkPortRemovedTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,161))
rlTrunkPortRemovedTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlTrunkPortRemovedTrap.setStatus(_D)
rlTrunkPortNotCapableTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,162))
rlTrunkPortNotCapableTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlTrunkPortNotCapableTrap.setStatus(_D)
rlLockPortTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,170))
rlLockPortTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlLockPortTrap.setStatus(_D)
vlanDynVlanAdded=NotificationType((1,3,6,1,4,1,9,6,1,101,0,171))
vlanDynVlanAdded.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:vlanDynVlanAdded.setStatus(_D)
vlanDynVlanRemoved=NotificationType((1,3,6,1,4,1,9,6,1,101,0,172))
vlanDynVlanRemoved.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:vlanDynVlanRemoved.setStatus(_D)
vlanDynamicToStatic=NotificationType((1,3,6,1,4,1,9,6,1,101,0,173))
vlanDynamicToStatic.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:vlanDynamicToStatic.setStatus(_D)
vlanStaticToDynamic=NotificationType((1,3,6,1,4,1,9,6,1,101,0,174))
vlanStaticToDynamic.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:vlanStaticToDynamic.setStatus(_D)
dstrSysLog=NotificationType((1,3,6,1,4,1,9,6,1,101,0,175))
dstrSysLog.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:dstrSysLog.setStatus(_D)
rlEnvMonFanStateChange=NotificationType((1,3,6,1,4,1,9,6,1,101,0,176))
rlEnvMonFanStateChange.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlEnvMonFanStateChange.setStatus(_D)
rlEnvMonPowerSupplyStateChange=NotificationType((1,3,6,1,4,1,9,6,1,101,0,177))
rlEnvMonPowerSupplyStateChange.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlEnvMonPowerSupplyStateChange.setStatus(_D)
rlStackStateChange=NotificationType((1,3,6,1,4,1,9,6,1,101,0,178))
rlStackStateChange.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlStackStateChange.setStatus(_D)
rlEnvMonTemperatureRisingAlarm=NotificationType((1,3,6,1,4,1,9,6,1,101,0,179))
rlEnvMonTemperatureRisingAlarm.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlEnvMonTemperatureRisingAlarm.setStatus(_D)
rlBrgMacAddFailedTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,183))
rlBrgMacAddFailedTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlBrgMacAddFailedTrap.setStatus(_D)
rldot1xPortStatusAuthorizedTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,184))
rldot1xPortStatusAuthorizedTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rldot1xPortStatusAuthorizedTrap.setStatus(_D)
rldot1xPortStatusUnauthorizedTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,185))
rldot1xPortStatusUnauthorizedTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rldot1xPortStatusUnauthorizedTrap.setStatus(_D)
swIfTablePortLock=NotificationType((1,3,6,1,4,1,9,6,1,101,0,192))
swIfTablePortLock.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:swIfTablePortLock.setStatus(_D)
swIfTablePortUnLock=NotificationType((1,3,6,1,4,1,9,6,1,101,0,193))
swIfTablePortUnLock.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:swIfTablePortUnLock.setStatus(_D)
rlAAAUserLocked=NotificationType((1,3,6,1,4,1,9,6,1,101,0,194))
rlAAAUserLocked.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlAAAUserLocked.setStatus(_D)
bpduGuardPortSuspended=NotificationType((1,3,6,1,4,1,9,6,1,101,0,202))
bpduGuardPortSuspended.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:bpduGuardPortSuspended.setStatus(_D)
rldot1xSupplicantMacAuthorizedTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,203))
rldot1xSupplicantMacAuthorizedTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rldot1xSupplicantMacAuthorizedTrap.setStatus(_D)
rldot1xSupplicantMacUnauthorizedTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,204))
rldot1xSupplicantMacUnauthorizedTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rldot1xSupplicantMacUnauthorizedTrap.setStatus(_D)
stpLoopbackDetection=NotificationType((1,3,6,1,4,1,9,6,1,101,0,205))
stpLoopbackDetection.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:stpLoopbackDetection.setStatus(_D)
stpLoopbackDetectionResolved=NotificationType((1,3,6,1,4,1,9,6,1,101,0,206))
stpLoopbackDetectionResolved.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:stpLoopbackDetectionResolved.setStatus(_D)
loopbackDetectionPortSuspended=NotificationType((1,3,6,1,4,1,9,6,1,101,0,207))
loopbackDetectionPortSuspended.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:loopbackDetectionPortSuspended.setStatus(_D)
rlPortSuspended=NotificationType((1,3,6,1,4,1,9,6,1,101,0,213))
rlPortSuspended.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlPortSuspended.setStatus(_D)
rlSpecialBpduDbOverflow=NotificationType((1,3,6,1,4,1,9,6,1,101,0,214))
rlSpecialBpduDbOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSpecialBpduDbOverflow.setStatus(_D)
rldot1xSupplicantLoggedOutTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,215))
rldot1xSupplicantLoggedOutTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rldot1xSupplicantLoggedOutTrap.setStatus(_D)
rldot1xPortControlModeNotAutoTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,216))
rldot1xPortControlModeNotAutoTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rldot1xPortControlModeNotAutoTrap.setStatus(_D)
rlEeeLldpMultipleNeighbours=NotificationType((1,3,6,1,4,1,9,6,1,101,0,217))
rlEeeLldpMultipleNeighbours.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlEeeLldpMultipleNeighbours.setStatus(_D)
rlEeeLldpSingleNeighbour=NotificationType((1,3,6,1,4,1,9,6,1,101,0,218))
rlEeeLldpSingleNeighbour.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlEeeLldpSingleNeighbour.setStatus(_D)
rldot1xSupplicantQuietPeriodTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,219))
rldot1xSupplicantQuietPeriodTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rldot1xSupplicantQuietPeriodTrap.setStatus(_D)
rlStackVersionUpgradeTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,222))
rlStackVersionUpgradeTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlStackVersionUpgradeTrap.setStatus(_D)
rlStackVersionDowngradeTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,223))
rlStackVersionDowngradeTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlStackVersionDowngradeTrap.setStatus(_D)
pseInrushPort=NotificationType((1,3,6,1,4,1,9,6,1,101,0,240))
pseInrushPort.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:pseInrushPort.setStatus(_D)
pseOverloadPort=NotificationType((1,3,6,1,4,1,9,6,1,101,0,241))
pseOverloadPort.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:pseOverloadPort.setStatus(_D)
poePowerNegotiationInfo=NotificationType((1,3,6,1,4,1,9,6,1,101,0,242))
poePowerNegotiationInfo.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:poePowerNegotiationInfo.setStatus(_D)
poePowerNegotiation4Wire=NotificationType((1,3,6,1,4,1,9,6,1,101,0,243))
poePowerNegotiation4Wire.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:poePowerNegotiation4Wire.setStatus(_D)
poePowerHWFail=NotificationType((1,3,6,1,4,1,9,6,1,101,0,244))
poePowerHWFail.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:poePowerHWFail.setStatus(_D)
poePowerNegotiationExpiredInfo=NotificationType((1,3,6,1,4,1,9,6,1,101,0,245))
poePowerNegotiationExpiredInfo.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:poePowerNegotiationExpiredInfo.setStatus(_D)
rlStormControlMinRateTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,246))
rlStormControlMinRateTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlStormControlMinRateTrap.setStatus(_D)
rlApBackplanePortResolutionTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,247))
rlApBackplanePortResolutionTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlApBackplanePortResolutionTrap.setStatus(_D)
sfpPortPresent=NotificationType((1,3,6,1,4,1,9,6,1,101,0,248))
sfpPortPresent.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:sfpPortPresent.setStatus(_D)
sfpPortNotPresent=NotificationType((1,3,6,1,4,1,9,6,1,101,0,249))
sfpPortNotPresent.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:sfpPortNotPresent.setStatus(_D)
sfpPortLoss=NotificationType((1,3,6,1,4,1,9,6,1,101,0,250))
sfpPortLoss.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:sfpPortLoss.setStatus(_D)
sfpPortNotLoss=NotificationType((1,3,6,1,4,1,9,6,1,101,0,251))
sfpPortNotLoss.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:sfpPortNotLoss.setStatus(_D)
rlStormControlOccursTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,252))
rlStormControlOccursTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlStormControlOccursTrap.setStatus(_D)
rlRadiusServTrapAcct=NotificationType((1,3,6,1,4,1,9,6,1,101,0,255))
rlRadiusServTrapAcct.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlRadiusServTrapAcct.setStatus(_D)
rlRadiusServTrapAuthFailure=NotificationType((1,3,6,1,4,1,9,6,1,101,0,256))
rlRadiusServTrapAuthFailure.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlRadiusServTrapAuthFailure.setStatus(_D)
rlRadiusServTrapAuthSuccess=NotificationType((1,3,6,1,4,1,9,6,1,101,0,257))
rlRadiusServTrapAuthSuccess.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlRadiusServTrapAuthSuccess.setStatus(_D)
rlRedundantFanStateChange=NotificationType((1,3,6,1,4,1,9,6,1,101,0,258))
rlRedundantFanStateChange.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlRedundantFanStateChange.setStatus(_D)
rldot1xSupplicantPortAuthorizedTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,260))
rldot1xSupplicantPortAuthorizedTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rldot1xSupplicantPortAuthorizedTrap.setStatus(_D)
rldot1xSupplicantPortUnauthorizedTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,261))
rldot1xSupplicantPortUnauthorizedTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rldot1xSupplicantPortUnauthorizedTrap.setStatus(_D)
rldot1xCredentialTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,262))
rldot1xCredentialTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rldot1xCredentialTrap.setStatus(_D)
poeNonPOEDetected=NotificationType((1,3,6,1,4,1,9,6,1,101,0,263))
poeNonPOEDetected.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:poeNonPOEDetected.setStatus(_D)
rlBoxUtilI2CReadFailureTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,264))
rlBoxUtilI2CReadFailureTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlBoxUtilI2CReadFailureTrap.setStatus(_D)
rlBoxUtilI2CWriteFailureTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,265))
rlBoxUtilI2CWriteFailureTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlBoxUtilI2CWriteFailureTrap.setStatus(_D)
rlHostHlibCpldUpdateTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,266))
rlHostHlibCpldUpdateTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlHostHlibCpldUpdateTrap.setStatus(_D)
rlBrgPvstInconsistencyEnterStateTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,268))
rlBrgPvstInconsistencyEnterStateTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlBrgPvstInconsistencyEnterStateTrap.setStatus(_D)
rlBrgPvstInconsistencyExitStateTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,269))
rlBrgPvstInconsistencyExitStateTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlBrgPvstInconsistencyExitStateTrap.setStatus(_D)
sfpPortNonCompliant=NotificationType((1,3,6,1,4,1,9,6,1,101,0,275))
sfpPortNonCompliant.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:sfpPortNonCompliant.setStatus(_D)
poePowerPortHWFail=NotificationType((1,3,6,1,4,1,9,6,1,101,0,276))
poePowerPortHWFail.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:poePowerPortHWFail.setStatus(_D)
rlHttpClientCertAddressMismatch=NotificationType((1,3,6,1,4,1,9,6,1,101,0,278))
rlHttpClientCertAddressMismatch.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlHttpClientCertAddressMismatch.setStatus(_D)
rlAAAwrongReauthentication=NotificationType((1,3,6,1,4,1,9,6,1,101,0,279))
rlAAAwrongReauthentication.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlAAAwrongReauthentication.setStatus(_D)
poeSSInvalidSignature=NotificationType((1,3,6,1,4,1,9,6,1,101,0,280))
poeSSInvalidSignature.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:poeSSInvalidSignature.setStatus(_D)
poeDSInvalidSignature=NotificationType((1,3,6,1,4,1,9,6,1,101,0,281))
poeDSInvalidSignature.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:poeDSInvalidSignature.setStatus(_D)
poeDeniedPower=NotificationType((1,3,6,1,4,1,9,6,1,101,0,282))
poeDeniedPower.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:poeDeniedPower.setStatus(_D)
poeBTPortDetectSS=NotificationType((1,3,6,1,4,1,9,6,1,101,0,283))
poeBTPortDetectSS.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:poeBTPortDetectSS.setStatus(_D)
poeBTPortDetectDS=NotificationType((1,3,6,1,4,1,9,6,1,101,0,284))
poeBTPortDetectDS.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:poeBTPortDetectDS.setStatus(_D)
poeBTPortOnChannel=NotificationType((1,3,6,1,4,1,9,6,1,101,0,285))
poeBTPortOnChannel.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:poeBTPortOnChannel.setStatus(_D)
poeBTPowerDemoted=NotificationType((1,3,6,1,4,1,9,6,1,101,0,286))
poeBTPowerDemoted.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:poeBTPowerDemoted.setStatus(_D)
rlImageLogChanges=NotificationType((1,3,6,1,4,1,9,6,1,101,0,287))
rlImageLogChanges.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlImageLogChanges.setStatus(_D)
rlSystemClockUpdate=NotificationType((1,3,6,1,4,1,9,6,1,101,0,288))
rlSystemClockUpdate.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSystemClockUpdate.setStatus(_D)
rlSystemClockOperationalSourceChanged=NotificationType((1,3,6,1,4,1,9,6,1,101,0,289))
rlSystemClockOperationalSourceChanged.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSystemClockOperationalSourceChanged.setStatus(_D)
rlSystemClockSummerTimeUpdate=NotificationType((1,3,6,1,4,1,9,6,1,101,0,290))
rlSystemClockSummerTimeUpdate.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSystemClockSummerTimeUpdate.setStatus(_D)
rlSystemClockTimeZoneUpdate=NotificationType((1,3,6,1,4,1,9,6,1,101,0,291))
rlSystemClockTimeZoneUpdate.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSystemClockTimeZoneUpdate.setStatus(_D)
rlSystemClockSourceListUpdate=NotificationType((1,3,6,1,4,1,9,6,1,101,0,292))
rlSystemClockSourceListUpdate.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSystemClockSourceListUpdate.setStatus(_D)
rlHttpsClientConnectionSetupSuccess=NotificationType((1,3,6,1,4,1,9,6,1,101,0,293))
rlHttpsClientConnectionSetupSuccess.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlHttpsClientConnectionSetupSuccess.setStatus(_D)
rlHttpsClientConnectionSetupFailure=NotificationType((1,3,6,1,4,1,9,6,1,101,0,294))
rlHttpsClientConnectionSetupFailure.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlHttpsClientConnectionSetupFailure.setStatus(_D)
rlHttpsClientConnectionTerminated=NotificationType((1,3,6,1,4,1,9,6,1,101,0,295))
rlHttpsClientConnectionTerminated.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlHttpsClientConnectionTerminated.setStatus(_D)
rlHttpsServerConnectionSetupSuccess=NotificationType((1,3,6,1,4,1,9,6,1,101,0,296))
rlHttpsServerConnectionSetupSuccess.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlHttpsServerConnectionSetupSuccess.setStatus(_D)
rlHttpsServerConnectionSetupFailure=NotificationType((1,3,6,1,4,1,9,6,1,101,0,297))
rlHttpsServerConnectionSetupFailure.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlHttpsServerConnectionSetupFailure.setStatus(_D)
rlHttpsServerConnectionTerminated=NotificationType((1,3,6,1,4,1,9,6,1,101,0,298))
rlHttpsServerConnectionTerminated.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlHttpsServerConnectionTerminated.setStatus(_D)
rlHttpsServerUserAuthenticated=NotificationType((1,3,6,1,4,1,9,6,1,101,0,299))
rlHttpsServerUserAuthenticated.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlHttpsServerUserAuthenticated.setStatus(_D)
rlSshConnectionSetupSuccess=NotificationType((1,3,6,1,4,1,9,6,1,101,0,300))
rlSshConnectionSetupSuccess.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSshConnectionSetupSuccess.setStatus(_D)
rlSshConnectionTerminated=NotificationType((1,3,6,1,4,1,9,6,1,101,0,301))
rlSshConnectionTerminated.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSshConnectionTerminated.setStatus(_D)
rlAAAloginQuietModeOn=NotificationType((1,3,6,1,4,1,9,6,1,101,0,302))
rlAAAloginQuietModeOn.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlAAAloginQuietModeOn.setStatus(_D)
rlAAAloginQuietModeOff=NotificationType((1,3,6,1,4,1,9,6,1,101,0,303))
rlAAAloginQuietModeOff.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlAAAloginQuietModeOff.setStatus(_D)
rlDyingGaspPowerFailure=NotificationType((1,3,6,1,4,1,9,6,1,101,0,304))
rlDyingGaspPowerFailure.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlDyingGaspPowerFailure.setStatus(_D)
vlanAsvTcamRuleFailedTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,305))
vlanAsvTcamRuleFailedTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:vlanAsvTcamRuleFailedTrap.setStatus(_D)
rlSecBootEfuseVerFailure=NotificationType((1,3,6,1,4,1,9,6,1,101,0,306))
rlSecBootEfuseVerFailure.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSecBootEfuseVerFailure.setStatus(_D)
rlSecBootEfuseRevokeFailure=NotificationType((1,3,6,1,4,1,9,6,1,101,0,307))
rlSecBootEfuseRevokeFailure.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSecBootEfuseRevokeFailure.setStatus(_D)
rlSecBootcopyOperationFailure=NotificationType((1,3,6,1,4,1,9,6,1,101,0,308))
rlSecBootcopyOperationFailure.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSecBootcopyOperationFailure.setStatus(_D)
rlSecBootboardTypeFailure=NotificationType((1,3,6,1,4,1,9,6,1,101,0,309))
rlSecBootboardTypeFailure.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSecBootboardTypeFailure.setStatus(_D)
rlSecBootimageTypeFailure=NotificationType((1,3,6,1,4,1,9,6,1,101,0,310))
rlSecBootimageTypeFailure.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSecBootimageTypeFailure.setStatus(_D)
rlSecBootimageSyncMemberUnitFailure=NotificationType((1,3,6,1,4,1,9,6,1,101,0,311))
rlSecBootimageSyncMemberUnitFailure.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSecBootimageSyncMemberUnitFailure.setStatus(_D)
rlSecBootUnitBoardTypeFailure=NotificationType((1,3,6,1,4,1,9,6,1,101,0,312))
rlSecBootUnitBoardTypeFailure.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSecBootUnitBoardTypeFailure.setStatus(_D)
rlSecBootUnitRevokedKeyFailure=NotificationType((1,3,6,1,4,1,9,6,1,101,0,313))
rlSecBootUnitRevokedKeyFailure.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSecBootUnitRevokedKeyFailure.setStatus(_D)
rlSecBootStackRevokedKeyFailure=NotificationType((1,3,6,1,4,1,9,6,1,101,0,314))
rlSecBootStackRevokedKeyFailure.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSecBootStackRevokedKeyFailure.setStatus(_D)
vlanAsvTcamQosRuleNoResourceTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,315))
vlanAsvTcamQosRuleNoResourceTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:vlanAsvTcamQosRuleNoResourceTrap.setStatus(_D)
vlanVoiceTcamQosRuleNoResourceTrap=NotificationType((1,3,6,1,4,1,9,6,1,101,0,316))
vlanVoiceTcamQosRuleNoResourceTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:vlanVoiceTcamQosRuleNoResourceTrap.setStatus(_D)
rlCoADiscardPacket=NotificationType((1,3,6,1,4,1,9,6,1,101,0,317))
rlCoADiscardPacket.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlCoADiscardPacket.setStatus(_D)
rlCoADiscardDuplicatedPacket=NotificationType((1,3,6,1,4,1,9,6,1,101,0,318))
rlCoADiscardDuplicatedPacket.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlCoADiscardDuplicatedPacket.setStatus(_D)
rlCoARejectRequest=NotificationType((1,3,6,1,4,1,9,6,1,101,0,319))
rlCoARejectRequest.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlCoARejectRequest.setStatus(_D)
rlCoARejectRequestNasMismatch=NotificationType((1,3,6,1,4,1,9,6,1,101,0,320))
rlCoARejectRequestNasMismatch.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlCoARejectRequestNasMismatch.setStatus(_D)
rlCoAServerKeyIgnored=NotificationType((1,3,6,1,4,1,9,6,1,101,0,321))
rlCoAServerKeyIgnored.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlCoAServerKeyIgnored.setStatus(_D)
rlCoARejectRequestOverflow=NotificationType((1,3,6,1,4,1,9,6,1,101,0,322))
rlCoARejectRequestOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlCoARejectRequestOverflow.setStatus(_D)
rlCoADisconnectMultiSession=NotificationType((1,3,6,1,4,1,9,6,1,101,0,323))
rlCoADisconnectMultiSession.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlCoADisconnectMultiSession.setStatus(_D)
rlCoADisconnectSession=NotificationType((1,3,6,1,4,1,9,6,1,101,0,324))
rlCoADisconnectSession.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlCoADisconnectSession.setStatus(_D)
rlCoAReauthenticateSession=NotificationType((1,3,6,1,4,1,9,6,1,101,0,325))
rlCoAReauthenticateSession.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlCoAReauthenticateSession.setStatus(_D)
rlCoADisablePort=NotificationType((1,3,6,1,4,1,9,6,1,101,0,326))
rlCoADisablePort.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlCoADisablePort.setStatus(_D)
rlCoABouncePort=NotificationType((1,3,6,1,4,1,9,6,1,101,0,327))
rlCoABouncePort.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlCoABouncePort.setStatus(_D)
rlCoAClientServerKey=NotificationType((1,3,6,1,4,1,9,6,1,101,0,328))
rlCoAClientServerKey.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlCoAClientServerKey.setStatus(_D)
rlCoADefaultServerKey=NotificationType((1,3,6,1,4,1,9,6,1,101,0,329))
rlCoADefaultServerKey.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlCoADefaultServerKey.setStatus(_D)
mibBuilder.exportSymbols('CISCOSB-TRAPS-MIB',**{'rndNotifications':rndNotifications,'rxOverflowHWFault':rxOverflowHWFault,'txOverflowHWFault':txOverflowHWFault,'routeTableOverflow':routeTableOverflow,'resetRequired':resetRequired,'endTftp':endTftp,'abortTftp':abortTftp,'startTftp':startTftp,'faultBackUp':faultBackUp,'mainLinkUp':mainLinkUp,'ipxRipTblOverflow':ipxRipTblOverflow,'ipxSapTblOverflow':ipxSapTblOverflow,'facsAccessVoilation':facsAccessVoilation,'autoConfigurationCompleted':autoConfigurationCompleted,'forwardingTabOverflow':forwardingTabOverflow,'framRelaySwitchConnectionUp':framRelaySwitchConnectionUp,'framRelaySwitchConnectionDown':framRelaySwitchConnectionDown,'errorsDuringInit':errorsDuringInit,'vlanDynPortAdded':vlanDynPortAdded,'vlanDynPortRemoved':vlanDynPortRemoved,'rsSDclientsTableOverflow':rsSDclientsTableOverflow,'rsSDinactiveServer':rsSDinactiveServer,'rsIpZhrConnectionsTableOverflow':rsIpZhrConnectionsTableOverflow,'rsIpZhrReqStaticConnNotAccepted':rsIpZhrReqStaticConnNotAccepted,'rsIpZhrVirtualIpAsSource':rsIpZhrVirtualIpAsSource,'rsIpZhrNotAllocVirtualIp':rsIpZhrNotAllocVirtualIp,'rsSnmpSetRequestInSpecialCfgState':rsSnmpSetRequestInSpecialCfgState,'rsPingCompletion':rsPingCompletion,'pppSecurityViolation':pppSecurityViolation,'frDLCIStatudChange':frDLCIStatudChange,'papFailedCommunication':papFailedCommunication,'chapFailedCommunication':chapFailedCommunication,'rsWSDRedundancySwitch':rsWSDRedundancySwitch,'rsDhcpAllocationFailure':rsDhcpAllocationFailure,'rlIpFftStnOverflow':rlIpFftStnOverflow,'rlIpFftSubOverflow':rlIpFftSubOverflow,'rlIpxFftStnOverflow':rlIpxFftStnOverflow,'rlIpxFftSubOverflow':rlIpxFftSubOverflow,'rlIpmFftOverflow':rlIpmFftOverflow,'rlPhysicalDescriptionChanged':rlPhysicalDescriptionChanged,'rldot1dStpPortStateForwarding':rldot1dStpPortStateForwarding,'rldot1dStpPortStateNotForwarding':rldot1dStpPortStateNotForwarding,'rlPolicyDropPacketTrap':rlPolicyDropPacketTrap,'rlPolicyForwardPacketTrap':rlPolicyForwardPacketTrap,'rlIgmpProxyTableOverflow':rlIgmpProxyTableOverflow,'rlIgmpV1MsgReceived':rlIgmpV1MsgReceived,'rlVrrpEntriesDeleted':rlVrrpEntriesDeleted,'rlHotSwapTrap':rlHotSwapTrap,'rlTrunkPortAddedTrap':rlTrunkPortAddedTrap,'rlTrunkPortRemovedTrap':rlTrunkPortRemovedTrap,'rlTrunkPortNotCapableTrap':rlTrunkPortNotCapableTrap,'rlLockPortTrap':rlLockPortTrap,'vlanDynVlanAdded':vlanDynVlanAdded,'vlanDynVlanRemoved':vlanDynVlanRemoved,'vlanDynamicToStatic':vlanDynamicToStatic,'vlanStaticToDynamic':vlanStaticToDynamic,'dstrSysLog':dstrSysLog,'rlEnvMonFanStateChange':rlEnvMonFanStateChange,'rlEnvMonPowerSupplyStateChange':rlEnvMonPowerSupplyStateChange,'rlStackStateChange':rlStackStateChange,'rlEnvMonTemperatureRisingAlarm':rlEnvMonTemperatureRisingAlarm,'rlBrgMacAddFailedTrap':rlBrgMacAddFailedTrap,'rldot1xPortStatusAuthorizedTrap':rldot1xPortStatusAuthorizedTrap,'rldot1xPortStatusUnauthorizedTrap':rldot1xPortStatusUnauthorizedTrap,'swIfTablePortLock':swIfTablePortLock,'swIfTablePortUnLock':swIfTablePortUnLock,'rlAAAUserLocked':rlAAAUserLocked,'bpduGuardPortSuspended':bpduGuardPortSuspended,'rldot1xSupplicantMacAuthorizedTrap':rldot1xSupplicantMacAuthorizedTrap,'rldot1xSupplicantMacUnauthorizedTrap':rldot1xSupplicantMacUnauthorizedTrap,'stpLoopbackDetection':stpLoopbackDetection,'stpLoopbackDetectionResolved':stpLoopbackDetectionResolved,'loopbackDetectionPortSuspended':loopbackDetectionPortSuspended,'rlPortSuspended':rlPortSuspended,'rlSpecialBpduDbOverflow':rlSpecialBpduDbOverflow,'rldot1xSupplicantLoggedOutTrap':rldot1xSupplicantLoggedOutTrap,'rldot1xPortControlModeNotAutoTrap':rldot1xPortControlModeNotAutoTrap,'rlEeeLldpMultipleNeighbours':rlEeeLldpMultipleNeighbours,'rlEeeLldpSingleNeighbour':rlEeeLldpSingleNeighbour,'rldot1xSupplicantQuietPeriodTrap':rldot1xSupplicantQuietPeriodTrap,'rlStackVersionUpgradeTrap':rlStackVersionUpgradeTrap,'rlStackVersionDowngradeTrap':rlStackVersionDowngradeTrap,'pseInrushPort':pseInrushPort,'pseOverloadPort':pseOverloadPort,'poePowerNegotiationInfo':poePowerNegotiationInfo,'poePowerNegotiation4Wire':poePowerNegotiation4Wire,'poePowerHWFail':poePowerHWFail,'poePowerNegotiationExpiredInfo':poePowerNegotiationExpiredInfo,'rlStormControlMinRateTrap':rlStormControlMinRateTrap,'rlApBackplanePortResolutionTrap':rlApBackplanePortResolutionTrap,'sfpPortPresent':sfpPortPresent,'sfpPortNotPresent':sfpPortNotPresent,'sfpPortLoss':sfpPortLoss,'sfpPortNotLoss':sfpPortNotLoss,'rlStormControlOccursTrap':rlStormControlOccursTrap,'rlRadiusServTrapAcct':rlRadiusServTrapAcct,'rlRadiusServTrapAuthFailure':rlRadiusServTrapAuthFailure,'rlRadiusServTrapAuthSuccess':rlRadiusServTrapAuthSuccess,'rlRedundantFanStateChange':rlRedundantFanStateChange,'rldot1xSupplicantPortAuthorizedTrap':rldot1xSupplicantPortAuthorizedTrap,'rldot1xSupplicantPortUnauthorizedTrap':rldot1xSupplicantPortUnauthorizedTrap,'rldot1xCredentialTrap':rldot1xCredentialTrap,'poeNonPOEDetected':poeNonPOEDetected,'rlBoxUtilI2CReadFailureTrap':rlBoxUtilI2CReadFailureTrap,'rlBoxUtilI2CWriteFailureTrap':rlBoxUtilI2CWriteFailureTrap,'rlHostHlibCpldUpdateTrap':rlHostHlibCpldUpdateTrap,'rlBrgPvstInconsistencyEnterStateTrap':rlBrgPvstInconsistencyEnterStateTrap,'rlBrgPvstInconsistencyExitStateTrap':rlBrgPvstInconsistencyExitStateTrap,'sfpPortNonCompliant':sfpPortNonCompliant,'poePowerPortHWFail':poePowerPortHWFail,'rlHttpClientCertAddressMismatch':rlHttpClientCertAddressMismatch,'rlAAAwrongReauthentication':rlAAAwrongReauthentication,'poeSSInvalidSignature':poeSSInvalidSignature,'poeDSInvalidSignature':poeDSInvalidSignature,'poeDeniedPower':poeDeniedPower,'poeBTPortDetectSS':poeBTPortDetectSS,'poeBTPortDetectDS':poeBTPortDetectDS,'poeBTPortOnChannel':poeBTPortOnChannel,'poeBTPowerDemoted':poeBTPowerDemoted,'rlImageLogChanges':rlImageLogChanges,'rlSystemClockUpdate':rlSystemClockUpdate,'rlSystemClockOperationalSourceChanged':rlSystemClockOperationalSourceChanged,'rlSystemClockSummerTimeUpdate':rlSystemClockSummerTimeUpdate,'rlSystemClockTimeZoneUpdate':rlSystemClockTimeZoneUpdate,'rlSystemClockSourceListUpdate':rlSystemClockSourceListUpdate,'rlHttpsClientConnectionSetupSuccess':rlHttpsClientConnectionSetupSuccess,'rlHttpsClientConnectionSetupFailure':rlHttpsClientConnectionSetupFailure,'rlHttpsClientConnectionTerminated':rlHttpsClientConnectionTerminated,'rlHttpsServerConnectionSetupSuccess':rlHttpsServerConnectionSetupSuccess,'rlHttpsServerConnectionSetupFailure':rlHttpsServerConnectionSetupFailure,'rlHttpsServerConnectionTerminated':rlHttpsServerConnectionTerminated,'rlHttpsServerUserAuthenticated':rlHttpsServerUserAuthenticated,'rlSshConnectionSetupSuccess':rlSshConnectionSetupSuccess,'rlSshConnectionTerminated':rlSshConnectionTerminated,'rlAAAloginQuietModeOn':rlAAAloginQuietModeOn,'rlAAAloginQuietModeOff':rlAAAloginQuietModeOff,'rlDyingGaspPowerFailure':rlDyingGaspPowerFailure,'vlanAsvTcamRuleFailedTrap':vlanAsvTcamRuleFailedTrap,'rlSecBootEfuseVerFailure':rlSecBootEfuseVerFailure,'rlSecBootEfuseRevokeFailure':rlSecBootEfuseRevokeFailure,'rlSecBootcopyOperationFailure':rlSecBootcopyOperationFailure,'rlSecBootboardTypeFailure':rlSecBootboardTypeFailure,'rlSecBootimageTypeFailure':rlSecBootimageTypeFailure,'rlSecBootimageSyncMemberUnitFailure':rlSecBootimageSyncMemberUnitFailure,'rlSecBootUnitBoardTypeFailure':rlSecBootUnitBoardTypeFailure,'rlSecBootUnitRevokedKeyFailure':rlSecBootUnitRevokedKeyFailure,'rlSecBootStackRevokedKeyFailure':rlSecBootStackRevokedKeyFailure,'vlanAsvTcamQosRuleNoResourceTrap':vlanAsvTcamQosRuleNoResourceTrap,'vlanVoiceTcamQosRuleNoResourceTrap':vlanVoiceTcamQosRuleNoResourceTrap,'rlCoADiscardPacket':rlCoADiscardPacket,'rlCoADiscardDuplicatedPacket':rlCoADiscardDuplicatedPacket,'rlCoARejectRequest':rlCoARejectRequest,'rlCoARejectRequestNasMismatch':rlCoARejectRequestNasMismatch,'rlCoAServerKeyIgnored':rlCoAServerKeyIgnored,'rlCoARejectRequestOverflow':rlCoARejectRequestOverflow,'rlCoADisconnectMultiSession':rlCoADisconnectMultiSession,'rlCoADisconnectSession':rlCoADisconnectSession,'rlCoAReauthenticateSession':rlCoAReauthenticateSession,'rlCoADisablePort':rlCoADisablePort,'rlCoABouncePort':rlCoABouncePort,'rlCoAClientServerKey':rlCoAClientServerKey,'rlCoADefaultServerKey':rlCoADefaultServerKey})