_B='Integer32'
_A='current'
if'mibBuilder'not in globals():import sys;sys.stderr.write(__doc__);sys.exit(1)
Integer,OctetString,ObjectIdentifier=mibBuilder.importSymbols('ASN1','Integer','OctetString','ObjectIdentifier')
NamedValues,=mibBuilder.importSymbols('ASN1-ENUMERATION','NamedValues')
ConstraintsIntersection,ConstraintsUnion,SingleValueConstraint,ValueRangeConstraint,ValueSizeConstraint=mibBuilder.importSymbols('ASN1-REFINEMENT','ConstraintsIntersection','ConstraintsUnion','SingleValueConstraint','ValueRangeConstraint','ValueSizeConstraint')
device,=mibBuilder.importSymbols('ANIROOT-MIB','device')
ModuleCompliance,NotificationGroup=mibBuilder.importSymbols('SNMPv2-CONF','ModuleCompliance','NotificationGroup')
Bits,Counter32,Counter64,Gauge32,Integer32,IpAddress,ModuleIdentity,MibIdentifier,NotificationType,ObjectIdentity,MibScalar,MibTable,MibTableRow,MibTableColumn,TimeTicks,Unsigned32,iso=mibBuilder.importSymbols('SNMPv2-SMI','Bits','Counter32','Counter64','Gauge32',_B,'IpAddress','ModuleIdentity','MibIdentifier','NotificationType','ObjectIdentity','MibScalar','MibTable','MibTableRow','MibTableColumn','TimeTicks','Unsigned32','iso')
DisplayString,PhysAddress,TextualConvention=mibBuilder.importSymbols('SNMPv2-TC','DisplayString','PhysAddress','TextualConvention')
aniDevTrap=ModuleIdentity((1,3,6,1,4,1,4325,2,10))
_AniDevTraps_ObjectIdentity=ObjectIdentity
aniDevTraps=_AniDevTraps_ObjectIdentity((1,3,6,1,4,1,4325,2,10,0))
_AniDevTrapControl_ObjectIdentity=ObjectIdentity
aniDevTrapControl=_AniDevTrapControl_ObjectIdentity((1,3,6,1,4,1,4325,2,10,1))
class _AniDevControlTrapGeneration_Type(Integer32):subtypeSpec=Integer32.subtypeSpec;subtypeSpec+=ConstraintsUnion(SingleValueConstraint(*(1,2)));namedValues=NamedValues(*(('enable',1),('disable',2)))
_AniDevControlTrapGeneration_Type.__name__=_B
_AniDevControlTrapGeneration_Object=MibScalar
aniDevControlTrapGeneration=_AniDevControlTrapGeneration_Object((1,3,6,1,4,1,4325,2,10,1,1),_AniDevControlTrapGeneration_Type())
aniDevControlTrapGeneration.setMaxAccess('read-write')
if mibBuilder.loadTexts:aniDevControlTrapGeneration.setStatus(_A)
aniDevTrapSuSyncAcquired=NotificationType((1,3,6,1,4,1,4325,2,10,0,1))
if mibBuilder.loadTexts:aniDevTrapSuSyncAcquired.setStatus(_A)
aniDevTrapBsuSuUp=NotificationType((1,3,6,1,4,1,4325,2,10,0,2))
if mibBuilder.loadTexts:aniDevTrapBsuSuUp.setStatus(_A)
aniDevTrapBsuSuDown=NotificationType((1,3,6,1,4,1,4325,2,10,0,3))
if mibBuilder.loadTexts:aniDevTrapBsuSuDown.setStatus(_A)
aniDevTrapSuBsuUp=NotificationType((1,3,6,1,4,1,4325,2,10,0,4))
if mibBuilder.loadTexts:aniDevTrapSuBsuUp.setStatus(_A)
aniDevTrapSuBsuDown=NotificationType((1,3,6,1,4,1,4325,2,10,0,5))
if mibBuilder.loadTexts:aniDevTrapSuBsuDown.setStatus(_A)
aniDevTrapDhcpFailure=NotificationType((1,3,6,1,4,1,4325,2,10,0,6))
if mibBuilder.loadTexts:aniDevTrapDhcpFailure.setStatus(_A)
aniDevTrapConfigDownloadFailure=NotificationType((1,3,6,1,4,1,4325,2,10,0,7))
if mibBuilder.loadTexts:aniDevTrapConfigDownloadFailure.setStatus(_A)
aniDevTrapRamTooLow=NotificationType((1,3,6,1,4,1,4325,2,10,0,8))
if mibBuilder.loadTexts:aniDevTrapRamTooLow.setStatus(_A)
aniDevTrapRamNormal=NotificationType((1,3,6,1,4,1,4325,2,10,0,9))
if mibBuilder.loadTexts:aniDevTrapRamNormal.setStatus(_A)
aniDevTrapModemPllNotLocked=NotificationType((1,3,6,1,4,1,4325,2,10,0,10))
if mibBuilder.loadTexts:aniDevTrapModemPllNotLocked.setStatus(_A)
aniDevTrapModemPllNotLockedClear=NotificationType((1,3,6,1,4,1,4325,2,10,0,11))
if mibBuilder.loadTexts:aniDevTrapModemPllNotLockedClear.setStatus(_A)
aniDevTrapRadioVoltReg=NotificationType((1,3,6,1,4,1,4325,2,10,0,12))
if mibBuilder.loadTexts:aniDevTrapRadioVoltReg.setStatus(_A)
aniDevTrapRadioVoltRegClear=NotificationType((1,3,6,1,4,1,4325,2,10,0,13))
if mibBuilder.loadTexts:aniDevTrapRadioVoltRegClear.setStatus(_A)
aniDevTrapRadioSynthNotLocked=NotificationType((1,3,6,1,4,1,4325,2,10,0,14))
if mibBuilder.loadTexts:aniDevTrapRadioSynthNotLocked.setStatus(_A)
aniDevTrapRadioSynthNotLockedClear=NotificationType((1,3,6,1,4,1,4325,2,10,0,15))
if mibBuilder.loadTexts:aniDevTrapRadioSynthNotLockedClear.setStatus(_A)
aniDevTrapBsuFanStatus=NotificationType((1,3,6,1,4,1,4325,2,10,0,16))
if mibBuilder.loadTexts:aniDevTrapBsuFanStatus.setStatus(_A)
aniDevTrapBsuFanStatusClear=NotificationType((1,3,6,1,4,1,4325,2,10,0,17))
if mibBuilder.loadTexts:aniDevTrapBsuFanStatusClear.setStatus(_A)
aniDevTrapBsuDc12vStatus=NotificationType((1,3,6,1,4,1,4325,2,10,0,18))
if mibBuilder.loadTexts:aniDevTrapBsuDc12vStatus.setStatus(_A)
aniDevTrapBsuDc12vStatusClear=NotificationType((1,3,6,1,4,1,4325,2,10,0,19))
if mibBuilder.loadTexts:aniDevTrapBsuDc12vStatusClear.setStatus(_A)
aniDevTrapMssPllNotLocked=NotificationType((1,3,6,1,4,1,4325,2,10,0,20))
if mibBuilder.loadTexts:aniDevTrapMssPllNotLocked.setStatus(_A)
aniDevTrapMssPllNotLockedClear=NotificationType((1,3,6,1,4,1,4325,2,10,0,21))
if mibBuilder.loadTexts:aniDevTrapMssPllNotLockedClear.setStatus(_A)
aniDevTrapBsuTempTooLow=NotificationType((1,3,6,1,4,1,4325,2,10,0,22))
if mibBuilder.loadTexts:aniDevTrapBsuTempTooLow.setStatus(_A)
aniDevTrapBsuTempTooHigh=NotificationType((1,3,6,1,4,1,4325,2,10,0,23))
if mibBuilder.loadTexts:aniDevTrapBsuTempTooHigh.setStatus(_A)
aniDevTrapBsuTempNormal=NotificationType((1,3,6,1,4,1,4325,2,10,0,24))
if mibBuilder.loadTexts:aniDevTrapBsuTempNormal.setStatus(_A)
aniDevTrapFlashSpaceTooLow=NotificationType((1,3,6,1,4,1,4325,2,10,0,25))
if mibBuilder.loadTexts:aniDevTrapFlashSpaceTooLow.setStatus(_A)
aniDevTrapFlashSpaceNormal=NotificationType((1,3,6,1,4,1,4325,2,10,0,26))
if mibBuilder.loadTexts:aniDevTrapFlashSpaceNormal.setStatus(_A)
aniDevTrapNvramCorrupted=NotificationType((1,3,6,1,4,1,4325,2,10,0,27))
if mibBuilder.loadTexts:aniDevTrapNvramCorrupted.setStatus(_A)
aniDevTrapNvramCorruptionClear=NotificationType((1,3,6,1,4,1,4325,2,10,0,28))
if mibBuilder.loadTexts:aniDevTrapNvramCorruptionClear.setStatus(_A)
aniDevTrapFileSysCorrupted=NotificationType((1,3,6,1,4,1,4325,2,10,0,29))
if mibBuilder.loadTexts:aniDevTrapFileSysCorrupted.setStatus(_A)
aniDevTrapFileSysCorruptionClear=NotificationType((1,3,6,1,4,1,4325,2,10,0,30))
if mibBuilder.loadTexts:aniDevTrapFileSysCorruptionClear.setStatus(_A)
aniDevTrapSmtpConnectFailure=NotificationType((1,3,6,1,4,1,4325,2,10,0,31))
if mibBuilder.loadTexts:aniDevTrapSmtpConnectFailure.setStatus(_A)
aniDevTrapSmtpDisabled=NotificationType((1,3,6,1,4,1,4325,2,10,0,32))
if mibBuilder.loadTexts:aniDevTrapSmtpDisabled.setStatus(_A)
aniDevTrapSwWatchdogReset=NotificationType((1,3,6,1,4,1,4325,2,10,0,33))
if mibBuilder.loadTexts:aniDevTrapSwWatchdogReset.setStatus(_A)
aniDevTrapNatFailure=NotificationType((1,3,6,1,4,1,4325,2,10,0,34))
if mibBuilder.loadTexts:aniDevTrapNatFailure.setStatus(_A)
aniDevTrapCurrentImageCorrupted=NotificationType((1,3,6,1,4,1,4325,2,10,0,35))
if mibBuilder.loadTexts:aniDevTrapCurrentImageCorrupted.setStatus(_A)
aniDevTrapBsuSuFailedReg=NotificationType((1,3,6,1,4,1,4325,2,10,0,36))
if mibBuilder.loadTexts:aniDevTrapBsuSuFailedReg.setStatus(_A)
aniDevTrapDefaultConfigFileNotFound=NotificationType((1,3,6,1,4,1,4325,2,10,0,37))
if mibBuilder.loadTexts:aniDevTrapDefaultConfigFileNotFound.setStatus(_A)
aniDevTrapCurrentBsuState=NotificationType((1,3,6,1,4,1,4325,2,10,0,38))
if mibBuilder.loadTexts:aniDevTrapCurrentBsuState.setStatus(_A)
aniDevTrapCurrentSuState=NotificationType((1,3,6,1,4,1,4325,2,10,0,39))
if mibBuilder.loadTexts:aniDevTrapCurrentSuState.setStatus(_A)
aniDevTrapMemBufferTooLow=NotificationType((1,3,6,1,4,1,4325,2,10,0,40))
if mibBuilder.loadTexts:aniDevTrapMemBufferTooLow.setStatus(_A)
aniDevTrapMemBufferNormal=NotificationType((1,3,6,1,4,1,4325,2,10,0,41))
if mibBuilder.loadTexts:aniDevTrapMemBufferNormal.setStatus(_A)
aniDevTrapConfigFileVersionCheckFailure=NotificationType((1,3,6,1,4,1,4325,2,10,0,42))
if mibBuilder.loadTexts:aniDevTrapConfigFileVersionCheckFailure.setStatus(_A)
aniDevTrapDefaultFileVersionCheckFailure=NotificationType((1,3,6,1,4,1,4325,2,10,0,43))
if mibBuilder.loadTexts:aniDevTrapDefaultFileVersionCheckFailure.setStatus(_A)
aniDevTrapConfigFileUploadFailure=NotificationType((1,3,6,1,4,1,4325,2,10,0,44))
if mibBuilder.loadTexts:aniDevTrapConfigFileUploadFailure.setStatus(_A)
aniDevTrapConfigFileUploadChecksumFailure=NotificationType((1,3,6,1,4,1,4325,2,10,0,45))
if mibBuilder.loadTexts:aniDevTrapConfigFileUploadChecksumFailure.setStatus(_A)
aniDevTrapRunningBaselineImage=NotificationType((1,3,6,1,4,1,4325,2,10,0,46))
if mibBuilder.loadTexts:aniDevTrapRunningBaselineImage.setStatus(_A)
aniDevTrapPowerSupplyFailure=NotificationType((1,3,6,1,4,1,4325,2,10,0,48))
if mibBuilder.loadTexts:aniDevTrapPowerSupplyFailure.setStatus(_A)
aniDevTrapPowerSupplyNormal=NotificationType((1,3,6,1,4,1,4325,2,10,0,49))
if mibBuilder.loadTexts:aniDevTrapPowerSupplyNormal.setStatus(_A)
aniDevTrapRealtimeClockFailure=NotificationType((1,3,6,1,4,1,4325,2,10,0,50))
if mibBuilder.loadTexts:aniDevTrapRealtimeClockFailure.setStatus(_A)
aniDevTrapRealtimeClockNormal=NotificationType((1,3,6,1,4,1,4325,2,10,0,51))
if mibBuilder.loadTexts:aniDevTrapRealtimeClockNormal.setStatus(_A)
aniDevTrapModelNumFailure=NotificationType((1,3,6,1,4,1,4325,2,10,0,53))
if mibBuilder.loadTexts:aniDevTrapModelNumFailure.setStatus(_A)
aniDevTrapConfigParseFailure=NotificationType((1,3,6,1,4,1,4325,2,10,0,55))
if mibBuilder.loadTexts:aniDevTrapConfigParseFailure.setStatus(_A)
aniDevUpdateInventory=NotificationType((1,3,6,1,4,1,4325,2,10,0,56))
if mibBuilder.loadTexts:aniDevUpdateInventory.setStatus(_A)
aniDevTrapPppFailure=NotificationType((1,3,6,1,4,1,4325,2,10,0,57))
if mibBuilder.loadTexts:aniDevTrapPppFailure.setStatus(_A)
aniDevTrapPppStatus=NotificationType((1,3,6,1,4,1,4325,2,10,0,58))
if mibBuilder.loadTexts:aniDevTrapPppStatus.setStatus(_A)
aniDevTrapFrequencyChange=NotificationType((1,3,6,1,4,1,4325,2,10,0,59))
if mibBuilder.loadTexts:aniDevTrapFrequencyChange.setStatus(_A)
aniDevTrapPPPoeSessionUp=NotificationType((1,3,6,1,4,1,4325,2,10,0,62))
if mibBuilder.loadTexts:aniDevTrapPPPoeSessionUp.setStatus(_A)
aniDevTrapPPPoeOfferError=NotificationType((1,3,6,1,4,1,4325,2,10,0,63))
if mibBuilder.loadTexts:aniDevTrapPPPoeOfferError.setStatus(_A)
aniDevTrapPPPoeSessionTerminate=NotificationType((1,3,6,1,4,1,4325,2,10,0,64))
if mibBuilder.loadTexts:aniDevTrapPPPoeSessionTerminate.setStatus(_A)
aniDevTrapEtherAutoNegotiate=NotificationType((1,3,6,1,4,1,4325,2,10,0,65))
if mibBuilder.loadTexts:aniDevTrapEtherAutoNegotiate.setStatus(_A)
aniDevTrapRadioInitError=NotificationType((1,3,6,1,4,1,4325,2,10,0,66))
if mibBuilder.loadTexts:aniDevTrapRadioInitError.setStatus(_A)
aniDevTrapMaxPowerError=NotificationType((1,3,6,1,4,1,4325,2,10,0,67))
if mibBuilder.loadTexts:aniDevTrapMaxPowerError.setStatus(_A)
aniDevTrapMaxPowerErrorClear=NotificationType((1,3,6,1,4,1,4325,2,10,0,68))
if mibBuilder.loadTexts:aniDevTrapMaxPowerErrorClear.setStatus(_A)
aniDevTrapAgcTableNotCalibrated=NotificationType((1,3,6,1,4,1,4325,2,10,0,69))
if mibBuilder.loadTexts:aniDevTrapAgcTableNotCalibrated.setStatus(_A)
aniDevTrapFreqTableInvalidEntry=NotificationType((1,3,6,1,4,1,4325,2,10,0,70))
if mibBuilder.loadTexts:aniDevTrapFreqTableInvalidEntry.setStatus(_A)
aniDevTrapHtmlUnzippedError=NotificationType((1,3,6,1,4,1,4325,2,10,0,71))
if mibBuilder.loadTexts:aniDevTrapHtmlUnzippedError.setStatus(_A)
aniDevTrapBootLineBackupUpdated=NotificationType((1,3,6,1,4,1,4325,2,10,0,72))
if mibBuilder.loadTexts:aniDevTrapBootLineBackupUpdated.setStatus(_A)
aniDevTrapBootLineRestoredFromBackup=NotificationType((1,3,6,1,4,1,4325,2,10,0,73))
if mibBuilder.loadTexts:aniDevTrapBootLineRestoredFromBackup.setStatus(_A)
aniDevTrapNvramBackupUpdated=NotificationType((1,3,6,1,4,1,4325,2,10,0,74))
if mibBuilder.loadTexts:aniDevTrapNvramBackupUpdated.setStatus(_A)
aniDevTrapNvramRestoredFromBackup=NotificationType((1,3,6,1,4,1,4325,2,10,0,75))
if mibBuilder.loadTexts:aniDevTrapNvramRestoredFromBackup.setStatus(_A)
mibBuilder.exportSymbols('DEVTRAPS-MIB',**{'aniDevTrap':aniDevTrap,'aniDevTraps':aniDevTraps,'aniDevTrapSuSyncAcquired':aniDevTrapSuSyncAcquired,'aniDevTrapBsuSuUp':aniDevTrapBsuSuUp,'aniDevTrapBsuSuDown':aniDevTrapBsuSuDown,'aniDevTrapSuBsuUp':aniDevTrapSuBsuUp,'aniDevTrapSuBsuDown':aniDevTrapSuBsuDown,'aniDevTrapDhcpFailure':aniDevTrapDhcpFailure,'aniDevTrapConfigDownloadFailure':aniDevTrapConfigDownloadFailure,'aniDevTrapRamTooLow':aniDevTrapRamTooLow,'aniDevTrapRamNormal':aniDevTrapRamNormal,'aniDevTrapModemPllNotLocked':aniDevTrapModemPllNotLocked,'aniDevTrapModemPllNotLockedClear':aniDevTrapModemPllNotLockedClear,'aniDevTrapRadioVoltReg':aniDevTrapRadioVoltReg,'aniDevTrapRadioVoltRegClear':aniDevTrapRadioVoltRegClear,'aniDevTrapRadioSynthNotLocked':aniDevTrapRadioSynthNotLocked,'aniDevTrapRadioSynthNotLockedClear':aniDevTrapRadioSynthNotLockedClear,'aniDevTrapBsuFanStatus':aniDevTrapBsuFanStatus,'aniDevTrapBsuFanStatusClear':aniDevTrapBsuFanStatusClear,'aniDevTrapBsuDc12vStatus':aniDevTrapBsuDc12vStatus,'aniDevTrapBsuDc12vStatusClear':aniDevTrapBsuDc12vStatusClear,'aniDevTrapMssPllNotLocked':aniDevTrapMssPllNotLocked,'aniDevTrapMssPllNotLockedClear':aniDevTrapMssPllNotLockedClear,'aniDevTrapBsuTempTooLow':aniDevTrapBsuTempTooLow,'aniDevTrapBsuTempTooHigh':aniDevTrapBsuTempTooHigh,'aniDevTrapBsuTempNormal':aniDevTrapBsuTempNormal,'aniDevTrapFlashSpaceTooLow':aniDevTrapFlashSpaceTooLow,'aniDevTrapFlashSpaceNormal':aniDevTrapFlashSpaceNormal,'aniDevTrapNvramCorrupted':aniDevTrapNvramCorrupted,'aniDevTrapNvramCorruptionClear':aniDevTrapNvramCorruptionClear,'aniDevTrapFileSysCorrupted':aniDevTrapFileSysCorrupted,'aniDevTrapFileSysCorruptionClear':aniDevTrapFileSysCorruptionClear,'aniDevTrapSmtpConnectFailure':aniDevTrapSmtpConnectFailure,'aniDevTrapSmtpDisabled':aniDevTrapSmtpDisabled,'aniDevTrapSwWatchdogReset':aniDevTrapSwWatchdogReset,'aniDevTrapNatFailure':aniDevTrapNatFailure,'aniDevTrapCurrentImageCorrupted':aniDevTrapCurrentImageCorrupted,'aniDevTrapBsuSuFailedReg':aniDevTrapBsuSuFailedReg,'aniDevTrapDefaultConfigFileNotFound':aniDevTrapDefaultConfigFileNotFound,'aniDevTrapCurrentBsuState':aniDevTrapCurrentBsuState,'aniDevTrapCurrentSuState':aniDevTrapCurrentSuState,'aniDevTrapMemBufferTooLow':aniDevTrapMemBufferTooLow,'aniDevTrapMemBufferNormal':aniDevTrapMemBufferNormal,'aniDevTrapConfigFileVersionCheckFailure':aniDevTrapConfigFileVersionCheckFailure,'aniDevTrapDefaultFileVersionCheckFailure':aniDevTrapDefaultFileVersionCheckFailure,'aniDevTrapConfigFileUploadFailure':aniDevTrapConfigFileUploadFailure,'aniDevTrapConfigFileUploadChecksumFailure':aniDevTrapConfigFileUploadChecksumFailure,'aniDevTrapRunningBaselineImage':aniDevTrapRunningBaselineImage,'aniDevTrapPowerSupplyFailure':aniDevTrapPowerSupplyFailure,'aniDevTrapPowerSupplyNormal':aniDevTrapPowerSupplyNormal,'aniDevTrapRealtimeClockFailure':aniDevTrapRealtimeClockFailure,'aniDevTrapRealtimeClockNormal':aniDevTrapRealtimeClockNormal,'aniDevTrapModelNumFailure':aniDevTrapModelNumFailure,'aniDevTrapConfigParseFailure':aniDevTrapConfigParseFailure,'aniDevUpdateInventory':aniDevUpdateInventory,'aniDevTrapPppFailure':aniDevTrapPppFailure,'aniDevTrapPppStatus':aniDevTrapPppStatus,'aniDevTrapFrequencyChange':aniDevTrapFrequencyChange,'aniDevTrapPPPoeSessionUp':aniDevTrapPPPoeSessionUp,'aniDevTrapPPPoeOfferError':aniDevTrapPPPoeOfferError,'aniDevTrapPPPoeSessionTerminate':aniDevTrapPPPoeSessionTerminate,'aniDevTrapEtherAutoNegotiate':aniDevTrapEtherAutoNegotiate,'aniDevTrapRadioInitError':aniDevTrapRadioInitError,'aniDevTrapMaxPowerError':aniDevTrapMaxPowerError,'aniDevTrapMaxPowerErrorClear':aniDevTrapMaxPowerErrorClear,'aniDevTrapAgcTableNotCalibrated':aniDevTrapAgcTableNotCalibrated,'aniDevTrapFreqTableInvalidEntry':aniDevTrapFreqTableInvalidEntry,'aniDevTrapHtmlUnzippedError':aniDevTrapHtmlUnzippedError,'aniDevTrapBootLineBackupUpdated':aniDevTrapBootLineBackupUpdated,'aniDevTrapBootLineRestoredFromBackup':aniDevTrapBootLineRestoredFromBackup,'aniDevTrapNvramBackupUpdated':aniDevTrapNvramBackupUpdated,'aniDevTrapNvramRestoredFromBackup':aniDevTrapNvramRestoredFromBackup,'aniDevTrapControl':aniDevTrapControl,'aniDevControlTrapGeneration':aniDevControlTrapGeneration})