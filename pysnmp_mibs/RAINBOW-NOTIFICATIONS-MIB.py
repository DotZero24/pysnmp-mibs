_X='obsolete'
_W='rbTrapSetFailureReason'
_V='rbLicenseId'
_U='rbRadiusAuthServerAddress'
_T='rbRadiusAcctServerAddress'
_S='rbTrapLedStatus'
_R='rbTrapIpAddress'
_Q='rbSuTxPower'
_P='rbSuSysName'
_O='rbSubscriberIdx'
_N='rbSubscriberID'
_M='RAINBOW-RADIUS-MIB'
_L='rbSuMacAddr'
_K='rbServiceName'
_J='rbServiceIdx'
_I='rbChannelId'
_H='RAINBOW-SERVICES-MIB'
_G='rbTrapAdditionalInfo'
_F='current'
_E='rbTrapSource'
_D='rbTrapSeverity'
_C='rbTrapSeqNumber'
_B='rbTrapCategory'
_A='RAINBOW-MIB'
if'mibBuilder'not in globals():import sys;sys.stderr.write(__doc__);sys.exit(1)
Integer,OctetString,ObjectIdentifier=mibBuilder.importSymbols('ASN1','Integer','OctetString','ObjectIdentifier')
NamedValues,=mibBuilder.importSymbols('ASN1-ENUMERATION','NamedValues')
ConstraintsIntersection,ConstraintsUnion,SingleValueConstraint,ValueRangeConstraint,ValueSizeConstraint=mibBuilder.importSymbols('ASN1-REFINEMENT','ConstraintsIntersection','ConstraintsUnion','SingleValueConstraint','ValueRangeConstraint','ValueSizeConstraint')
rainbow,rbChannelId,rbLicenseId,rbSuMacAddr,rbSuSysName,rbSuTxPower,rbTrapAdditionalInfo,rbTrapCategory,rbTrapIpAddress,rbTrapLedStatus,rbTrapSeqNumber,rbTrapSetFailureReason,rbTrapSeverity,rbTrapSource=mibBuilder.importSymbols(_A,'rainbow',_I,_V,_L,_P,_Q,_G,_B,_R,_S,_C,_W,_D,_E)
rbRadiusAcctServerAddress,rbRadiusAuthServerAddress=mibBuilder.importSymbols(_M,_T,_U)
rbServiceIdx,rbServiceName,rbSubscriberID,rbSubscriberIdx=mibBuilder.importSymbols(_H,_J,_K,_N,_O)
ModuleCompliance,NotificationGroup=mibBuilder.importSymbols('SNMPv2-CONF','ModuleCompliance','NotificationGroup')
Bits,Counter32,Counter64,Gauge32,Integer32,IpAddress,ModuleIdentity,MibIdentifier,NotificationType,ObjectIdentity,MibScalar,MibTable,MibTableRow,MibTableColumn,TimeTicks,Unsigned32,iso=mibBuilder.importSymbols('SNMPv2-SMI','Bits','Counter32','Counter64','Gauge32','Integer32','IpAddress','ModuleIdentity','MibIdentifier','NotificationType','ObjectIdentity','MibScalar','MibTable','MibTableRow','MibTableColumn','TimeTicks','Unsigned32','iso')
DisplayString,PhysAddress,TextualConvention=mibBuilder.importSymbols('SNMPv2-TC','DisplayString','PhysAddress','TextualConvention')
rbNotifications=ModuleIdentity((1,3,6,1,4,1,12394,1,2,0))
if mibBuilder.loadTexts:rbNotifications.setRevisions(('2006-06-06 15:00',))
rbResetOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,1))
rbResetOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbResetOn.setStatus(_F)
rbDiagnosticsHwFaultOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,2))
rbDiagnosticsHwFaultOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G),(_A,_S)))
if mibBuilder.loadTexts:rbDiagnosticsHwFaultOn.setStatus(_F)
rbDiagnosticsHwFaultOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,3))
rbDiagnosticsHwFaultOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G),(_A,_S)))
if mibBuilder.loadTexts:rbDiagnosticsHwFaultOff.setStatus(_F)
rbMonitorAccessOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,4))
rbMonitorAccessOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G),(_A,_R)))
if mibBuilder.loadTexts:rbMonitorAccessOn.setStatus(_F)
rbMonitorAccessOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,5))
rbMonitorAccessOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G),(_A,_R)))
if mibBuilder.loadTexts:rbMonitorAccessOff.setStatus(_F)
rbAuNetworkEntryStatus=NotificationType((1,3,6,1,4,1,12394,1,2,0,6))
rbAuNetworkEntryStatus.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbAuNetworkEntryStatus.setStatus(_F)
rbModeConflictOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,7))
rbModeConflictOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbModeConflictOn.setStatus(_F)
rbModeConflictOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,8))
rbModeConflictOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbModeConflictOff.setStatus(_F)
rbShelfCardExtractionOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,21))
rbShelfCardExtractionOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbShelfCardExtractionOn.setStatus(_F)
rbShelfCardInsertionOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,22))
rbShelfCardInsertionOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbShelfCardInsertionOn.setStatus(_F)
rbShelfPeripheralEquipmentFaultOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,23))
rbShelfPeripheralEquipmentFaultOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbShelfPeripheralEquipmentFaultOn.setStatus(_F)
rbShelfPeripherallEquipmentFaultOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,24))
rbShelfPeripherallEquipmentFaultOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbShelfPeripherallEquipmentFaultOff.setStatus(_F)
rbShelfEnvParamFaultOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,25))
rbShelfEnvParamFaultOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbShelfEnvParamFaultOn.setStatus(_F)
rbShelfEnvParamFaultOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,26))
rbShelfEnvParamFaultOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbShelfEnvParamFaultOff.setStatus(_F)
rbConfigurationChanged=NotificationType((1,3,6,1,4,1,12394,1,2,0,41))
rbConfigurationChanged.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbConfigurationChanged.setStatus(_F)
rbParameterSetFailure=NotificationType((1,3,6,1,4,1,12394,1,2,0,42))
rbParameterSetFailure.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_W)))
if mibBuilder.loadTexts:rbParameterSetFailure.setStatus(_F)
rbMbstLicense=NotificationType((1,3,6,1,4,1,12394,1,2,0,50))
rbMbstLicense.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbMbstLicense.setStatus(_F)
rbMbstCPEQuantityExceed=NotificationType((1,3,6,1,4,1,12394,1,2,0,51))
rbMbstCPEQuantityExceed.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_L)))
if mibBuilder.loadTexts:rbMbstCPEQuantityExceed.setStatus(_F)
rbLicenseFileLoadStatus=NotificationType((1,3,6,1,4,1,12394,1,2,0,52))
rbLicenseFileLoadStatus.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbLicenseFileLoadStatus.setStatus(_F)
rbOduCrcErrorOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,61))
rbOduCrcErrorOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_I)))
if mibBuilder.loadTexts:rbOduCrcErrorOn.setStatus(_X)
rbOduCrcErrorOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,62))
rbOduCrcErrorOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_I)))
if mibBuilder.loadTexts:rbOduCrcErrorOff.setStatus(_X)
rbOduCommErrorOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,63))
rbOduCommErrorOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_I)))
if mibBuilder.loadTexts:rbOduCommErrorOn.setStatus(_F)
rbOduCommErrorOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,64))
rbOduCommErrorOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_I)))
if mibBuilder.loadTexts:rbOduCommErrorOff.setStatus(_F)
rbOduBandMissmatchOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,65))
rbOduBandMissmatchOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_I)))
if mibBuilder.loadTexts:rbOduBandMissmatchOn.setStatus(_F)
rbOduBandMissmatchOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,66))
rbOduBandMissmatchOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_I)))
if mibBuilder.loadTexts:rbOduBandMissmatchOff.setStatus(_F)
rbOduPowerMismatch=NotificationType((1,3,6,1,4,1,12394,1,2,0,67))
rbOduPowerMismatch.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_I)))
if mibBuilder.loadTexts:rbOduPowerMismatch.setStatus(_F)
rbOduFailureOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,68))
rbOduFailureOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_I),(_A,_G)))
if mibBuilder.loadTexts:rbOduFailureOn.setStatus(_F)
rbOduFailureOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,69))
rbOduFailureOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_I)))
if mibBuilder.loadTexts:rbOduFailureOff.setStatus(_F)
rbSuMaxTxPowerReached=NotificationType((1,3,6,1,4,1,12394,1,2,0,81))
rbSuMaxTxPowerReached.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_Q)))
if mibBuilder.loadTexts:rbSuMaxTxPowerReached.setStatus(_F)
rbSuMinTxPowerReached=NotificationType((1,3,6,1,4,1,12394,1,2,0,82))
rbSuMinTxPowerReached.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_Q)))
if mibBuilder.loadTexts:rbSuMinTxPowerReached.setStatus(_F)
rbSuNetworkEntryStatus=NotificationType((1,3,6,1,4,1,12394,1,2,0,83))
rbSuNetworkEntryStatus.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbSuNetworkEntryStatus.setStatus(_F)
rbSuLicense=NotificationType((1,3,6,1,4,1,12394,1,2,0,84))
rbSuLicense.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G),(_A,_V)))
if mibBuilder.loadTexts:rbSuLicense.setStatus(_F)
rbSuDuplicateName=NotificationType((1,3,6,1,4,1,12394,1,2,0,85))
rbSuDuplicateName.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_L),(_A,_P),(_A,_P)))
if mibBuilder.loadTexts:rbSuDuplicateName.setStatus(_F)
rbSwDownloadStart=NotificationType((1,3,6,1,4,1,12394,1,2,0,101))
rbSwDownloadStart.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbSwDownloadStart.setStatus(_F)
rbSwDownloadEnd=NotificationType((1,3,6,1,4,1,12394,1,2,0,102))
rbSwDownloadEnd.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbSwDownloadEnd.setStatus(_F)
rbSwDownloadError=NotificationType((1,3,6,1,4,1,12394,1,2,0,103))
rbSwDownloadError.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbSwDownloadError.setStatus(_F)
rbSwSwitchFailed=NotificationType((1,3,6,1,4,1,12394,1,2,0,104))
rbSwSwitchFailed.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbSwSwitchFailed.setStatus(_F)
rbSwSwitchSucceed=NotificationType((1,3,6,1,4,1,12394,1,2,0,105))
rbSwSwitchSucceed.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbSwSwitchSucceed.setStatus(_F)
rbBERTestFinished=NotificationType((1,3,6,1,4,1,12394,1,2,0,106))
rbBERTestFinished.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbBERTestFinished.setStatus(_F)
rbBERTestStarted=NotificationType((1,3,6,1,4,1,12394,1,2,0,107))
rbBERTestStarted.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbBERTestStarted.setStatus(_F)
rbSwFileConflict=NotificationType((1,3,6,1,4,1,12394,1,2,0,108))
rbSwFileConflict.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbSwFileConflict.setStatus(_F)
rbXMLDownloadResult=NotificationType((1,3,6,1,4,1,12394,1,2,0,109))
rbXMLDownloadResult.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbXMLDownloadResult.setStatus(_F)
rbFreqBandDownloadResult=NotificationType((1,3,6,1,4,1,12394,1,2,0,110))
rbFreqBandDownloadResult.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbFreqBandDownloadResult.setStatus(_F)
rbServiceDown=NotificationType((1,3,6,1,4,1,12394,1,2,0,111))
rbServiceDown.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_H,_J),(_H,_O),(_H,_K),(_H,_N)))
if mibBuilder.loadTexts:rbServiceDown.setStatus(_F)
rbServiceUp=NotificationType((1,3,6,1,4,1,12394,1,2,0,112))
rbServiceUp.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_H,_J),(_H,_O),(_H,_K),(_H,_N)))
if mibBuilder.loadTexts:rbServiceUp.setStatus(_F)
rbServiceChanged=NotificationType((1,3,6,1,4,1,12394,1,2,0,113))
rbServiceChanged.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G),(_H,_J),(_H,_O),(_H,_K),(_H,_N)))
if mibBuilder.loadTexts:rbServiceChanged.setStatus(_F)
rbServiceGeneralError=NotificationType((1,3,6,1,4,1,12394,1,2,0,114))
rbServiceGeneralError.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G),(_H,_J),(_H,_O),(_H,_K),(_H,_N)))
if mibBuilder.loadTexts:rbServiceGeneralError.setStatus(_F)
rbNetworkingError=NotificationType((1,3,6,1,4,1,12394,1,2,0,115))
rbNetworkingError.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G)))
if mibBuilder.loadTexts:rbNetworkingError.setStatus(_F)
rbSwitchedAuthenticationServer=NotificationType((1,3,6,1,4,1,12394,1,2,0,117))
rbSwitchedAuthenticationServer.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbSwitchedAuthenticationServer.setStatus(_F)
rbSwitchedAccountingServer=NotificationType((1,3,6,1,4,1,12394,1,2,0,118))
rbSwitchedAccountingServer.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbSwitchedAccountingServer.setStatus(_F)
rbServiceEstablishmentFailure=NotificationType((1,3,6,1,4,1,12394,1,2,0,119))
rbServiceEstablishmentFailure.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G),(_H,_J),(_H,_K)))
if mibBuilder.loadTexts:rbServiceEstablishmentFailure.setStatus(_F)
rbUserAuthenticationTimeout=NotificationType((1,3,6,1,4,1,12394,1,2,0,120))
rbUserAuthenticationTimeout.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_G),(_A,_L)))
if mibBuilder.loadTexts:rbUserAuthenticationTimeout.setStatus(_F)
rbUserAuthenticationReject=NotificationType((1,3,6,1,4,1,12394,1,2,0,121))
rbUserAuthenticationReject.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_A,_L)))
if mibBuilder.loadTexts:rbUserAuthenticationReject.setStatus(_F)
rbAuthenticationServerKeepAliveTimeoutOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,122))
rbAuthenticationServerKeepAliveTimeoutOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_M,_U)))
if mibBuilder.loadTexts:rbAuthenticationServerKeepAliveTimeoutOn.setStatus(_F)
rbAuthenticationServerKeepAliveTimeoutOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,123))
rbAuthenticationServerKeepAliveTimeoutOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_M,_U)))
if mibBuilder.loadTexts:rbAuthenticationServerKeepAliveTimeoutOff.setStatus(_F)
rbAccountingServerKeepAliveTimeoutOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,124))
rbAccountingServerKeepAliveTimeoutOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_M,_T)))
if mibBuilder.loadTexts:rbAccountingServerKeepAliveTimeoutOn.setStatus(_F)
rbAccountingServerKeepAliveTimeoutOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,125))
rbAccountingServerKeepAliveTimeoutOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B),(_M,_T)))
if mibBuilder.loadTexts:rbAccountingServerKeepAliveTimeoutOff.setStatus(_F)
rbExternal1PPSFailureOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,134))
rbExternal1PPSFailureOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbExternal1PPSFailureOn.setStatus(_F)
rbExternal1PPSFailureOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,135))
rbExternal1PPSFailureOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbExternal1PPSFailureOff.setStatus(_F)
rbInternal1PPSFailureOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,136))
rbInternal1PPSFailureOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbInternal1PPSFailureOn.setStatus(_F)
rbInternal1PPSFailureOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,137))
rbInternal1PPSFailureOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbInternal1PPSFailureOff.setStatus(_F)
rbExternal16MHzFailureOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,138))
rbExternal16MHzFailureOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbExternal16MHzFailureOn.setStatus(_F)
rbExternal16MHzFailureOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,139))
rbExternal16MHzFailureOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbExternal16MHzFailureOff.setStatus(_F)
rbInternal16MHzFailureOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,140))
rbInternal16MHzFailureOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbInternal16MHzFailureOn.setStatus(_F)
rbInternal16MHzFailureOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,141))
rbInternal16MHzFailureOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbInternal16MHzFailureOff.setStatus(_F)
rbGPSComFailureOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,142))
rbGPSComFailureOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbGPSComFailureOn.setStatus(_F)
rbGPSComFailureOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,143))
rbGPSComFailureOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbGPSComFailureOff.setStatus(_F)
rbGPSHealthyFailureOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,144))
rbGPSHealthyFailureOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbGPSHealthyFailureOn.setStatus(_F)
rbGPSHealthyFailureOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,145))
rbGPSHealthyFailureOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbGPSHealthyFailureOff.setStatus(_F)
rbMin4SatSyncFailureOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,146))
rbMin4SatSyncFailureOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbMin4SatSyncFailureOn.setStatus(_F)
rbMin4SatSyncFailureOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,147))
rbMin4SatSyncFailureOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbMin4SatSyncFailureOff.setStatus(_F)
rbAUExternal1PPSFailureOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,148))
rbAUExternal1PPSFailureOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbAUExternal1PPSFailureOn.setStatus(_F)
rbAUExternal1PPSFailureOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,149))
rbAUExternal1PPSFailureOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbAUExternal1PPSFailureOff.setStatus(_F)
rbAUHoldOverEnteredOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,150))
rbAUHoldOverEnteredOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbAUHoldOverEnteredOn.setStatus(_F)
rbAUHoldOverEnteredOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,151))
rbAUHoldOverEnteredOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbAUHoldOverEnteredOff.setStatus(_F)
rbAUHoldOverTimeoutPassedOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,152))
rbAUHoldOverTimeoutPassedOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbAUHoldOverTimeoutPassedOn.setStatus(_F)
rbAUHoldOverTimeoutPassedOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,153))
rbAUHoldOverTimeoutPassedOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbAUHoldOverTimeoutPassedOff.setStatus(_F)
rbAUHoldOverTxStoppedOn=NotificationType((1,3,6,1,4,1,12394,1,2,0,154))
rbAUHoldOverTxStoppedOn.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbAUHoldOverTxStoppedOn.setStatus(_F)
rbAUHoldOverTxStoppedOff=NotificationType((1,3,6,1,4,1,12394,1,2,0,155))
rbAUHoldOverTxStoppedOff.setObjects(*((_A,_C),(_A,_E),(_A,_D),(_A,_B)))
if mibBuilder.loadTexts:rbAUHoldOverTxStoppedOff.setStatus(_F)
mibBuilder.exportSymbols('RAINBOW-NOTIFICATIONS-MIB',**{'rbNotifications':rbNotifications,'rbResetOn':rbResetOn,'rbDiagnosticsHwFaultOn':rbDiagnosticsHwFaultOn,'rbDiagnosticsHwFaultOff':rbDiagnosticsHwFaultOff,'rbMonitorAccessOn':rbMonitorAccessOn,'rbMonitorAccessOff':rbMonitorAccessOff,'rbAuNetworkEntryStatus':rbAuNetworkEntryStatus,'rbModeConflictOn':rbModeConflictOn,'rbModeConflictOff':rbModeConflictOff,'rbShelfCardExtractionOn':rbShelfCardExtractionOn,'rbShelfCardInsertionOn':rbShelfCardInsertionOn,'rbShelfPeripheralEquipmentFaultOn':rbShelfPeripheralEquipmentFaultOn,'rbShelfPeripherallEquipmentFaultOff':rbShelfPeripherallEquipmentFaultOff,'rbShelfEnvParamFaultOn':rbShelfEnvParamFaultOn,'rbShelfEnvParamFaultOff':rbShelfEnvParamFaultOff,'rbConfigurationChanged':rbConfigurationChanged,'rbParameterSetFailure':rbParameterSetFailure,'rbMbstLicense':rbMbstLicense,'rbMbstCPEQuantityExceed':rbMbstCPEQuantityExceed,'rbLicenseFileLoadStatus':rbLicenseFileLoadStatus,'rbOduCrcErrorOn':rbOduCrcErrorOn,'rbOduCrcErrorOff':rbOduCrcErrorOff,'rbOduCommErrorOn':rbOduCommErrorOn,'rbOduCommErrorOff':rbOduCommErrorOff,'rbOduBandMissmatchOn':rbOduBandMissmatchOn,'rbOduBandMissmatchOff':rbOduBandMissmatchOff,'rbOduPowerMismatch':rbOduPowerMismatch,'rbOduFailureOn':rbOduFailureOn,'rbOduFailureOff':rbOduFailureOff,'rbSuMaxTxPowerReached':rbSuMaxTxPowerReached,'rbSuMinTxPowerReached':rbSuMinTxPowerReached,'rbSuNetworkEntryStatus':rbSuNetworkEntryStatus,'rbSuLicense':rbSuLicense,'rbSuDuplicateName':rbSuDuplicateName,'rbSwDownloadStart':rbSwDownloadStart,'rbSwDownloadEnd':rbSwDownloadEnd,'rbSwDownloadError':rbSwDownloadError,'rbSwSwitchFailed':rbSwSwitchFailed,'rbSwSwitchSucceed':rbSwSwitchSucceed,'rbBERTestFinished':rbBERTestFinished,'rbBERTestStarted':rbBERTestStarted,'rbSwFileConflict':rbSwFileConflict,'rbXMLDownloadResult':rbXMLDownloadResult,'rbFreqBandDownloadResult':rbFreqBandDownloadResult,'rbServiceDown':rbServiceDown,'rbServiceUp':rbServiceUp,'rbServiceChanged':rbServiceChanged,'rbServiceGeneralError':rbServiceGeneralError,'rbNetworkingError':rbNetworkingError,'rbSwitchedAuthenticationServer':rbSwitchedAuthenticationServer,'rbSwitchedAccountingServer':rbSwitchedAccountingServer,'rbServiceEstablishmentFailure':rbServiceEstablishmentFailure,'rbUserAuthenticationTimeout':rbUserAuthenticationTimeout,'rbUserAuthenticationReject':rbUserAuthenticationReject,'rbAuthenticationServerKeepAliveTimeoutOn':rbAuthenticationServerKeepAliveTimeoutOn,'rbAuthenticationServerKeepAliveTimeoutOff':rbAuthenticationServerKeepAliveTimeoutOff,'rbAccountingServerKeepAliveTimeoutOn':rbAccountingServerKeepAliveTimeoutOn,'rbAccountingServerKeepAliveTimeoutOff':rbAccountingServerKeepAliveTimeoutOff,'rbExternal1PPSFailureOn':rbExternal1PPSFailureOn,'rbExternal1PPSFailureOff':rbExternal1PPSFailureOff,'rbInternal1PPSFailureOn':rbInternal1PPSFailureOn,'rbInternal1PPSFailureOff':rbInternal1PPSFailureOff,'rbExternal16MHzFailureOn':rbExternal16MHzFailureOn,'rbExternal16MHzFailureOff':rbExternal16MHzFailureOff,'rbInternal16MHzFailureOn':rbInternal16MHzFailureOn,'rbInternal16MHzFailureOff':rbInternal16MHzFailureOff,'rbGPSComFailureOn':rbGPSComFailureOn,'rbGPSComFailureOff':rbGPSComFailureOff,'rbGPSHealthyFailureOn':rbGPSHealthyFailureOn,'rbGPSHealthyFailureOff':rbGPSHealthyFailureOff,'rbMin4SatSyncFailureOn':rbMin4SatSyncFailureOn,'rbMin4SatSyncFailureOff':rbMin4SatSyncFailureOff,'rbAUExternal1PPSFailureOn':rbAUExternal1PPSFailureOn,'rbAUExternal1PPSFailureOff':rbAUExternal1PPSFailureOff,'rbAUHoldOverEnteredOn':rbAUHoldOverEnteredOn,'rbAUHoldOverEnteredOff':rbAUHoldOverEnteredOff,'rbAUHoldOverTimeoutPassedOn':rbAUHoldOverTimeoutPassedOn,'rbAUHoldOverTimeoutPassedOff':rbAUHoldOverTimeoutPassedOff,'rbAUHoldOverTxStoppedOn':rbAUHoldOverTxStoppedOn,'rbAUHoldOverTxStoppedOff':rbAUHoldOverTxStoppedOff})