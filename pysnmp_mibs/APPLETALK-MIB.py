# PySNMP SMI module. Autogenerated from smidump -f python APPLETALK-MIB
# by libsmi2pysnmp-0.0.7-alpha at Wed Feb  7 16:12:43 2007,
# Python version (2, 4, 3, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( Bits, Counter32, Integer32, Integer32, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "mib-2")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Types

class ATName(OctetString):
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(0,32)
    pass

class ATNetworkNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(2,2)
    fixedLength = 2
    pass

class DdpNodeAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(3,3)
    fixedLength = 3
    pass

class DdpSocketAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(4,4)
    fixedLength = 4
    pass


# Objects

appletalk = MibIdentifier((1, 3, 6, 1, 2, 1, 13))
llap = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 1))
llapTable = MibTable((1, 3, 6, 1, 2, 1, 13, 1, 1))
llapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 1, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "llapIfIndex"))
llapIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
llapInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
llapOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
llapInNoHandlers = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
llapInLengthErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
llapInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
llapCollisions = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
llapDefers = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
llapNoDataErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
llapRandomCTSErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
llapFCSErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
aarp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 2))
aarpTable = MibTable((1, 3, 6, 1, 2, 1, 13, 2, 1))
aarpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 2, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "aarpIfIndex"), (0, "APPLETALK-MIB", "aarpNetAddress"))
aarpIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
aarpPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
aarpNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 3), DdpNodeAddress()).setMaxAccess("readonly")
aarpStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("valid", 1), ("invalid", 2), ))).setMaxAccess("readwrite")
aarpLookups = MibScalar((1, 3, 6, 1, 2, 1, 13, 2, 2), Counter32()).setMaxAccess("readonly")
aarpHits = MibScalar((1, 3, 6, 1, 2, 1, 13, 2, 3), Counter32()).setMaxAccess("readonly")
atport = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 3))
atportTable = MibTable((1, 3, 6, 1, 2, 1, 13, 3, 1))
atportEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 3, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "atportIndex"))
atportIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
atportDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
atportType = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(8,16,24,17,14,22,12,2,5,11,9,18,1,15,20,19,7,4,3,6,23,13,21,10,)).subtype(namedValues=namedval.NamedValues(("other", 1), ("fdditalk", 10), ("arctalk", 11), ("smdstalk", 12), ("aurp", 13), ("frameRelay", 14), ("x25", 15), ("ip", 16), ("osi", 17), ("decnetIV", 18), ("arap", 19), ("localtalk", 2), ("isdnInThePacketMode", 20), ("nonAppleTalk3Com", 21), ("ipx", 22), ("arns", 23), ("hdlc", 24), ("ethertalk1", 3), ("ethertalk2", 4), ("tokentalk", 5), ("iptalk", 6), ("serialPPP", 7), ("serialNonstandard", 8), ("virtual", 9), ))).setMaxAccess("readwrite")
atportNetStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 4), ATNetworkNumber()).setMaxAccess("readwrite")
atportNetEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 5), ATNetworkNumber()).setMaxAccess("readwrite")
atportNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 6), DdpNodeAddress()).setMaxAccess("readwrite")
atportStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,4,7,2,5,6,1,)).subtype(namedValues=namedval.NamedValues(("routing", 1), ("unconfigured", 2), ("off", 3), ("invalid", 4), ("endNode", 5), ("offDueToConflict", 6), ("other", 7), ))).setMaxAccess("readwrite")
atportNetConfig = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,5,3,4,2,6,)).subtype(namedValues=namedval.NamedValues(("conflictOrientedSeed", 1), ("garnered", 2), ("guessed", 3), ("unconfigured", 4), ("conflictAverseSeed", 5), ("softSeed", 6), ))).setMaxAccess("readwrite")
atportZoneConfig = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,5,3,4,2,6,)).subtype(namedValues=namedval.NamedValues(("conflictOrientedSeed", 1), ("garnered", 2), ("guessed", 3), ("unconfigured", 4), ("conflictAverseSeed", 5), ("softSeed", 6), ))).setMaxAccess("readwrite")
atportZoneDefault = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 10), ATName()).setMaxAccess("readwrite")
atportIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
atportNetFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 12), DdpNodeAddress()).setMaxAccess("readonly")
atportZoneFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 13), DdpNodeAddress()).setMaxAccess("readonly")
atportInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
atportOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
atportHome = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("home", 1), ("notHome", 2), ))).setMaxAccess("readonly")
atportCurrentZone = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 17), ATName()).setMaxAccess("readwrite")
atportConflictPhysAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 18), OctetString()).setMaxAccess("readonly")
atportZoneTable = MibTable((1, 3, 6, 1, 2, 1, 13, 3, 2))
atportZoneEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 3, 2, 1)).setIndexNames((0, "APPLETALK-MIB", "atportZonePort"), (0, "APPLETALK-MIB", "atportZoneName"))
atportZonePort = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 2, 1, 1), Integer32()).setMaxAccess("noaccess")
atportZoneName = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 2, 1, 2), ATName().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
atportZoneStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("valid", 1), ("invalid", 2), ))).setMaxAccess("readwrite")
ddp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 4))
ddpOutRequests = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 1), Counter32()).setMaxAccess("readonly")
ddpOutShorts = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 2), Counter32()).setMaxAccess("readonly")
ddpOutLongs = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 3), Counter32()).setMaxAccess("readonly")
ddpInReceives = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 4), Counter32()).setMaxAccess("readonly")
ddpForwRequests = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 5), Counter32()).setMaxAccess("readonly")
ddpInLocalDatagrams = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 6), Counter32()).setMaxAccess("readonly")
ddpNoProtocolHandlers = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 7), Counter32()).setMaxAccess("readonly")
ddpOutNoRoutes = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 8), Counter32()).setMaxAccess("readonly")
ddpTooShortErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 9), Counter32()).setMaxAccess("readonly")
ddpTooLongErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 10), Counter32()).setMaxAccess("readonly")
ddpBroadcastErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 11), Counter32()).setMaxAccess("readonly")
ddpShortDDPErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 12), Counter32()).setMaxAccess("readonly")
ddpHopCountErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 13), Counter32()).setMaxAccess("readonly")
ddpChecksumErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 14), Counter32()).setMaxAccess("readonly")
ddpListenerTable = MibTable((1, 3, 6, 1, 2, 1, 13, 4, 15))
ddpListenerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 4, 15, 1)).setIndexNames((0, "APPLETALK-MIB", "ddpListenerAddress"))
ddpListenerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 15, 1, 1), DdpSocketAddress()).setMaxAccess("noaccess")
ddpListenerInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 15, 1, 2), Counter32()).setMaxAccess("readonly")
ddpListenerStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 15, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("valid", 1), ("invalid", 2), ))).setMaxAccess("readwrite")
ddpForwardingTable = MibTable((1, 3, 6, 1, 2, 1, 13, 4, 16))
ddpForwardingEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 4, 16, 1)).setIndexNames((0, "APPLETALK-MIB", "ddpForwardingNetEnd"))
ddpForwardingNetEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 1), ATNetworkNumber()).setMaxAccess("noaccess")
ddpForwardingNetStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 2), ATNetworkNumber()).setMaxAccess("readonly")
ddpForwardingNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 3), OctetString()).setMaxAccess("readonly")
ddpForwardingProto = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
ddpForwardingModifiedTime = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 5), TimeTicks()).setMaxAccess("readonly")
ddpForwardingUseCounts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 6), Counter32()).setMaxAccess("readonly")
ddpForwardingPort = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 7), Integer32()).setMaxAccess("readonly")
ddpForwProtoOids = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 4, 17))
rtmpRoutingProto = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 4, 17, 1))
kipRoutingProto = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 4, 17, 2))
ddpForwardingTableOverflows = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 18), Counter32()).setMaxAccess("readonly")
rtmp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 5))
rtmpTable = MibTable((1, 3, 6, 1, 2, 1, 13, 5, 1))
rtmpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 5, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "rtmpRangeStart"))
rtmpRangeStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 1), ATNetworkNumber()).setMaxAccess("readonly")
rtmpRangeEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 2), ATNetworkNumber()).setMaxAccess("readonly")
rtmpNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 3), OctetString()).setMaxAccess("readonly")
rtmpType = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,2,1,)).subtype(namedValues=namedval.NamedValues(("other", 1), ("appletalk", 2), ("serialPPP", 3), ("serialNonstandard", 4), ))).setMaxAccess("readonly")
rtmpPort = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
rtmpHops = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
rtmpState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,5,2,)).subtype(namedValues=namedval.NamedValues(("good", 1), ("suspect", 2), ("badZero", 3), ("badOne", 4), ("invalid", 5), ))).setMaxAccess("readwrite")
rtmpInDataPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 5, 2), Counter32()).setMaxAccess("readonly")
rtmpOutDataPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 5, 3), Counter32()).setMaxAccess("readonly")
rtmpInRequestPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 5, 4), Counter32()).setMaxAccess("readonly")
rtmpNextIREqualChanges = MibScalar((1, 3, 6, 1, 2, 1, 13, 5, 5), Counter32()).setMaxAccess("readonly")
rtmpNextIRLessChanges = MibScalar((1, 3, 6, 1, 2, 1, 13, 5, 6), Counter32()).setMaxAccess("readonly")
rtmpRouteDeletes = MibScalar((1, 3, 6, 1, 2, 1, 13, 5, 7), Counter32()).setMaxAccess("readonly")
rtmpRoutingTableOverflows = MibScalar((1, 3, 6, 1, 2, 1, 13, 5, 8), Counter32()).setMaxAccess("readonly")
kip = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 6))
kipTable = MibTable((1, 3, 6, 1, 2, 1, 13, 6, 1))
kipEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 6, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "kipNetStart"))
kipNetStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 1), ATNetworkNumber()).setMaxAccess("readonly")
kipNetEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 2), ATNetworkNumber()).setMaxAccess("readwrite")
kipNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
kipHopCount = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
kipBCastAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
kipCore = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("core", 1), ("notcore", 2), ))).setMaxAccess("readwrite")
kipType = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,4,5,2,1,)).subtype(namedValues=namedval.NamedValues(("kipRouter", 1), ("net", 2), ("host", 3), ("other", 4), ("async", 5), ))).setMaxAccess("readwrite")
kipState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(("configured", 1), ("learned", 2), ("invalid", 3), ))).setMaxAccess("readwrite")
kipShare = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("shared", 1), ("private", 2), ))).setMaxAccess("readwrite")
kipFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
zipRouter = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 7))
zipTable = MibTable((1, 3, 6, 1, 2, 1, 13, 7, 1))
zipEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 7, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "zipZoneNetStart"), (0, "APPLETALK-MIB", "zipZoneIndex"))
zipZoneName = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 1), ATName()).setMaxAccess("readonly")
zipZoneIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
zipZoneNetStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 3), ATNetworkNumber()).setMaxAccess("readonly")
zipZoneNetEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 4), ATNetworkNumber()).setMaxAccess("readonly")
zipZoneState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("valid", 1), ("invalid", 2), ))).setMaxAccess("readwrite")
zipZoneFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 6), OctetString()).setMaxAccess("readonly")
zipZonePort = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
zipInZipQueries = MibScalar((1, 3, 6, 1, 2, 1, 13, 7, 2), Counter32()).setMaxAccess("readonly")
zipInZipReplies = MibScalar((1, 3, 6, 1, 2, 1, 13, 7, 3), Counter32()).setMaxAccess("readonly")
zipInZipExtendedReplies = MibScalar((1, 3, 6, 1, 2, 1, 13, 7, 4), Counter32()).setMaxAccess("readonly")
zipZoneConflictErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 7, 5), Counter32()).setMaxAccess("readonly")
zipInObsoletes = MibScalar((1, 3, 6, 1, 2, 1, 13, 7, 6), Counter32()).setMaxAccess("readonly")
zipRouterNetInfoTable = MibTable((1, 3, 6, 1, 2, 1, 13, 7, 7))
zipRouterNetInfoEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 7, 7, 1)).setIndexNames((0, "APPLETALK-MIB", "atportIndex"))
zipInGetNetInfos = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 7, 1, 1), Counter32()).setMaxAccess("readonly")
zipOutGetNetInfoReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 7, 1, 2), Counter32()).setMaxAccess("readonly")
zipZoneOutInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 7, 1, 3), Counter32()).setMaxAccess("readonly")
zipAddressInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 7, 1, 4), Counter32()).setMaxAccess("readonly")
nbp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 8))
nbpTable = MibTable((1, 3, 6, 1, 2, 1, 13, 8, 1))
nbpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 8, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "nbpIndex"))
nbpIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
nbpObject = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 2), ATName().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
nbpType = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 3), ATName().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
nbpZone = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 4), ATName()).setMaxAccess("readwrite")
nbpState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,3,1,)).subtype(namedValues=namedval.NamedValues(("valid", 1), ("registering", 2), ("registrationFailed", 3), ("invalid", 4), ))).setMaxAccess("readwrite")
nbpAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 6), DdpSocketAddress()).setMaxAccess("readwrite")
nbpEnumerator = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
nbpInLookUpRequests = MibScalar((1, 3, 6, 1, 2, 1, 13, 8, 2), Counter32()).setMaxAccess("readonly")
nbpInLookUpReplies = MibScalar((1, 3, 6, 1, 2, 1, 13, 8, 3), Counter32()).setMaxAccess("readonly")
nbpInBroadcastRequests = MibScalar((1, 3, 6, 1, 2, 1, 13, 8, 4), Counter32()).setMaxAccess("readonly")
nbpInForwardRequests = MibScalar((1, 3, 6, 1, 2, 1, 13, 8, 5), Counter32()).setMaxAccess("readonly")
nbpOutLookUpReplies = MibScalar((1, 3, 6, 1, 2, 1, 13, 8, 6), Counter32()).setMaxAccess("readonly")
nbpRegistrationFailures = MibScalar((1, 3, 6, 1, 2, 1, 13, 8, 7), Counter32()).setMaxAccess("readonly")
nbpInErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 8, 8), Counter32()).setMaxAccess("readonly")
atecho = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 9))
atechoRequests = MibScalar((1, 3, 6, 1, 2, 1, 13, 9, 1), Counter32()).setMaxAccess("readonly")
atechoReplies = MibScalar((1, 3, 6, 1, 2, 1, 13, 9, 2), Counter32()).setMaxAccess("readonly")
atechoOutRequests = MibScalar((1, 3, 6, 1, 2, 1, 13, 9, 3), Counter32()).setMaxAccess("readonly")
atechoInReplies = MibScalar((1, 3, 6, 1, 2, 1, 13, 9, 4), Counter32()).setMaxAccess("readonly")
atp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 10))
atpInPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 10, 1), Counter32()).setMaxAccess("readonly")
atpOutPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 10, 2), Counter32()).setMaxAccess("readonly")
atpTRequestRetransmissions = MibScalar((1, 3, 6, 1, 2, 1, 13, 10, 3), Counter32()).setMaxAccess("readonly")
atpTResponseRetransmissions = MibScalar((1, 3, 6, 1, 2, 1, 13, 10, 4), Counter32()).setMaxAccess("readonly")
atpReleaseTimerExpiredCounts = MibScalar((1, 3, 6, 1, 2, 1, 13, 10, 5), Counter32()).setMaxAccess("readonly")
atpRetryCountExceededs = MibScalar((1, 3, 6, 1, 2, 1, 13, 10, 6), Counter32()).setMaxAccess("readonly")
atpListenerTable = MibTable((1, 3, 6, 1, 2, 1, 13, 10, 7))
atpListenerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 10, 7, 1)).setIndexNames((0, "APPLETALK-MIB", "atpListenerAddress"))
atpListenerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 10, 7, 1, 1), DdpSocketAddress()).setMaxAccess("noaccess")
atpListenerStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 10, 7, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("valid", 1), ("invalid", 2), ))).setMaxAccess("readwrite")
pap = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 11))
papInOpenConns = MibScalar((1, 3, 6, 1, 2, 1, 13, 11, 1), Counter32()).setMaxAccess("readonly")
papOutOpenConns = MibScalar((1, 3, 6, 1, 2, 1, 13, 11, 2), Counter32()).setMaxAccess("readonly")
papInDatas = MibScalar((1, 3, 6, 1, 2, 1, 13, 11, 3), Counter32()).setMaxAccess("readonly")
papOutDatas = MibScalar((1, 3, 6, 1, 2, 1, 13, 11, 4), Counter32()).setMaxAccess("readonly")
papInCloseConns = MibScalar((1, 3, 6, 1, 2, 1, 13, 11, 5), Counter32()).setMaxAccess("readonly")
papOutCloseConns = MibScalar((1, 3, 6, 1, 2, 1, 13, 11, 6), Counter32()).setMaxAccess("readonly")
papTickleTimeoutCloses = MibScalar((1, 3, 6, 1, 2, 1, 13, 11, 7), Counter32()).setMaxAccess("readonly")
papServerTable = MibTable((1, 3, 6, 1, 2, 1, 13, 11, 8))
papServerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 11, 8, 1)).setIndexNames((0, "APPLETALK-MIB", "papServerIndex"))
papServerIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 1), Integer32()).setMaxAccess("noaccess")
papServerListeningSocket = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 2), DdpSocketAddress()).setMaxAccess("readwrite")
papServerStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
papServerCompletedJobs = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 4), Counter32()).setMaxAccess("readonly")
papServerBusyJobs = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 5), Integer32()).setMaxAccess("readonly")
papServerFreeJobs = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 6), Integer32()).setMaxAccess("readonly")
papServerAuthenticationFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 7), Counter32()).setMaxAccess("readonly")
papServerAccountingFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 8), Counter32()).setMaxAccess("readonly")
papServerGeneralFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 9), Counter32()).setMaxAccess("readonly")
papServerState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("valid", 1), ("invalid", 2), ))).setMaxAccess("readwrite")
papServerLastStatusMsg = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 11), DisplayString()).setMaxAccess("readonly")
asp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 12))
aspInputTransactions = MibScalar((1, 3, 6, 1, 2, 1, 13, 12, 1), Counter32()).setMaxAccess("readonly")
aspOutputTransactions = MibScalar((1, 3, 6, 1, 2, 1, 13, 12, 2), Counter32()).setMaxAccess("readonly")
aspInOpenSessions = MibScalar((1, 3, 6, 1, 2, 1, 13, 12, 3), Counter32()).setMaxAccess("readonly")
aspOutOpenSessions = MibScalar((1, 3, 6, 1, 2, 1, 13, 12, 4), Counter32()).setMaxAccess("readonly")
aspInCloseSessions = MibScalar((1, 3, 6, 1, 2, 1, 13, 12, 5), Counter32()).setMaxAccess("readonly")
aspOutCloseSessions = MibScalar((1, 3, 6, 1, 2, 1, 13, 12, 6), Counter32()).setMaxAccess("readonly")
aspNoMoreSessionsErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 12, 7), Counter32()).setMaxAccess("readonly")
aspTickleTimeOutCloses = MibScalar((1, 3, 6, 1, 2, 1, 13, 12, 8), Counter32()).setMaxAccess("readonly")
aspConnTable = MibTable((1, 3, 6, 1, 2, 1, 13, 12, 9))
aspConnEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 12, 9, 1)).setIndexNames((0, "APPLETALK-MIB", "aspConnLocalAddress"), (0, "APPLETALK-MIB", "aspConnRemoteAddress"), (0, "APPLETALK-MIB", "aspConnID"))
aspConnLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 1), DdpSocketAddress()).setMaxAccess("noaccess")
aspConnRemoteAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 2), DdpSocketAddress()).setMaxAccess("noaccess")
aspConnID = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 255))).setMaxAccess("noaccess")
aspConnLastReqNum = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
aspConnServerEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,)).subtype(namedValues=namedval.NamedValues(("sss", 1), ("wss", 2), ("sls", 3), ))).setMaxAccess("readonly")
aspConnState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(("open", 1), ("closed", 2), ("invalid", 3), ))).setMaxAccess("readwrite")
adsp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 13))
adspInPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 13, 1), Counter32()).setMaxAccess("readonly")
adspOutPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 13, 2), Counter32()).setMaxAccess("readonly")
adspInOctets = MibScalar((1, 3, 6, 1, 2, 1, 13, 13, 3), Counter32()).setMaxAccess("readonly")
adspOutOctets = MibScalar((1, 3, 6, 1, 2, 1, 13, 13, 4), Counter32()).setMaxAccess("readonly")
adspInDataPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 13, 5), Counter32()).setMaxAccess("readonly")
adspOutDataPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 13, 6), Counter32()).setMaxAccess("readonly")
adspTimeoutErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 13, 7), Counter32()).setMaxAccess("readonly")
adspTimeoutCloseErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 13, 8), Counter32()).setMaxAccess("readonly")
adspConnTable = MibTable((1, 3, 6, 1, 2, 1, 13, 13, 9))
adspConnEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 13, 9, 1)).setIndexNames((0, "APPLETALK-MIB", "adspConnLocalAddress"), (0, "APPLETALK-MIB", "adspConnRemoteAddress"), (0, "APPLETALK-MIB", "adspConnLocalConnID"))
adspConnLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 1), DdpSocketAddress()).setMaxAccess("noaccess")
adspConnLocalConnID = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 65535))).setMaxAccess("noaccess")
adspConnRemoteAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 3), DdpSocketAddress()).setMaxAccess("noaccess")
adspConnRemoteConnID = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
adspConnState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,3,6,4,2,1,)).subtype(namedValues=namedval.NamedValues(("open", 1), ("localHalfOpen", 2), ("remoteHalfOpen", 3), ("listening", 4), ("closed", 5), ("invalid", 6), ))).setMaxAccess("readwrite")
atportptop = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14))
atportPtoPTable = MibTable((1, 3, 6, 1, 2, 1, 13, 14, 1))
atportPtoPEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 14, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "atportPtoPIndex"))
atportPtoPIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 1), Integer32()).setMaxAccess("noaccess")
atportPtoPProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
atportPtoPRemoteName = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
atportPtoPRemoteAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
atportPtoPPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
atportPtoPStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("valid", 1), ("invalid", 2), ))).setMaxAccess("readwrite")
atportPtoPProtoOids = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2))
pToPProtoOther = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 1))
pToPProtoAurp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 2))
pToPProtoCaymanUdp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 3))
pToPProtoAtkvmsDecnetIV = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 4))
pToPProtoLiaisonUdp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 5))
pToPProtoIpx = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 6))
pToPProtoShivaIp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 7))
rtmpStub = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 16))
rtmpOutRequestPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 16, 1), Counter32()).setMaxAccess("readonly")
rtmpInVersionMismatches = MibScalar((1, 3, 6, 1, 2, 1, 13, 16, 2), Counter32()).setMaxAccess("readonly")
rtmpInErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 16, 3), Counter32()).setMaxAccess("readonly")
zipEndNode = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 17))
zipNetInfoTable = MibTable((1, 3, 6, 1, 2, 1, 13, 17, 1))
zipNetInfoEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 17, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "atportIndex"))
zipOutGetNetInfos = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 17, 1, 1, 1), Counter32()).setMaxAccess("readonly")
zipInGetNetInfoReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 17, 1, 1, 2), Counter32()).setMaxAccess("readonly")
zipZoneInInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 17, 1, 1, 3), Counter32()).setMaxAccess("readonly")
zipInErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 17, 2), Counter32()).setMaxAccess("readonly")
perPort = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 18))
perPortTable = MibTable((1, 3, 6, 1, 2, 1, 13, 18, 1))
perPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 18, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "atportIndex"))
perPortAarpInProbes = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 1), Counter32()).setMaxAccess("readonly")
perPortAarpOutProbes = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 2), Counter32()).setMaxAccess("readonly")
perPortAarpInReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 3), Counter32()).setMaxAccess("readonly")
perPortAarpOutReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 4), Counter32()).setMaxAccess("readonly")
perPortAarpInRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 5), Counter32()).setMaxAccess("readonly")
perPortAarpOutRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 6), Counter32()).setMaxAccess("readonly")
perPortDdpInReceives = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 7), Counter32()).setMaxAccess("readonly")
perPortDdpInLocalDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 8), Counter32()).setMaxAccess("readonly")
perPortDdpNoProtocolHandlers = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 9), Counter32()).setMaxAccess("readonly")
perPortDdpTooShortErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 10), Counter32()).setMaxAccess("readonly")
perPortDdpTooLongErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 11), Counter32()).setMaxAccess("readonly")
perPortDdpChecksumErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 12), Counter32()).setMaxAccess("readonly")
perPortDdpForwRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 13), Counter32()).setMaxAccess("readonly")
perPortRtmpInDataPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 14), Counter32()).setMaxAccess("readonly")
perPortRtmpOutDataPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 15), Counter32()).setMaxAccess("readonly")
perPortRtmpInRequestPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 16), Counter32()).setMaxAccess("readonly")
perPortRtmpRouteDeletes = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 17), Counter32()).setMaxAccess("readonly")
perPortZipInZipQueries = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 18), Counter32()).setMaxAccess("readonly")
perPortZipInZipReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 19), Counter32()).setMaxAccess("readonly")
perPortZipInZipExtendedReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 20), Counter32()).setMaxAccess("readonly")
perPortZipZoneConflictErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 21), Counter32()).setMaxAccess("readonly")
perPortZipInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 22), Counter32()).setMaxAccess("readonly")
perPortNbpInLookUpRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 23), Counter32()).setMaxAccess("readonly")
perPortNbpInLookUpReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 24), Counter32()).setMaxAccess("readonly")
perPortNbpInBroadcastRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 25), Counter32()).setMaxAccess("readonly")
perPortNbpInForwardRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 26), Counter32()).setMaxAccess("readonly")
perPortNbpOutLookUpReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 27), Counter32()).setMaxAccess("readonly")
perPortNbpRegistrationFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 28), Counter32()).setMaxAccess("readonly")
perPortNbpInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 29), Counter32()).setMaxAccess("readonly")
perPortEchoRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 30), Counter32()).setMaxAccess("readonly")
perPortEchoReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 31), Counter32()).setMaxAccess("readonly")

# Augmentions

# Exports

# Types
mibBuilder.exportSymbols("APPLETALK-MIB", ATName=ATName, ATNetworkNumber=ATNetworkNumber, DdpNodeAddress=DdpNodeAddress, DdpSocketAddress=DdpSocketAddress)

# Objects
mibBuilder.exportSymbols("APPLETALK-MIB", appletalk=appletalk, llap=llap, llapTable=llapTable, llapEntry=llapEntry, llapIfIndex=llapIfIndex, llapInPkts=llapInPkts, llapOutPkts=llapOutPkts, llapInNoHandlers=llapInNoHandlers, llapInLengthErrors=llapInLengthErrors, llapInErrors=llapInErrors, llapCollisions=llapCollisions, llapDefers=llapDefers, llapNoDataErrors=llapNoDataErrors, llapRandomCTSErrors=llapRandomCTSErrors, llapFCSErrors=llapFCSErrors, aarp=aarp, aarpTable=aarpTable, aarpEntry=aarpEntry, aarpIfIndex=aarpIfIndex, aarpPhysAddress=aarpPhysAddress, aarpNetAddress=aarpNetAddress, aarpStatus=aarpStatus, aarpLookups=aarpLookups, aarpHits=aarpHits, atport=atport, atportTable=atportTable, atportEntry=atportEntry, atportIndex=atportIndex, atportDescr=atportDescr, atportType=atportType, atportNetStart=atportNetStart, atportNetEnd=atportNetEnd, atportNetAddress=atportNetAddress, atportStatus=atportStatus, atportNetConfig=atportNetConfig, atportZoneConfig=atportZoneConfig, atportZoneDefault=atportZoneDefault, atportIfIndex=atportIfIndex, atportNetFrom=atportNetFrom, atportZoneFrom=atportZoneFrom, atportInPkts=atportInPkts, atportOutPkts=atportOutPkts, atportHome=atportHome, atportCurrentZone=atportCurrentZone, atportConflictPhysAddr=atportConflictPhysAddr, atportZoneTable=atportZoneTable, atportZoneEntry=atportZoneEntry, atportZonePort=atportZonePort, atportZoneName=atportZoneName, atportZoneStatus=atportZoneStatus, ddp=ddp, ddpOutRequests=ddpOutRequests, ddpOutShorts=ddpOutShorts, ddpOutLongs=ddpOutLongs, ddpInReceives=ddpInReceives, ddpForwRequests=ddpForwRequests, ddpInLocalDatagrams=ddpInLocalDatagrams, ddpNoProtocolHandlers=ddpNoProtocolHandlers, ddpOutNoRoutes=ddpOutNoRoutes, ddpTooShortErrors=ddpTooShortErrors, ddpTooLongErrors=ddpTooLongErrors, ddpBroadcastErrors=ddpBroadcastErrors, ddpShortDDPErrors=ddpShortDDPErrors, ddpHopCountErrors=ddpHopCountErrors, ddpChecksumErrors=ddpChecksumErrors, ddpListenerTable=ddpListenerTable, ddpListenerEntry=ddpListenerEntry, ddpListenerAddress=ddpListenerAddress, ddpListenerInPkts=ddpListenerInPkts, ddpListenerStatus=ddpListenerStatus, ddpForwardingTable=ddpForwardingTable, ddpForwardingEntry=ddpForwardingEntry, ddpForwardingNetEnd=ddpForwardingNetEnd, ddpForwardingNetStart=ddpForwardingNetStart, ddpForwardingNextHop=ddpForwardingNextHop, ddpForwardingProto=ddpForwardingProto, ddpForwardingModifiedTime=ddpForwardingModifiedTime, ddpForwardingUseCounts=ddpForwardingUseCounts, ddpForwardingPort=ddpForwardingPort, ddpForwProtoOids=ddpForwProtoOids, rtmpRoutingProto=rtmpRoutingProto, kipRoutingProto=kipRoutingProto, ddpForwardingTableOverflows=ddpForwardingTableOverflows, rtmp=rtmp, rtmpTable=rtmpTable, rtmpEntry=rtmpEntry, rtmpRangeStart=rtmpRangeStart, rtmpRangeEnd=rtmpRangeEnd, rtmpNextHop=rtmpNextHop, rtmpType=rtmpType, rtmpPort=rtmpPort, rtmpHops=rtmpHops, rtmpState=rtmpState, rtmpInDataPkts=rtmpInDataPkts, rtmpOutDataPkts=rtmpOutDataPkts, rtmpInRequestPkts=rtmpInRequestPkts, rtmpNextIREqualChanges=rtmpNextIREqualChanges, rtmpNextIRLessChanges=rtmpNextIRLessChanges, rtmpRouteDeletes=rtmpRouteDeletes, rtmpRoutingTableOverflows=rtmpRoutingTableOverflows, kip=kip, kipTable=kipTable, kipEntry=kipEntry, kipNetStart=kipNetStart, kipNetEnd=kipNetEnd, kipNextHop=kipNextHop, kipHopCount=kipHopCount, kipBCastAddr=kipBCastAddr, kipCore=kipCore, kipType=kipType, kipState=kipState, kipShare=kipShare, kipFrom=kipFrom, zipRouter=zipRouter, zipTable=zipTable, zipEntry=zipEntry, zipZoneName=zipZoneName, zipZoneIndex=zipZoneIndex, zipZoneNetStart=zipZoneNetStart, zipZoneNetEnd=zipZoneNetEnd, zipZoneState=zipZoneState, zipZoneFrom=zipZoneFrom, zipZonePort=zipZonePort, zipInZipQueries=zipInZipQueries, zipInZipReplies=zipInZipReplies, zipInZipExtendedReplies=zipInZipExtendedReplies)
mibBuilder.exportSymbols("APPLETALK-MIB", zipZoneConflictErrors=zipZoneConflictErrors, zipInObsoletes=zipInObsoletes, zipRouterNetInfoTable=zipRouterNetInfoTable, zipRouterNetInfoEntry=zipRouterNetInfoEntry, zipInGetNetInfos=zipInGetNetInfos, zipOutGetNetInfoReplies=zipOutGetNetInfoReplies, zipZoneOutInvalids=zipZoneOutInvalids, zipAddressInvalids=zipAddressInvalids, nbp=nbp, nbpTable=nbpTable, nbpEntry=nbpEntry, nbpIndex=nbpIndex, nbpObject=nbpObject, nbpType=nbpType, nbpZone=nbpZone, nbpState=nbpState, nbpAddress=nbpAddress, nbpEnumerator=nbpEnumerator, nbpInLookUpRequests=nbpInLookUpRequests, nbpInLookUpReplies=nbpInLookUpReplies, nbpInBroadcastRequests=nbpInBroadcastRequests, nbpInForwardRequests=nbpInForwardRequests, nbpOutLookUpReplies=nbpOutLookUpReplies, nbpRegistrationFailures=nbpRegistrationFailures, nbpInErrors=nbpInErrors, atecho=atecho, atechoRequests=atechoRequests, atechoReplies=atechoReplies, atechoOutRequests=atechoOutRequests, atechoInReplies=atechoInReplies, atp=atp, atpInPkts=atpInPkts, atpOutPkts=atpOutPkts, atpTRequestRetransmissions=atpTRequestRetransmissions, atpTResponseRetransmissions=atpTResponseRetransmissions, atpReleaseTimerExpiredCounts=atpReleaseTimerExpiredCounts, atpRetryCountExceededs=atpRetryCountExceededs, atpListenerTable=atpListenerTable, atpListenerEntry=atpListenerEntry, atpListenerAddress=atpListenerAddress, atpListenerStatus=atpListenerStatus, pap=pap, papInOpenConns=papInOpenConns, papOutOpenConns=papOutOpenConns, papInDatas=papInDatas, papOutDatas=papOutDatas, papInCloseConns=papInCloseConns, papOutCloseConns=papOutCloseConns, papTickleTimeoutCloses=papTickleTimeoutCloses, papServerTable=papServerTable, papServerEntry=papServerEntry, papServerIndex=papServerIndex, papServerListeningSocket=papServerListeningSocket, papServerStatus=papServerStatus, papServerCompletedJobs=papServerCompletedJobs, papServerBusyJobs=papServerBusyJobs, papServerFreeJobs=papServerFreeJobs, papServerAuthenticationFailures=papServerAuthenticationFailures, papServerAccountingFailures=papServerAccountingFailures, papServerGeneralFailures=papServerGeneralFailures, papServerState=papServerState, papServerLastStatusMsg=papServerLastStatusMsg, asp=asp, aspInputTransactions=aspInputTransactions, aspOutputTransactions=aspOutputTransactions, aspInOpenSessions=aspInOpenSessions, aspOutOpenSessions=aspOutOpenSessions, aspInCloseSessions=aspInCloseSessions, aspOutCloseSessions=aspOutCloseSessions, aspNoMoreSessionsErrors=aspNoMoreSessionsErrors, aspTickleTimeOutCloses=aspTickleTimeOutCloses, aspConnTable=aspConnTable, aspConnEntry=aspConnEntry, aspConnLocalAddress=aspConnLocalAddress, aspConnRemoteAddress=aspConnRemoteAddress, aspConnID=aspConnID, aspConnLastReqNum=aspConnLastReqNum, aspConnServerEnd=aspConnServerEnd, aspConnState=aspConnState, adsp=adsp, adspInPkts=adspInPkts, adspOutPkts=adspOutPkts, adspInOctets=adspInOctets, adspOutOctets=adspOutOctets, adspInDataPkts=adspInDataPkts, adspOutDataPkts=adspOutDataPkts, adspTimeoutErrors=adspTimeoutErrors, adspTimeoutCloseErrors=adspTimeoutCloseErrors, adspConnTable=adspConnTable, adspConnEntry=adspConnEntry, adspConnLocalAddress=adspConnLocalAddress, adspConnLocalConnID=adspConnLocalConnID, adspConnRemoteAddress=adspConnRemoteAddress, adspConnRemoteConnID=adspConnRemoteConnID, adspConnState=adspConnState, atportptop=atportptop, atportPtoPTable=atportPtoPTable, atportPtoPEntry=atportPtoPEntry, atportPtoPIndex=atportPtoPIndex, atportPtoPProtocol=atportPtoPProtocol, atportPtoPRemoteName=atportPtoPRemoteName, atportPtoPRemoteAddress=atportPtoPRemoteAddress, atportPtoPPortIndex=atportPtoPPortIndex, atportPtoPStatus=atportPtoPStatus, atportPtoPProtoOids=atportPtoPProtoOids, pToPProtoOther=pToPProtoOther, pToPProtoAurp=pToPProtoAurp, pToPProtoCaymanUdp=pToPProtoCaymanUdp, pToPProtoAtkvmsDecnetIV=pToPProtoAtkvmsDecnetIV, pToPProtoLiaisonUdp=pToPProtoLiaisonUdp, pToPProtoIpx=pToPProtoIpx, pToPProtoShivaIp=pToPProtoShivaIp, rtmpStub=rtmpStub, rtmpOutRequestPkts=rtmpOutRequestPkts, rtmpInVersionMismatches=rtmpInVersionMismatches, rtmpInErrors=rtmpInErrors, zipEndNode=zipEndNode, zipNetInfoTable=zipNetInfoTable, zipNetInfoEntry=zipNetInfoEntry, zipOutGetNetInfos=zipOutGetNetInfos, zipInGetNetInfoReplies=zipInGetNetInfoReplies, zipZoneInInvalids=zipZoneInInvalids, zipInErrors=zipInErrors, perPort=perPort, perPortTable=perPortTable, perPortEntry=perPortEntry, perPortAarpInProbes=perPortAarpInProbes)
mibBuilder.exportSymbols("APPLETALK-MIB", perPortAarpOutProbes=perPortAarpOutProbes, perPortAarpInReqs=perPortAarpInReqs, perPortAarpOutReqs=perPortAarpOutReqs, perPortAarpInRsps=perPortAarpInRsps, perPortAarpOutRsps=perPortAarpOutRsps, perPortDdpInReceives=perPortDdpInReceives, perPortDdpInLocalDatagrams=perPortDdpInLocalDatagrams, perPortDdpNoProtocolHandlers=perPortDdpNoProtocolHandlers, perPortDdpTooShortErrors=perPortDdpTooShortErrors, perPortDdpTooLongErrors=perPortDdpTooLongErrors, perPortDdpChecksumErrors=perPortDdpChecksumErrors, perPortDdpForwRequests=perPortDdpForwRequests, perPortRtmpInDataPkts=perPortRtmpInDataPkts, perPortRtmpOutDataPkts=perPortRtmpOutDataPkts, perPortRtmpInRequestPkts=perPortRtmpInRequestPkts, perPortRtmpRouteDeletes=perPortRtmpRouteDeletes, perPortZipInZipQueries=perPortZipInZipQueries, perPortZipInZipReplies=perPortZipInZipReplies, perPortZipInZipExtendedReplies=perPortZipInZipExtendedReplies, perPortZipZoneConflictErrors=perPortZipZoneConflictErrors, perPortZipInErrors=perPortZipInErrors, perPortNbpInLookUpRequests=perPortNbpInLookUpRequests, perPortNbpInLookUpReplies=perPortNbpInLookUpReplies, perPortNbpInBroadcastRequests=perPortNbpInBroadcastRequests, perPortNbpInForwardRequests=perPortNbpInForwardRequests, perPortNbpOutLookUpReplies=perPortNbpOutLookUpReplies, perPortNbpRegistrationFailures=perPortNbpRegistrationFailures, perPortNbpInErrors=perPortNbpInErrors, perPortEchoRequests=perPortEchoRequests, perPortEchoReplies=perPortEchoReplies)

