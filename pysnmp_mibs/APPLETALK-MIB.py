# PySNMP SMI module. Autogenerated from smidump -f python APPLETALK-MIB
# by libsmi2pysnmp-0.0.3-alpha at Wed Nov 10 12:10:08 2004,
# Python version (2, 2, 1, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pysnmp.asn1 import subtypes

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( MibVariable, MibTable, MibTableRow, MibTableColumn, ) = mibBuilder.importSymbols("RFC-1212", "MibVariable", "MibTable", "MibTableRow", "MibTableColumn")
( Counter, IpAddress, TimeTicks, ) = mibBuilder.importSymbols("RFC1155-SMI", "Counter", "IpAddress", "TimeTicks")
( DisplayString, mib_2, ) = mibBuilder.importSymbols("RFC1213-MIB", "DisplayString", "mib-2")
( Bits, Integer32, MibIdentifier, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "MibIdentifier", "TimeTicks")

# Types

class ATName(OctetString):
    subtypeConstraints = OctetString.subtypeConstraints + ( subtypes.ValueRangeConstraint(0, 32), )
    pass

class ATNetworkNumber(OctetString):
    subtypeConstraints = OctetString.subtypeConstraints + ( subtypes.ValueRangeConstraint(2, 2), )
    pass

class DdpNodeAddress(OctetString):
    subtypeConstraints = OctetString.subtypeConstraints + ( subtypes.ValueRangeConstraint(3, 3), )
    pass

class DdpSocketAddress(OctetString):
    subtypeConstraints = OctetString.subtypeConstraints + ( subtypes.ValueRangeConstraint(4, 4), )
    pass


# Objects

appletalk = MibIdentifier((1, 3, 6, 1, 2, 1, 13))
llap = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 1))
llapTable = MibTable((1, 3, 6, 1, 2, 1, 13, 1, 1))
llapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 1, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "llapIfIndex"))
llapIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 1)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readonly"))
llapInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 2)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
llapOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 3)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
llapInNoHandlers = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 4)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
llapInLengthErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 5)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
llapInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 6)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
llapCollisions = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 7)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
llapDefers = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 8)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
llapNoDataErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 9)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
llapRandomCTSErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 10)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
llapFCSErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 11)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
aarp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 2))
aarpTable = MibTable((1, 3, 6, 1, 2, 1, 13, 2, 1))
aarpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 2, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "aarpIfIndex"), (0, "APPLETALK-MIB", "aarpNetAddress"))
aarpIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 1)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readonly"))
aarpPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 2)).setColumnInitializer(MibVariable((), OctetString()).setMaxAccess("readwrite"))
aarpNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 3)).setColumnInitializer(MibVariable((), DdpNodeAddress()).setMaxAccess("readonly"))
aarpStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 4)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(1,2,)).addNamedValues(("valid", 1), ("invalid", 2), )).setMaxAccess("readwrite"))
aarpLookups = MibVariable((1, 3, 6, 1, 2, 1, 13, 2, 2), Counter()).setMaxAccess("readonly")
aarpHits = MibVariable((1, 3, 6, 1, 2, 1, 13, 2, 3), Counter()).setMaxAccess("readonly")
atport = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 3))
atportTable = MibTable((1, 3, 6, 1, 2, 1, 13, 3, 1))
atportEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 3, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "atportIndex"))
atportIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 1)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readonly"))
atportDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 2)).setColumnInitializer(MibVariable((), DisplayString()).setMaxAccess("readwrite"))
atportType = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 3)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(19,8,24,16,7,4,3,17,14,12,22,6,23,13,21,2,5,11,9,18,10,1,15,20,)).addNamedValues(("other", 1), ("fdditalk", 10), ("arctalk", 11), ("smdstalk", 12), ("aurp", 13), ("frameRelay", 14), ("x25", 15), ("ip", 16), ("osi", 17), ("decnetIV", 18), ("arap", 19), ("localtalk", 2), ("isdnInThePacketMode", 20), ("nonAppleTalk3Com", 21), ("ipx", 22), ("arns", 23), ("hdlc", 24), ("ethertalk1", 3), ("ethertalk2", 4), ("tokentalk", 5), ("iptalk", 6), ("serialPPP", 7), ("serialNonstandard", 8), ("virtual", 9), )).setMaxAccess("readwrite"))
atportNetStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 4)).setColumnInitializer(MibVariable((), ATNetworkNumber()).setMaxAccess("readwrite"))
atportNetEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 5)).setColumnInitializer(MibVariable((), ATNetworkNumber()).setMaxAccess("readwrite"))
atportNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 6)).setColumnInitializer(MibVariable((), DdpNodeAddress()).setMaxAccess("readwrite"))
atportStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 7)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(7,3,2,5,6,4,1,)).addNamedValues(("routing", 1), ("unconfigured", 2), ("off", 3), ("invalid", 4), ("endNode", 5), ("offDueToConflict", 6), ("other", 7), )).setMaxAccess("readwrite"))
atportNetConfig = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 8)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(6,3,4,2,5,1,)).addNamedValues(("conflictOrientedSeed", 1), ("garnered", 2), ("guessed", 3), ("unconfigured", 4), ("conflictAverseSeed", 5), ("softSeed", 6), )).setMaxAccess("readwrite"))
atportZoneConfig = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 9)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(6,3,4,2,5,1,)).addNamedValues(("conflictOrientedSeed", 1), ("garnered", 2), ("guessed", 3), ("unconfigured", 4), ("conflictAverseSeed", 5), ("softSeed", 6), )).setMaxAccess("readwrite"))
atportZoneDefault = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 10)).setColumnInitializer(MibVariable((), ATName()).setMaxAccess("readwrite"))
atportIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 11)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readwrite"))
atportNetFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 12)).setColumnInitializer(MibVariable((), DdpNodeAddress()).setMaxAccess("readonly"))
atportZoneFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 13)).setColumnInitializer(MibVariable((), DdpNodeAddress()).setMaxAccess("readonly"))
atportInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 14)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
atportOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 15)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
atportHome = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 16)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(2,1,)).addNamedValues(("home", 1), ("notHome", 2), )).setMaxAccess("readonly"))
atportCurrentZone = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 17)).setColumnInitializer(MibVariable((), ATName()).setMaxAccess("readwrite"))
atportConflictPhysAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 18)).setColumnInitializer(MibVariable((), OctetString()).setMaxAccess("readonly"))
atportZoneTable = MibTable((1, 3, 6, 1, 2, 1, 13, 3, 2))
atportZoneEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 3, 2, 1)).setIndexNames((0, "APPLETALK-MIB", "atportZonePort"), (0, "APPLETALK-MIB", "atportZoneName"))
atportZonePort = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 2, 1, 1)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("noaccess"))
atportZoneName = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 2, 1, 2)).setColumnInitializer(MibVariable((), ATName().addConstraints(subtypes.ValueRangeConstraint(1, 32))).setMaxAccess("noaccess"))
atportZoneStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 2, 1, 3)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(1,2,)).addNamedValues(("valid", 1), ("invalid", 2), )).setMaxAccess("readwrite"))
ddp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 4))
ddpOutRequests = MibVariable((1, 3, 6, 1, 2, 1, 13, 4, 1), Counter()).setMaxAccess("readonly")
ddpOutShorts = MibVariable((1, 3, 6, 1, 2, 1, 13, 4, 2), Counter()).setMaxAccess("readonly")
ddpOutLongs = MibVariable((1, 3, 6, 1, 2, 1, 13, 4, 3), Counter()).setMaxAccess("readonly")
ddpInReceives = MibVariable((1, 3, 6, 1, 2, 1, 13, 4, 4), Counter()).setMaxAccess("readonly")
ddpForwRequests = MibVariable((1, 3, 6, 1, 2, 1, 13, 4, 5), Counter()).setMaxAccess("readonly")
ddpInLocalDatagrams = MibVariable((1, 3, 6, 1, 2, 1, 13, 4, 6), Counter()).setMaxAccess("readonly")
ddpNoProtocolHandlers = MibVariable((1, 3, 6, 1, 2, 1, 13, 4, 7), Counter()).setMaxAccess("readonly")
ddpOutNoRoutes = MibVariable((1, 3, 6, 1, 2, 1, 13, 4, 8), Counter()).setMaxAccess("readonly")
ddpTooShortErrors = MibVariable((1, 3, 6, 1, 2, 1, 13, 4, 9), Counter()).setMaxAccess("readonly")
ddpTooLongErrors = MibVariable((1, 3, 6, 1, 2, 1, 13, 4, 10), Counter()).setMaxAccess("readonly")
ddpBroadcastErrors = MibVariable((1, 3, 6, 1, 2, 1, 13, 4, 11), Counter()).setMaxAccess("readonly")
ddpShortDDPErrors = MibVariable((1, 3, 6, 1, 2, 1, 13, 4, 12), Counter()).setMaxAccess("readonly")
ddpHopCountErrors = MibVariable((1, 3, 6, 1, 2, 1, 13, 4, 13), Counter()).setMaxAccess("readonly")
ddpChecksumErrors = MibVariable((1, 3, 6, 1, 2, 1, 13, 4, 14), Counter()).setMaxAccess("readonly")
ddpListenerTable = MibTable((1, 3, 6, 1, 2, 1, 13, 4, 15))
ddpListenerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 4, 15, 1)).setIndexNames((0, "APPLETALK-MIB", "ddpListenerAddress"))
ddpListenerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 15, 1, 1)).setColumnInitializer(MibVariable((), DdpSocketAddress()).setMaxAccess("noaccess"))
ddpListenerInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 15, 1, 2)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
ddpListenerStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 15, 1, 3)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(1,2,)).addNamedValues(("valid", 1), ("invalid", 2), )).setMaxAccess("readwrite"))
ddpForwardingTable = MibTable((1, 3, 6, 1, 2, 1, 13, 4, 16))
ddpForwardingEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 4, 16, 1)).setIndexNames((0, "APPLETALK-MIB", "ddpForwardingNetEnd"))
ddpForwardingNetEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 1)).setColumnInitializer(MibVariable((), ATNetworkNumber()).setMaxAccess("noaccess"))
ddpForwardingNetStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 2)).setColumnInitializer(MibVariable((), ATNetworkNumber()).setMaxAccess("readonly"))
ddpForwardingNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 3)).setColumnInitializer(MibVariable((), OctetString()).setMaxAccess("readonly"))
ddpForwardingProto = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 4)).setColumnInitializer(MibVariable((), ObjectIdentifier()).setMaxAccess("readonly"))
ddpForwardingModifiedTime = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 5)).setColumnInitializer(MibVariable((), TimeTicks()).setMaxAccess("readonly"))
ddpForwardingUseCounts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 6)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
ddpForwardingPort = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 7)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readonly"))
ddpForwProtoOids = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 4, 17))
rtmpRoutingProto = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 4, 17, 1))
kipRoutingProto = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 4, 17, 2))
ddpForwardingTableOverflows = MibVariable((1, 3, 6, 1, 2, 1, 13, 4, 18), Counter()).setMaxAccess("readonly")
rtmp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 5))
rtmpTable = MibTable((1, 3, 6, 1, 2, 1, 13, 5, 1))
rtmpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 5, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "rtmpRangeStart"))
rtmpRangeStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 1)).setColumnInitializer(MibVariable((), ATNetworkNumber()).setMaxAccess("readonly"))
rtmpRangeEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 2)).setColumnInitializer(MibVariable((), ATNetworkNumber()).setMaxAccess("readonly"))
rtmpNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 3)).setColumnInitializer(MibVariable((), OctetString()).setMaxAccess("readonly"))
rtmpType = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 4)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(2,1,4,3,)).addNamedValues(("other", 1), ("appletalk", 2), ("serialPPP", 3), ("serialNonstandard", 4), )).setMaxAccess("readonly"))
rtmpPort = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 5)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readonly"))
rtmpHops = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 6)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readonly"))
rtmpState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 7)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(3,1,2,4,5,)).addNamedValues(("good", 1), ("suspect", 2), ("badZero", 3), ("badOne", 4), ("invalid", 5), )).setMaxAccess("readwrite"))
rtmpInDataPkts = MibVariable((1, 3, 6, 1, 2, 1, 13, 5, 2), Counter()).setMaxAccess("readonly")
rtmpOutDataPkts = MibVariable((1, 3, 6, 1, 2, 1, 13, 5, 3), Counter()).setMaxAccess("readonly")
rtmpInRequestPkts = MibVariable((1, 3, 6, 1, 2, 1, 13, 5, 4), Counter()).setMaxAccess("readonly")
rtmpNextIREqualChanges = MibVariable((1, 3, 6, 1, 2, 1, 13, 5, 5), Counter()).setMaxAccess("readonly")
rtmpNextIRLessChanges = MibVariable((1, 3, 6, 1, 2, 1, 13, 5, 6), Counter()).setMaxAccess("readonly")
rtmpRouteDeletes = MibVariable((1, 3, 6, 1, 2, 1, 13, 5, 7), Counter()).setMaxAccess("readonly")
rtmpRoutingTableOverflows = MibVariable((1, 3, 6, 1, 2, 1, 13, 5, 8), Counter()).setMaxAccess("readonly")
kip = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 6))
kipTable = MibTable((1, 3, 6, 1, 2, 1, 13, 6, 1))
kipEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 6, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "kipNetStart"))
kipNetStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 1)).setColumnInitializer(MibVariable((), ATNetworkNumber()).setMaxAccess("readonly"))
kipNetEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 2)).setColumnInitializer(MibVariable((), ATNetworkNumber()).setMaxAccess("readwrite"))
kipNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 3)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("readwrite"))
kipHopCount = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 4)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readwrite"))
kipBCastAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 5)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("readwrite"))
kipCore = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 6)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(1,2,)).addNamedValues(("core", 1), ("notcore", 2), )).setMaxAccess("readwrite"))
kipType = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 7)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(3,4,5,2,1,)).addNamedValues(("kipRouter", 1), ("net", 2), ("host", 3), ("other", 4), ("async", 5), )).setMaxAccess("readwrite"))
kipState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 8)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(1,2,3,)).addNamedValues(("configured", 1), ("learned", 2), ("invalid", 3), )).setMaxAccess("readwrite"))
kipShare = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 9)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(1,2,)).addNamedValues(("shared", 1), ("private", 2), )).setMaxAccess("readwrite"))
kipFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 10)).setColumnInitializer(MibVariable((), IpAddress()).setMaxAccess("readonly"))
zipRouter = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 7))
zipTable = MibTable((1, 3, 6, 1, 2, 1, 13, 7, 1))
zipEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 7, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "zipZoneNetStart"), (0, "APPLETALK-MIB", "zipZoneIndex"))
zipZoneName = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 1)).setColumnInitializer(MibVariable((), ATName()).setMaxAccess("readonly"))
zipZoneIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 2)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readonly"))
zipZoneNetStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 3)).setColumnInitializer(MibVariable((), ATNetworkNumber()).setMaxAccess("readonly"))
zipZoneNetEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 4)).setColumnInitializer(MibVariable((), ATNetworkNumber()).setMaxAccess("readonly"))
zipZoneState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 5)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(1,2,)).addNamedValues(("valid", 1), ("invalid", 2), )).setMaxAccess("readwrite"))
zipZoneFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 6)).setColumnInitializer(MibVariable((), OctetString()).setMaxAccess("readonly"))
zipZonePort = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 7)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readonly"))
zipInZipQueries = MibVariable((1, 3, 6, 1, 2, 1, 13, 7, 2), Counter()).setMaxAccess("readonly")
zipInZipReplies = MibVariable((1, 3, 6, 1, 2, 1, 13, 7, 3), Counter()).setMaxAccess("readonly")
zipInZipExtendedReplies = MibVariable((1, 3, 6, 1, 2, 1, 13, 7, 4), Counter()).setMaxAccess("readonly")
zipZoneConflictErrors = MibVariable((1, 3, 6, 1, 2, 1, 13, 7, 5), Counter()).setMaxAccess("readonly")
zipInObsoletes = MibVariable((1, 3, 6, 1, 2, 1, 13, 7, 6), Counter()).setMaxAccess("readonly")
zipRouterNetInfoTable = MibTable((1, 3, 6, 1, 2, 1, 13, 7, 7))
zipRouterNetInfoEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 7, 7, 1)).setIndexNames((0, "APPLETALK-MIB", "atportIndex"))
zipInGetNetInfos = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 7, 1, 1)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
zipOutGetNetInfoReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 7, 1, 2)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
zipZoneOutInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 7, 1, 3)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
zipAddressInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 7, 1, 4)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
nbp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 8))
nbpTable = MibTable((1, 3, 6, 1, 2, 1, 13, 8, 1))
nbpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 8, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "nbpIndex"))
nbpIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 1)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readwrite"))
nbpObject = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 2)).setColumnInitializer(MibVariable((), ATName().addConstraints(subtypes.ValueRangeConstraint(1, 32))).setMaxAccess("readwrite"))
nbpType = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 3)).setColumnInitializer(MibVariable((), ATName().addConstraints(subtypes.ValueRangeConstraint(1, 32))).setMaxAccess("readwrite"))
nbpZone = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 4)).setColumnInitializer(MibVariable((), ATName()).setMaxAccess("readwrite"))
nbpState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 5)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(3,1,4,2,)).addNamedValues(("valid", 1), ("registering", 2), ("registrationFailed", 3), ("invalid", 4), )).setMaxAccess("readwrite"))
nbpAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 6)).setColumnInitializer(MibVariable((), DdpSocketAddress()).setMaxAccess("readwrite"))
nbpEnumerator = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 7)).setColumnInitializer(MibVariable((), Integer32().addConstraints(subtypes.ValueRangeConstraint(0, 255))).setMaxAccess("readonly"))
nbpInLookUpRequests = MibVariable((1, 3, 6, 1, 2, 1, 13, 8, 2), Counter()).setMaxAccess("readonly")
nbpInLookUpReplies = MibVariable((1, 3, 6, 1, 2, 1, 13, 8, 3), Counter()).setMaxAccess("readonly")
nbpInBroadcastRequests = MibVariable((1, 3, 6, 1, 2, 1, 13, 8, 4), Counter()).setMaxAccess("readonly")
nbpInForwardRequests = MibVariable((1, 3, 6, 1, 2, 1, 13, 8, 5), Counter()).setMaxAccess("readonly")
nbpOutLookUpReplies = MibVariable((1, 3, 6, 1, 2, 1, 13, 8, 6), Counter()).setMaxAccess("readonly")
nbpRegistrationFailures = MibVariable((1, 3, 6, 1, 2, 1, 13, 8, 7), Counter()).setMaxAccess("readonly")
nbpInErrors = MibVariable((1, 3, 6, 1, 2, 1, 13, 8, 8), Counter()).setMaxAccess("readonly")
atecho = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 9))
atechoRequests = MibVariable((1, 3, 6, 1, 2, 1, 13, 9, 1), Counter()).setMaxAccess("readonly")
atechoReplies = MibVariable((1, 3, 6, 1, 2, 1, 13, 9, 2), Counter()).setMaxAccess("readonly")
atechoOutRequests = MibVariable((1, 3, 6, 1, 2, 1, 13, 9, 3), Counter()).setMaxAccess("readonly")
atechoInReplies = MibVariable((1, 3, 6, 1, 2, 1, 13, 9, 4), Counter()).setMaxAccess("readonly")
atp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 10))
atpInPkts = MibVariable((1, 3, 6, 1, 2, 1, 13, 10, 1), Counter()).setMaxAccess("readonly")
atpOutPkts = MibVariable((1, 3, 6, 1, 2, 1, 13, 10, 2), Counter()).setMaxAccess("readonly")
atpTRequestRetransmissions = MibVariable((1, 3, 6, 1, 2, 1, 13, 10, 3), Counter()).setMaxAccess("readonly")
atpTResponseRetransmissions = MibVariable((1, 3, 6, 1, 2, 1, 13, 10, 4), Counter()).setMaxAccess("readonly")
atpReleaseTimerExpiredCounts = MibVariable((1, 3, 6, 1, 2, 1, 13, 10, 5), Counter()).setMaxAccess("readonly")
atpRetryCountExceededs = MibVariable((1, 3, 6, 1, 2, 1, 13, 10, 6), Counter()).setMaxAccess("readonly")
atpListenerTable = MibTable((1, 3, 6, 1, 2, 1, 13, 10, 7))
atpListenerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 10, 7, 1)).setIndexNames((0, "APPLETALK-MIB", "atpListenerAddress"))
atpListenerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 10, 7, 1, 1)).setColumnInitializer(MibVariable((), DdpSocketAddress()).setMaxAccess("noaccess"))
atpListenerStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 10, 7, 1, 2)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(1,2,)).addNamedValues(("valid", 1), ("invalid", 2), )).setMaxAccess("readwrite"))
pap = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 11))
papInOpenConns = MibVariable((1, 3, 6, 1, 2, 1, 13, 11, 1), Counter()).setMaxAccess("readonly")
papOutOpenConns = MibVariable((1, 3, 6, 1, 2, 1, 13, 11, 2), Counter()).setMaxAccess("readonly")
papInDatas = MibVariable((1, 3, 6, 1, 2, 1, 13, 11, 3), Counter()).setMaxAccess("readonly")
papOutDatas = MibVariable((1, 3, 6, 1, 2, 1, 13, 11, 4), Counter()).setMaxAccess("readonly")
papInCloseConns = MibVariable((1, 3, 6, 1, 2, 1, 13, 11, 5), Counter()).setMaxAccess("readonly")
papOutCloseConns = MibVariable((1, 3, 6, 1, 2, 1, 13, 11, 6), Counter()).setMaxAccess("readonly")
papTickleTimeoutCloses = MibVariable((1, 3, 6, 1, 2, 1, 13, 11, 7), Counter()).setMaxAccess("readonly")
papServerTable = MibTable((1, 3, 6, 1, 2, 1, 13, 11, 8))
papServerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 11, 8, 1)).setIndexNames((0, "APPLETALK-MIB", "papServerIndex"))
papServerIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 1)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("noaccess"))
papServerListeningSocket = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 2)).setColumnInitializer(MibVariable((), DdpSocketAddress()).setMaxAccess("readwrite"))
papServerStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 3)).setColumnInitializer(MibVariable((), DisplayString()).setMaxAccess("readonly"))
papServerCompletedJobs = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 4)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
papServerBusyJobs = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 5)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readonly"))
papServerFreeJobs = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 6)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readonly"))
papServerAuthenticationFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 7)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
papServerAccountingFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 8)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
papServerGeneralFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 9)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
papServerState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 10)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(1,2,)).addNamedValues(("valid", 1), ("invalid", 2), )).setMaxAccess("readwrite"))
papServerLastStatusMsg = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 11)).setColumnInitializer(MibVariable((), DisplayString()).setMaxAccess("readonly"))
asp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 12))
aspInputTransactions = MibVariable((1, 3, 6, 1, 2, 1, 13, 12, 1), Counter()).setMaxAccess("readonly")
aspOutputTransactions = MibVariable((1, 3, 6, 1, 2, 1, 13, 12, 2), Counter()).setMaxAccess("readonly")
aspInOpenSessions = MibVariable((1, 3, 6, 1, 2, 1, 13, 12, 3), Counter()).setMaxAccess("readonly")
aspOutOpenSessions = MibVariable((1, 3, 6, 1, 2, 1, 13, 12, 4), Counter()).setMaxAccess("readonly")
aspInCloseSessions = MibVariable((1, 3, 6, 1, 2, 1, 13, 12, 5), Counter()).setMaxAccess("readonly")
aspOutCloseSessions = MibVariable((1, 3, 6, 1, 2, 1, 13, 12, 6), Counter()).setMaxAccess("readonly")
aspNoMoreSessionsErrors = MibVariable((1, 3, 6, 1, 2, 1, 13, 12, 7), Counter()).setMaxAccess("readonly")
aspTickleTimeOutCloses = MibVariable((1, 3, 6, 1, 2, 1, 13, 12, 8), Counter()).setMaxAccess("readonly")
aspConnTable = MibTable((1, 3, 6, 1, 2, 1, 13, 12, 9))
aspConnEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 12, 9, 1)).setIndexNames((0, "APPLETALK-MIB", "aspConnLocalAddress"), (0, "APPLETALK-MIB", "aspConnRemoteAddress"), (0, "APPLETALK-MIB", "aspConnID"))
aspConnLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 1)).setColumnInitializer(MibVariable((), DdpSocketAddress()).setMaxAccess("noaccess"))
aspConnRemoteAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 2)).setColumnInitializer(MibVariable((), DdpSocketAddress()).setMaxAccess("noaccess"))
aspConnID = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 3)).setColumnInitializer(MibVariable((), Integer32().addConstraints(subtypes.ValueRangeConstraint(1, 255))).setMaxAccess("noaccess"))
aspConnLastReqNum = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 4)).setColumnInitializer(MibVariable((), Integer32().addConstraints(subtypes.ValueRangeConstraint(1, 65535))).setMaxAccess("readonly"))
aspConnServerEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 5)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(2,3,1,)).addNamedValues(("sss", 1), ("wss", 2), ("sls", 3), )).setMaxAccess("readonly"))
aspConnState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 6)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(1,3,2,)).addNamedValues(("open", 1), ("closed", 2), ("invalid", 3), )).setMaxAccess("readwrite"))
adsp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 13))
adspInPkts = MibVariable((1, 3, 6, 1, 2, 1, 13, 13, 1), Counter()).setMaxAccess("readonly")
adspOutPkts = MibVariable((1, 3, 6, 1, 2, 1, 13, 13, 2), Counter()).setMaxAccess("readonly")
adspInOctets = MibVariable((1, 3, 6, 1, 2, 1, 13, 13, 3), Counter()).setMaxAccess("readonly")
adspOutOctets = MibVariable((1, 3, 6, 1, 2, 1, 13, 13, 4), Counter()).setMaxAccess("readonly")
adspInDataPkts = MibVariable((1, 3, 6, 1, 2, 1, 13, 13, 5), Counter()).setMaxAccess("readonly")
adspOutDataPkts = MibVariable((1, 3, 6, 1, 2, 1, 13, 13, 6), Counter()).setMaxAccess("readonly")
adspTimeoutErrors = MibVariable((1, 3, 6, 1, 2, 1, 13, 13, 7), Counter()).setMaxAccess("readonly")
adspTimeoutCloseErrors = MibVariable((1, 3, 6, 1, 2, 1, 13, 13, 8), Counter()).setMaxAccess("readonly")
adspConnTable = MibTable((1, 3, 6, 1, 2, 1, 13, 13, 9))
adspConnEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 13, 9, 1)).setIndexNames((0, "APPLETALK-MIB", "adspConnLocalAddress"), (0, "APPLETALK-MIB", "adspConnRemoteAddress"), (0, "APPLETALK-MIB", "adspConnLocalConnID"))
adspConnLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 1)).setColumnInitializer(MibVariable((), DdpSocketAddress()).setMaxAccess("noaccess"))
adspConnLocalConnID = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 2)).setColumnInitializer(MibVariable((), Integer32().addConstraints(subtypes.ValueRangeConstraint(0, 65535))).setMaxAccess("noaccess"))
adspConnRemoteAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 3)).setColumnInitializer(MibVariable((), DdpSocketAddress()).setMaxAccess("noaccess"))
adspConnRemoteConnID = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 4)).setColumnInitializer(MibVariable((), Integer32().addConstraints(subtypes.ValueRangeConstraint(0, 65535))).setMaxAccess("readonly"))
adspConnState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 5)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(4,5,2,3,1,6,)).addNamedValues(("open", 1), ("localHalfOpen", 2), ("remoteHalfOpen", 3), ("listening", 4), ("closed", 5), ("invalid", 6), )).setMaxAccess("readwrite"))
atportptop = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14))
atportPtoPTable = MibTable((1, 3, 6, 1, 2, 1, 13, 14, 1))
atportPtoPEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 14, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "atportPtoPIndex"))
atportPtoPIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 1)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("noaccess"))
atportPtoPProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 2)).setColumnInitializer(MibVariable((), ObjectIdentifier()).setMaxAccess("readwrite"))
atportPtoPRemoteName = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 3)).setColumnInitializer(MibVariable((), DisplayString()).setMaxAccess("readwrite"))
atportPtoPRemoteAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 4)).setColumnInitializer(MibVariable((), OctetString()).setMaxAccess("readwrite"))
atportPtoPPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 5)).setColumnInitializer(MibVariable((), Integer32()).setMaxAccess("readwrite"))
atportPtoPStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 6)).setColumnInitializer(MibVariable((), Integer().addConstraints(subtypes.SingleValueConstraint(1,2,)).addNamedValues(("valid", 1), ("invalid", 2), )).setMaxAccess("readwrite"))
atportPtoPProtoOids = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2))
pToPProtoOther = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 1))
pToPProtoAurp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 2))
pToPProtoCaymanUdp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 3))
pToPProtoAtkvmsDecnetIV = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 4))
pToPProtoLiaisonUdp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 5))
pToPProtoIpx = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 6))
pToPProtoShivaIp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 7))
rtmpStub = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 16))
rtmpOutRequestPkts = MibVariable((1, 3, 6, 1, 2, 1, 13, 16, 1), Counter()).setMaxAccess("readonly")
rtmpInVersionMismatches = MibVariable((1, 3, 6, 1, 2, 1, 13, 16, 2), Counter()).setMaxAccess("readonly")
rtmpInErrors = MibVariable((1, 3, 6, 1, 2, 1, 13, 16, 3), Counter()).setMaxAccess("readonly")
zipEndNode = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 17))
zipNetInfoTable = MibTable((1, 3, 6, 1, 2, 1, 13, 17, 1))
zipNetInfoEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 17, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "atportIndex"))
zipOutGetNetInfos = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 17, 1, 1, 1)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
zipInGetNetInfoReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 17, 1, 1, 2)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
zipZoneInInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 17, 1, 1, 3)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
zipInErrors = MibVariable((1, 3, 6, 1, 2, 1, 13, 17, 2), Counter()).setMaxAccess("readonly")
perPort = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 18))
perPortTable = MibTable((1, 3, 6, 1, 2, 1, 13, 18, 1))
perPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 18, 1, 1)).setIndexNames((0, "APPLETALK-MIB", "atportIndex"))
perPortAarpInProbes = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 1)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortAarpOutProbes = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 2)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortAarpInReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 3)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortAarpOutReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 4)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortAarpInRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 5)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortAarpOutRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 6)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortDdpInReceives = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 7)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortDdpInLocalDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 8)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortDdpNoProtocolHandlers = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 9)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortDdpTooShortErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 10)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortDdpTooLongErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 11)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortDdpChecksumErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 12)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortDdpForwRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 13)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortRtmpInDataPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 14)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortRtmpOutDataPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 15)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortRtmpInRequestPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 16)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortRtmpRouteDeletes = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 17)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortZipInZipQueries = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 18)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortZipInZipReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 19)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortZipInZipExtendedReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 20)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortZipZoneConflictErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 21)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortZipInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 22)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortNbpInLookUpRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 23)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortNbpInLookUpReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 24)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortNbpInBroadcastRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 25)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortNbpInForwardRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 26)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortNbpOutLookUpReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 27)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortNbpRegistrationFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 28)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortNbpInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 29)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortEchoRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 30)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))
perPortEchoReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 31)).setColumnInitializer(MibVariable((), Counter()).setMaxAccess("readonly"))

# Augmentions

# Exports

# Types
mibBuilder.exportSymbols("APPLETALK-MIB", ATName=ATName, ATNetworkNumber=ATNetworkNumber, DdpNodeAddress=DdpNodeAddress, DdpSocketAddress=DdpSocketAddress)

# Objects
mibBuilder.exportSymbols("APPLETALK-MIB", appletalk=appletalk, llap=llap, llapTable=llapTable, llapEntry=llapEntry, llapIfIndex=llapIfIndex, llapInPkts=llapInPkts, llapOutPkts=llapOutPkts, llapInNoHandlers=llapInNoHandlers, llapInLengthErrors=llapInLengthErrors, llapInErrors=llapInErrors, llapCollisions=llapCollisions, llapDefers=llapDefers, llapNoDataErrors=llapNoDataErrors, llapRandomCTSErrors=llapRandomCTSErrors, llapFCSErrors=llapFCSErrors, aarp=aarp, aarpTable=aarpTable, aarpEntry=aarpEntry, aarpIfIndex=aarpIfIndex, aarpPhysAddress=aarpPhysAddress, aarpNetAddress=aarpNetAddress, aarpStatus=aarpStatus, aarpLookups=aarpLookups, aarpHits=aarpHits, atport=atport, atportTable=atportTable, atportEntry=atportEntry, atportIndex=atportIndex, atportDescr=atportDescr, atportType=atportType, atportNetStart=atportNetStart, atportNetEnd=atportNetEnd, atportNetAddress=atportNetAddress, atportStatus=atportStatus, atportNetConfig=atportNetConfig, atportZoneConfig=atportZoneConfig, atportZoneDefault=atportZoneDefault, atportIfIndex=atportIfIndex, atportNetFrom=atportNetFrom, atportZoneFrom=atportZoneFrom, atportInPkts=atportInPkts, atportOutPkts=atportOutPkts, atportHome=atportHome, atportCurrentZone=atportCurrentZone, atportConflictPhysAddr=atportConflictPhysAddr, atportZoneTable=atportZoneTable, atportZoneEntry=atportZoneEntry, atportZonePort=atportZonePort, atportZoneName=atportZoneName, atportZoneStatus=atportZoneStatus, ddp=ddp, ddpOutRequests=ddpOutRequests, ddpOutShorts=ddpOutShorts, ddpOutLongs=ddpOutLongs, ddpInReceives=ddpInReceives, ddpForwRequests=ddpForwRequests, ddpInLocalDatagrams=ddpInLocalDatagrams, ddpNoProtocolHandlers=ddpNoProtocolHandlers, ddpOutNoRoutes=ddpOutNoRoutes, ddpTooShortErrors=ddpTooShortErrors, ddpTooLongErrors=ddpTooLongErrors, ddpBroadcastErrors=ddpBroadcastErrors, ddpShortDDPErrors=ddpShortDDPErrors, ddpHopCountErrors=ddpHopCountErrors, ddpChecksumErrors=ddpChecksumErrors, ddpListenerTable=ddpListenerTable, ddpListenerEntry=ddpListenerEntry, ddpListenerAddress=ddpListenerAddress, ddpListenerInPkts=ddpListenerInPkts, ddpListenerStatus=ddpListenerStatus, ddpForwardingTable=ddpForwardingTable, ddpForwardingEntry=ddpForwardingEntry, ddpForwardingNetEnd=ddpForwardingNetEnd, ddpForwardingNetStart=ddpForwardingNetStart, ddpForwardingNextHop=ddpForwardingNextHop, ddpForwardingProto=ddpForwardingProto, ddpForwardingModifiedTime=ddpForwardingModifiedTime, ddpForwardingUseCounts=ddpForwardingUseCounts, ddpForwardingPort=ddpForwardingPort, ddpForwProtoOids=ddpForwProtoOids, rtmpRoutingProto=rtmpRoutingProto, kipRoutingProto=kipRoutingProto, ddpForwardingTableOverflows=ddpForwardingTableOverflows, rtmp=rtmp, rtmpTable=rtmpTable, rtmpEntry=rtmpEntry, rtmpRangeStart=rtmpRangeStart, rtmpRangeEnd=rtmpRangeEnd, rtmpNextHop=rtmpNextHop, rtmpType=rtmpType, rtmpPort=rtmpPort, rtmpHops=rtmpHops, rtmpState=rtmpState, rtmpInDataPkts=rtmpInDataPkts, rtmpOutDataPkts=rtmpOutDataPkts, rtmpInRequestPkts=rtmpInRequestPkts, rtmpNextIREqualChanges=rtmpNextIREqualChanges, rtmpNextIRLessChanges=rtmpNextIRLessChanges, rtmpRouteDeletes=rtmpRouteDeletes, rtmpRoutingTableOverflows=rtmpRoutingTableOverflows, kip=kip, kipTable=kipTable, kipEntry=kipEntry, kipNetStart=kipNetStart, kipNetEnd=kipNetEnd, kipNextHop=kipNextHop, kipHopCount=kipHopCount, kipBCastAddr=kipBCastAddr, kipCore=kipCore, kipType=kipType, kipState=kipState, kipShare=kipShare, kipFrom=kipFrom, zipRouter=zipRouter, zipTable=zipTable, zipEntry=zipEntry, zipZoneName=zipZoneName, zipZoneIndex=zipZoneIndex, zipZoneNetStart=zipZoneNetStart, zipZoneNetEnd=zipZoneNetEnd, zipZoneState=zipZoneState, zipZoneFrom=zipZoneFrom, zipZonePort=zipZonePort, zipInZipQueries=zipInZipQueries, zipInZipReplies=zipInZipReplies, zipInZipExtendedReplies=zipInZipExtendedReplies, zipZoneConflictErrors=zipZoneConflictErrors, zipInObsoletes=zipInObsoletes)
mibBuilder.exportSymbols("APPLETALK-MIB", zipRouterNetInfoTable=zipRouterNetInfoTable, zipRouterNetInfoEntry=zipRouterNetInfoEntry, zipInGetNetInfos=zipInGetNetInfos, zipOutGetNetInfoReplies=zipOutGetNetInfoReplies, zipZoneOutInvalids=zipZoneOutInvalids, zipAddressInvalids=zipAddressInvalids, nbp=nbp, nbpTable=nbpTable, nbpEntry=nbpEntry, nbpIndex=nbpIndex, nbpObject=nbpObject, nbpType=nbpType, nbpZone=nbpZone, nbpState=nbpState, nbpAddress=nbpAddress, nbpEnumerator=nbpEnumerator, nbpInLookUpRequests=nbpInLookUpRequests, nbpInLookUpReplies=nbpInLookUpReplies, nbpInBroadcastRequests=nbpInBroadcastRequests, nbpInForwardRequests=nbpInForwardRequests, nbpOutLookUpReplies=nbpOutLookUpReplies, nbpRegistrationFailures=nbpRegistrationFailures, nbpInErrors=nbpInErrors, atecho=atecho, atechoRequests=atechoRequests, atechoReplies=atechoReplies, atechoOutRequests=atechoOutRequests, atechoInReplies=atechoInReplies, atp=atp, atpInPkts=atpInPkts, atpOutPkts=atpOutPkts, atpTRequestRetransmissions=atpTRequestRetransmissions, atpTResponseRetransmissions=atpTResponseRetransmissions, atpReleaseTimerExpiredCounts=atpReleaseTimerExpiredCounts, atpRetryCountExceededs=atpRetryCountExceededs, atpListenerTable=atpListenerTable, atpListenerEntry=atpListenerEntry, atpListenerAddress=atpListenerAddress, atpListenerStatus=atpListenerStatus, pap=pap, papInOpenConns=papInOpenConns, papOutOpenConns=papOutOpenConns, papInDatas=papInDatas, papOutDatas=papOutDatas, papInCloseConns=papInCloseConns, papOutCloseConns=papOutCloseConns, papTickleTimeoutCloses=papTickleTimeoutCloses, papServerTable=papServerTable, papServerEntry=papServerEntry, papServerIndex=papServerIndex, papServerListeningSocket=papServerListeningSocket, papServerStatus=papServerStatus, papServerCompletedJobs=papServerCompletedJobs, papServerBusyJobs=papServerBusyJobs, papServerFreeJobs=papServerFreeJobs, papServerAuthenticationFailures=papServerAuthenticationFailures, papServerAccountingFailures=papServerAccountingFailures, papServerGeneralFailures=papServerGeneralFailures, papServerState=papServerState, papServerLastStatusMsg=papServerLastStatusMsg, asp=asp, aspInputTransactions=aspInputTransactions, aspOutputTransactions=aspOutputTransactions, aspInOpenSessions=aspInOpenSessions, aspOutOpenSessions=aspOutOpenSessions, aspInCloseSessions=aspInCloseSessions, aspOutCloseSessions=aspOutCloseSessions, aspNoMoreSessionsErrors=aspNoMoreSessionsErrors, aspTickleTimeOutCloses=aspTickleTimeOutCloses, aspConnTable=aspConnTable, aspConnEntry=aspConnEntry, aspConnLocalAddress=aspConnLocalAddress, aspConnRemoteAddress=aspConnRemoteAddress, aspConnID=aspConnID, aspConnLastReqNum=aspConnLastReqNum, aspConnServerEnd=aspConnServerEnd, aspConnState=aspConnState, adsp=adsp, adspInPkts=adspInPkts, adspOutPkts=adspOutPkts, adspInOctets=adspInOctets, adspOutOctets=adspOutOctets, adspInDataPkts=adspInDataPkts, adspOutDataPkts=adspOutDataPkts, adspTimeoutErrors=adspTimeoutErrors, adspTimeoutCloseErrors=adspTimeoutCloseErrors, adspConnTable=adspConnTable, adspConnEntry=adspConnEntry, adspConnLocalAddress=adspConnLocalAddress, adspConnLocalConnID=adspConnLocalConnID, adspConnRemoteAddress=adspConnRemoteAddress, adspConnRemoteConnID=adspConnRemoteConnID, adspConnState=adspConnState, atportptop=atportptop, atportPtoPTable=atportPtoPTable, atportPtoPEntry=atportPtoPEntry, atportPtoPIndex=atportPtoPIndex, atportPtoPProtocol=atportPtoPProtocol, atportPtoPRemoteName=atportPtoPRemoteName, atportPtoPRemoteAddress=atportPtoPRemoteAddress, atportPtoPPortIndex=atportPtoPPortIndex, atportPtoPStatus=atportPtoPStatus, atportPtoPProtoOids=atportPtoPProtoOids, pToPProtoOther=pToPProtoOther, pToPProtoAurp=pToPProtoAurp, pToPProtoCaymanUdp=pToPProtoCaymanUdp, pToPProtoAtkvmsDecnetIV=pToPProtoAtkvmsDecnetIV, pToPProtoLiaisonUdp=pToPProtoLiaisonUdp, pToPProtoIpx=pToPProtoIpx, pToPProtoShivaIp=pToPProtoShivaIp, rtmpStub=rtmpStub, rtmpOutRequestPkts=rtmpOutRequestPkts, rtmpInVersionMismatches=rtmpInVersionMismatches, rtmpInErrors=rtmpInErrors, zipEndNode=zipEndNode, zipNetInfoTable=zipNetInfoTable, zipNetInfoEntry=zipNetInfoEntry, zipOutGetNetInfos=zipOutGetNetInfos, zipInGetNetInfoReplies=zipInGetNetInfoReplies, zipZoneInInvalids=zipZoneInInvalids, zipInErrors=zipInErrors, perPort=perPort, perPortTable=perPortTable, perPortEntry=perPortEntry, perPortAarpInProbes=perPortAarpInProbes, perPortAarpOutProbes=perPortAarpOutProbes, perPortAarpInReqs=perPortAarpInReqs, perPortAarpOutReqs=perPortAarpOutReqs, perPortAarpInRsps=perPortAarpInRsps)
mibBuilder.exportSymbols("APPLETALK-MIB", perPortAarpOutRsps=perPortAarpOutRsps, perPortDdpInReceives=perPortDdpInReceives, perPortDdpInLocalDatagrams=perPortDdpInLocalDatagrams, perPortDdpNoProtocolHandlers=perPortDdpNoProtocolHandlers, perPortDdpTooShortErrors=perPortDdpTooShortErrors, perPortDdpTooLongErrors=perPortDdpTooLongErrors, perPortDdpChecksumErrors=perPortDdpChecksumErrors, perPortDdpForwRequests=perPortDdpForwRequests, perPortRtmpInDataPkts=perPortRtmpInDataPkts, perPortRtmpOutDataPkts=perPortRtmpOutDataPkts, perPortRtmpInRequestPkts=perPortRtmpInRequestPkts, perPortRtmpRouteDeletes=perPortRtmpRouteDeletes, perPortZipInZipQueries=perPortZipInZipQueries, perPortZipInZipReplies=perPortZipInZipReplies, perPortZipInZipExtendedReplies=perPortZipInZipExtendedReplies, perPortZipZoneConflictErrors=perPortZipZoneConflictErrors, perPortZipInErrors=perPortZipInErrors, perPortNbpInLookUpRequests=perPortNbpInLookUpRequests, perPortNbpInLookUpReplies=perPortNbpInLookUpReplies, perPortNbpInBroadcastRequests=perPortNbpInBroadcastRequests, perPortNbpInForwardRequests=perPortNbpInForwardRequests, perPortNbpOutLookUpReplies=perPortNbpOutLookUpReplies, perPortNbpRegistrationFailures=perPortNbpRegistrationFailures, perPortNbpInErrors=perPortNbpInErrors, perPortEchoRequests=perPortEchoRequests, perPortEchoReplies=perPortEchoReplies)

