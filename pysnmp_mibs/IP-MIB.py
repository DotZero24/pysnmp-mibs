# PySNMP SMI module. Autogenerated from smidump -f python IP-MIB
# by libsmi2pysnmp-0.0.7-alpha at Thu Nov 16 19:13:26 2006,
# Python version (2, 4, 3, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
( InetAddress, InetAddressPrefixLength, InetAddressType, InetVersion, InetZoneIndex, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType", "InetVersion", "InetZoneIndex")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Counter64, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, mib_2, zeroDotZero, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "mib-2", "zeroDotZero")
( PhysAddress, RowPointer, RowStatus, StorageType, TextualConvention, TestAndIncr, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "RowPointer", "RowStatus", "StorageType", "TextualConvention", "TestAndIncr", "TimeStamp", "TruthValue")

# Types

class IpAddressOriginTC(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(6,2,1,4,5,)
    namedValues = namedval.NamedValues(("other", 1), ("manual", 2), ("dhcp", 4), ("linklayer", 5), ("random", 6), )
    pass

class IpAddressPrefixOriginTC(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(2,5,1,4,3,)
    namedValues = namedval.NamedValues(("other", 1), ("manual", 2), ("wellknown", 3), ("dhcp", 4), ("routeradv", 5), )
    pass

class IpAddressStatusTC(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(2,4,3,7,6,1,5,8,)
    namedValues = namedval.NamedValues(("preferred", 1), ("deprecated", 2), ("invalid", 3), ("inaccessible", 4), ("unknown", 5), ("tentative", 6), ("duplicate", 7), ("optimistic", 8), )
    pass

class Ipv6AddressIfIdentifierTC(TextualConvention, OctetString):
    displayHint = "2x:"
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(0,8)
    pass


# Objects

ip = MibIdentifier((1, 3, 6, 1, 2, 1, 4))
ipForwarding = MibScalar((1, 3, 6, 1, 2, 1, 4, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("forwarding", 1), ("notForwarding", 2), ))).setMaxAccess("readwrite")
ipDefaultTTL = MibScalar((1, 3, 6, 1, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
ipInReceives = MibScalar((1, 3, 6, 1, 2, 1, 4, 3), Counter32()).setMaxAccess("readonly")
ipInHdrErrors = MibScalar((1, 3, 6, 1, 2, 1, 4, 4), Counter32()).setMaxAccess("readonly")
ipInAddrErrors = MibScalar((1, 3, 6, 1, 2, 1, 4, 5), Counter32()).setMaxAccess("readonly")
ipForwDatagrams = MibScalar((1, 3, 6, 1, 2, 1, 4, 6), Counter32()).setMaxAccess("readonly")
ipInUnknownProtos = MibScalar((1, 3, 6, 1, 2, 1, 4, 7), Counter32()).setMaxAccess("readonly")
ipInDiscards = MibScalar((1, 3, 6, 1, 2, 1, 4, 8), Counter32()).setMaxAccess("readonly")
ipInDelivers = MibScalar((1, 3, 6, 1, 2, 1, 4, 9), Counter32()).setMaxAccess("readonly")
ipOutRequests = MibScalar((1, 3, 6, 1, 2, 1, 4, 10), Counter32()).setMaxAccess("readonly")
ipOutDiscards = MibScalar((1, 3, 6, 1, 2, 1, 4, 11), Counter32()).setMaxAccess("readonly")
ipOutNoRoutes = MibScalar((1, 3, 6, 1, 2, 1, 4, 12), Counter32()).setMaxAccess("readonly")
ipReasmTimeout = MibScalar((1, 3, 6, 1, 2, 1, 4, 13), Integer32()).setMaxAccess("readonly").setUnits("seconds")
ipReasmReqds = MibScalar((1, 3, 6, 1, 2, 1, 4, 14), Counter32()).setMaxAccess("readonly")
ipReasmOKs = MibScalar((1, 3, 6, 1, 2, 1, 4, 15), Counter32()).setMaxAccess("readonly")
ipReasmFails = MibScalar((1, 3, 6, 1, 2, 1, 4, 16), Counter32()).setMaxAccess("readonly")
ipFragOKs = MibScalar((1, 3, 6, 1, 2, 1, 4, 17), Counter32()).setMaxAccess("readonly")
ipFragFails = MibScalar((1, 3, 6, 1, 2, 1, 4, 18), Counter32()).setMaxAccess("readonly")
ipFragCreates = MibScalar((1, 3, 6, 1, 2, 1, 4, 19), Counter32()).setMaxAccess("readonly")
ipAddrTable = MibTable((1, 3, 6, 1, 2, 1, 4, 20))
ipAddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 20, 1)).setIndexNames((0, "IP-MIB", "ipAdEntAddr"))
ipAdEntAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 1), IpAddress()).setMaxAccess("readonly")
ipAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess("readonly")
ipAdEntNetMask = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 3), IpAddress()).setMaxAccess("readonly")
ipAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
ipAdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
ipNetToMediaTable = MibTable((1, 3, 6, 1, 2, 1, 4, 22))
ipNetToMediaEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 22, 1)).setIndexNames((0, "IP-MIB", "ipNetToMediaIfIndex"), (0, "IP-MIB", "ipNetToMediaNetAddress"))
ipNetToMediaIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess("readcreate")
ipNetToMediaPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 2), PhysAddress().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 65535))).setMaxAccess("readcreate")
ipNetToMediaNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 3), IpAddress()).setMaxAccess("readcreate")
ipNetToMediaType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,4,)).subtype(namedValues=namedval.NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4), ))).setMaxAccess("readcreate")
ipRoutingDiscards = MibScalar((1, 3, 6, 1, 2, 1, 4, 23), Counter32()).setMaxAccess("readonly")
ipv6IpForwarding = MibScalar((1, 3, 6, 1, 2, 1, 4, 25), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("forwarding", 1), ("notForwarding", 2), ))).setMaxAccess("readwrite")
ipv6IpDefaultHopLimit = MibScalar((1, 3, 6, 1, 2, 1, 4, 26), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
ipv4InterfaceTableLastChange = MibScalar((1, 3, 6, 1, 2, 1, 4, 27), TimeStamp()).setMaxAccess("readonly")
ipv4InterfaceTable = MibTable((1, 3, 6, 1, 2, 1, 4, 28))
ipv4InterfaceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 28, 1)).setIndexNames((0, "IP-MIB", "ipv4InterfaceIfIndex"))
ipv4InterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 28, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
ipv4InterfaceReasmMaxSize = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 28, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
ipv4InterfaceEnableStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 28, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(("up", 1), ("down", 2), ))).setMaxAccess("readwrite")
ipv4InterfaceRetransmitTime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 28, 1, 4), Unsigned32().clone(1000)).setMaxAccess("readonly")
ipv6InterfaceTableLastChange = MibScalar((1, 3, 6, 1, 2, 1, 4, 29), TimeStamp()).setMaxAccess("readonly")
ipv6InterfaceTable = MibTable((1, 3, 6, 1, 2, 1, 4, 30))
ipv6InterfaceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 30, 1)).setIndexNames((0, "IP-MIB", "ipv6InterfaceIfIndex"))
ipv6InterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 30, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
ipv6InterfaceReasmMaxSize = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 30, 1, 2), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1500, 65535))).setMaxAccess("readonly")
ipv6InterfaceIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 30, 1, 3), Ipv6AddressIfIdentifierTC()).setMaxAccess("readonly")
ipv6InterfaceEnableStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 30, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(("up", 1), ("down", 2), ))).setMaxAccess("readwrite")
ipv6InterfaceReachableTime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 30, 1, 6), Unsigned32()).setMaxAccess("readonly")
ipv6InterfaceRetransmitTime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 30, 1, 7), Unsigned32()).setMaxAccess("readonly")
ipv6InterfaceForwarding = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 30, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("forwarding", 1), ("notForwarding", 2), ))).setMaxAccess("readwrite")
ipTrafficStats = MibIdentifier((1, 3, 6, 1, 2, 1, 4, 31))
ipSystemStatsTable = MibTable((1, 3, 6, 1, 2, 1, 4, 31, 1))
ipSystemStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 31, 1, 1)).setIndexNames((0, "IP-MIB", "ipSystemStatsIPVersion"))
ipSystemStatsIPVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 1), InetVersion()).setMaxAccess("noaccess")
ipSystemStatsInReceives = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 3), Counter32()).setMaxAccess("readonly")
ipSystemStatsHCInReceives = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 4), Counter64()).setMaxAccess("readonly")
ipSystemStatsInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 5), Counter32()).setMaxAccess("readonly")
ipSystemStatsHCInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 6), Counter64()).setMaxAccess("readonly")
ipSystemStatsInHdrErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 7), Counter32()).setMaxAccess("readonly")
ipSystemStatsInNoRoutes = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 8), Counter32()).setMaxAccess("readonly")
ipSystemStatsInAddrErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 9), Counter32()).setMaxAccess("readonly")
ipSystemStatsInUnknownProtos = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 10), Counter32()).setMaxAccess("readonly")
ipSystemStatsInTruncatedPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 11), Counter32()).setMaxAccess("readonly")
ipSystemStatsInForwDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 12), Counter32()).setMaxAccess("readonly")
ipSystemStatsHCInForwDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 13), Counter64()).setMaxAccess("readonly")
ipSystemStatsReasmReqds = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 14), Counter32()).setMaxAccess("readonly")
ipSystemStatsReasmOKs = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 15), Counter32()).setMaxAccess("readonly")
ipSystemStatsReasmFails = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 16), Counter32()).setMaxAccess("readonly")
ipSystemStatsInDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 17), Counter32()).setMaxAccess("readonly")
ipSystemStatsInDelivers = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 18), Counter32()).setMaxAccess("readonly")
ipSystemStatsHCInDelivers = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 19), Counter64()).setMaxAccess("readonly")
ipSystemStatsOutRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 20), Counter32()).setMaxAccess("readonly")
ipSystemStatsHCOutRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 21), Counter64()).setMaxAccess("readonly")
ipSystemStatsOutNoRoutes = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 22), Counter32()).setMaxAccess("readonly")
ipSystemStatsOutForwDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 23), Counter32()).setMaxAccess("readonly")
ipSystemStatsHCOutForwDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 24), Counter64()).setMaxAccess("readonly")
ipSystemStatsOutDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 25), Counter32()).setMaxAccess("readonly")
ipSystemStatsOutFragReqds = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 26), Counter32()).setMaxAccess("readonly")
ipSystemStatsOutFragOKs = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 27), Counter32()).setMaxAccess("readonly")
ipSystemStatsOutFragFails = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 28), Counter32()).setMaxAccess("readonly")
ipSystemStatsOutFragCreates = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 29), Counter32()).setMaxAccess("readonly")
ipSystemStatsOutTransmits = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 30), Counter32()).setMaxAccess("readonly")
ipSystemStatsHCOutTransmits = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 31), Counter64()).setMaxAccess("readonly")
ipSystemStatsOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 32), Counter32()).setMaxAccess("readonly")
ipSystemStatsHCOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 33), Counter64()).setMaxAccess("readonly")
ipSystemStatsInMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 34), Counter32()).setMaxAccess("readonly")
ipSystemStatsHCInMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 35), Counter64()).setMaxAccess("readonly")
ipSystemStatsInMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 36), Counter32()).setMaxAccess("readonly")
ipSystemStatsHCInMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 37), Counter64()).setMaxAccess("readonly")
ipSystemStatsOutMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 38), Counter32()).setMaxAccess("readonly")
ipSystemStatsHCOutMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 39), Counter64()).setMaxAccess("readonly")
ipSystemStatsOutMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 40), Counter32()).setMaxAccess("readonly")
ipSystemStatsHCOutMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 41), Counter64()).setMaxAccess("readonly")
ipSystemStatsInBcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 42), Counter32()).setMaxAccess("readonly")
ipSystemStatsHCInBcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 43), Counter64()).setMaxAccess("readonly")
ipSystemStatsOutBcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 44), Counter32()).setMaxAccess("readonly")
ipSystemStatsHCOutBcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 45), Counter64()).setMaxAccess("readonly")
ipSystemStatsDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 46), TimeStamp()).setMaxAccess("readonly")
ipSystemStatsRefreshRate = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 1, 1, 47), Unsigned32()).setMaxAccess("readonly")
ipIfStatsTableLastChange = MibScalar((1, 3, 6, 1, 2, 1, 4, 31, 2), TimeStamp()).setMaxAccess("readonly")
ipIfStatsTable = MibTable((1, 3, 6, 1, 2, 1, 4, 31, 3))
ipIfStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 31, 3, 1)).setIndexNames((0, "IP-MIB", "ipIfStatsIPVersion"), (0, "IP-MIB", "ipIfStatsIfIndex"))
ipIfStatsIPVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 1), InetVersion()).setMaxAccess("noaccess")
ipIfStatsIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 2), InterfaceIndex()).setMaxAccess("noaccess")
ipIfStatsInReceives = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 3), Counter32()).setMaxAccess("readonly")
ipIfStatsHCInReceives = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 4), Counter64()).setMaxAccess("readonly")
ipIfStatsInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 5), Counter32()).setMaxAccess("readonly")
ipIfStatsHCInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 6), Counter64()).setMaxAccess("readonly")
ipIfStatsInHdrErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 7), Counter32()).setMaxAccess("readonly")
ipIfStatsInNoRoutes = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 8), Counter32()).setMaxAccess("readonly")
ipIfStatsInAddrErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 9), Counter32()).setMaxAccess("readonly")
ipIfStatsInUnknownProtos = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 10), Counter32()).setMaxAccess("readonly")
ipIfStatsInTruncatedPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 11), Counter32()).setMaxAccess("readonly")
ipIfStatsInForwDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 12), Counter32()).setMaxAccess("readonly")
ipIfStatsHCInForwDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 13), Counter64()).setMaxAccess("readonly")
ipIfStatsReasmReqds = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 14), Counter32()).setMaxAccess("readonly")
ipIfStatsReasmOKs = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 15), Counter32()).setMaxAccess("readonly")
ipIfStatsReasmFails = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 16), Counter32()).setMaxAccess("readonly")
ipIfStatsInDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 17), Counter32()).setMaxAccess("readonly")
ipIfStatsInDelivers = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 18), Counter32()).setMaxAccess("readonly")
ipIfStatsHCInDelivers = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 19), Counter64()).setMaxAccess("readonly")
ipIfStatsOutRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 20), Counter32()).setMaxAccess("readonly")
ipIfStatsHCOutRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 21), Counter64()).setMaxAccess("readonly")
ipIfStatsOutForwDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 23), Counter32()).setMaxAccess("readonly")
ipIfStatsHCOutForwDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 24), Counter64()).setMaxAccess("readonly")
ipIfStatsOutDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 25), Counter32()).setMaxAccess("readonly")
ipIfStatsOutFragReqds = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 26), Counter32()).setMaxAccess("readonly")
ipIfStatsOutFragOKs = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 27), Counter32()).setMaxAccess("readonly")
ipIfStatsOutFragFails = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 28), Counter32()).setMaxAccess("readonly")
ipIfStatsOutFragCreates = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 29), Counter32()).setMaxAccess("readonly")
ipIfStatsOutTransmits = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 30), Counter32()).setMaxAccess("readonly")
ipIfStatsHCOutTransmits = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 31), Counter64()).setMaxAccess("readonly")
ipIfStatsOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 32), Counter32()).setMaxAccess("readonly")
ipIfStatsHCOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 33), Counter64()).setMaxAccess("readonly")
ipIfStatsInMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 34), Counter32()).setMaxAccess("readonly")
ipIfStatsHCInMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 35), Counter64()).setMaxAccess("readonly")
ipIfStatsInMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 36), Counter32()).setMaxAccess("readonly")
ipIfStatsHCInMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 37), Counter64()).setMaxAccess("readonly")
ipIfStatsOutMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 38), Counter32()).setMaxAccess("readonly")
ipIfStatsHCOutMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 39), Counter64()).setMaxAccess("readonly")
ipIfStatsOutMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 40), Counter32()).setMaxAccess("readonly")
ipIfStatsHCOutMcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 41), Counter64()).setMaxAccess("readonly")
ipIfStatsInBcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 42), Counter32()).setMaxAccess("readonly")
ipIfStatsHCInBcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 43), Counter64()).setMaxAccess("readonly")
ipIfStatsOutBcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 44), Counter32()).setMaxAccess("readonly")
ipIfStatsHCOutBcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 45), Counter64()).setMaxAccess("readonly")
ipIfStatsDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 46), TimeStamp()).setMaxAccess("readonly")
ipIfStatsRefreshRate = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 31, 3, 1, 47), Unsigned32()).setMaxAccess("readonly")
ipAddressPrefixTable = MibTable((1, 3, 6, 1, 2, 1, 4, 32))
ipAddressPrefixEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 32, 1)).setIndexNames((0, "IP-MIB", "ipAddressPrefixIfIndex"), (0, "IP-MIB", "ipAddressPrefixType"), (0, "IP-MIB", "ipAddressPrefixPrefix"), (0, "IP-MIB", "ipAddressPrefixLength"))
ipAddressPrefixIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
ipAddressPrefixType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 2), InetAddressType()).setMaxAccess("noaccess")
ipAddressPrefixPrefix = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 3), InetAddress()).setMaxAccess("noaccess")
ipAddressPrefixLength = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 4), InetAddressPrefixLength()).setMaxAccess("noaccess")
ipAddressPrefixOrigin = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 5), IpAddressPrefixOriginTC()).setMaxAccess("readonly")
ipAddressPrefixOnLinkFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 6), TruthValue()).setMaxAccess("readonly")
ipAddressPrefixAutonomousFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 7), TruthValue()).setMaxAccess("readonly")
ipAddressPrefixAdvPreferredLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 8), Unsigned32()).setMaxAccess("readonly")
ipAddressPrefixAdvValidLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 32, 1, 9), Unsigned32()).setMaxAccess("readonly")
ipAddressSpinLock = MibScalar((1, 3, 6, 1, 2, 1, 4, 33), TestAndIncr()).setMaxAccess("readwrite")
ipAddressTable = MibTable((1, 3, 6, 1, 2, 1, 4, 34))
ipAddressEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 34, 1)).setIndexNames((0, "IP-MIB", "ipAddressAddrType"), (0, "IP-MIB", "ipAddressAddr"))
ipAddressAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 1), InetAddressType()).setMaxAccess("noaccess")
ipAddressAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 2), InetAddress()).setMaxAccess("noaccess")
ipAddressIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
ipAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(("unicast", 1), ("anycast", 2), ("broadcast", 3), )).clone(1)).setMaxAccess("readcreate")
ipAddressPrefix = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 5), RowPointer().clone('0.0')).setMaxAccess("readonly")
ipAddressOrigin = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 6), IpAddressOriginTC()).setMaxAccess("readonly")
ipAddressStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 7), IpAddressStatusTC().clone('preferred')).setMaxAccess("readcreate")
ipAddressCreated = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 8), TimeStamp()).setMaxAccess("readonly")
ipAddressLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 9), TimeStamp()).setMaxAccess("readonly")
ipAddressRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 10), RowStatus()).setMaxAccess("readcreate")
ipAddressStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 34, 1, 11), StorageType().clone('volatile')).setMaxAccess("readcreate")
ipNetToPhysicalTable = MibTable((1, 3, 6, 1, 2, 1, 4, 35))
ipNetToPhysicalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 35, 1)).setIndexNames((0, "IP-MIB", "ipNetToPhysicalIfIndex"), (0, "IP-MIB", "ipNetToPhysicalNetAddressType"), (0, "IP-MIB", "ipNetToPhysicalNetAddress"))
ipNetToPhysicalIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 35, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
ipNetToPhysicalNetAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 35, 1, 2), InetAddressType()).setMaxAccess("noaccess")
ipNetToPhysicalNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 35, 1, 3), InetAddress()).setMaxAccess("noaccess")
ipNetToPhysicalPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 35, 1, 4), PhysAddress().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 65535))).setMaxAccess("readcreate")
ipNetToPhysicalLastUpdated = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 35, 1, 5), TimeStamp()).setMaxAccess("readonly")
ipNetToPhysicalType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 35, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,4,5,)).subtype(namedValues=namedval.NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4), ("local", 5), )).clone(4)).setMaxAccess("readcreate")
ipNetToPhysicalState = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 35, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,6,4,5,1,2,7,)).subtype(namedValues=namedval.NamedValues(("reachable", 1), ("stale", 2), ("delay", 3), ("probe", 4), ("invalid", 5), ("unknown", 6), ("incomplete", 7), ))).setMaxAccess("readonly")
ipNetToPhysicalRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 35, 1, 8), RowStatus()).setMaxAccess("readcreate")
ipv6ScopeZoneIndexTable = MibTable((1, 3, 6, 1, 2, 1, 4, 36))
ipv6ScopeZoneIndexEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 36, 1)).setIndexNames((0, "IP-MIB", "ipv6ScopeZoneIndexIfIndex"))
ipv6ScopeZoneIndexIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
ipv6ScopeZoneIndexLinkLocal = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 2), InetZoneIndex()).setMaxAccess("readonly")
ipv6ScopeZoneIndex3 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 3), InetZoneIndex()).setMaxAccess("readonly")
ipv6ScopeZoneIndexAdminLocal = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 4), InetZoneIndex()).setMaxAccess("readonly")
ipv6ScopeZoneIndexSiteLocal = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 5), InetZoneIndex()).setMaxAccess("readonly")
ipv6ScopeZoneIndex6 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 6), InetZoneIndex()).setMaxAccess("readonly")
ipv6ScopeZoneIndex7 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 7), InetZoneIndex()).setMaxAccess("readonly")
ipv6ScopeZoneIndexOrganizationLocal = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 8), InetZoneIndex()).setMaxAccess("readonly")
ipv6ScopeZoneIndex9 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 9), InetZoneIndex()).setMaxAccess("readonly")
ipv6ScopeZoneIndexA = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 10), InetZoneIndex()).setMaxAccess("readonly")
ipv6ScopeZoneIndexB = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 11), InetZoneIndex()).setMaxAccess("readonly")
ipv6ScopeZoneIndexC = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 12), InetZoneIndex()).setMaxAccess("readonly")
ipv6ScopeZoneIndexD = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 36, 1, 13), InetZoneIndex()).setMaxAccess("readonly")
ipDefaultRouterTable = MibTable((1, 3, 6, 1, 2, 1, 4, 37))
ipDefaultRouterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 37, 1)).setIndexNames((0, "IP-MIB", "ipDefaultRouterAddressType"), (0, "IP-MIB", "ipDefaultRouterAddress"), (0, "IP-MIB", "ipDefaultRouterIfIndex"))
ipDefaultRouterAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 37, 1, 1), InetAddressType()).setMaxAccess("noaccess")
ipDefaultRouterAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 37, 1, 2), InetAddress()).setMaxAccess("noaccess")
ipDefaultRouterIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 37, 1, 3), InterfaceIndex()).setMaxAccess("noaccess")
ipDefaultRouterLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 37, 1, 4), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
ipDefaultRouterPreference = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 37, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,-2,-1,)).subtype(namedValues=namedval.NamedValues(("low", -1), ("reserved", -2), ("medium", 0), ("high", 1), ))).setMaxAccess("readonly")
ipv6RouterAdvertSpinLock = MibScalar((1, 3, 6, 1, 2, 1, 4, 38), TestAndIncr()).setMaxAccess("readwrite")
ipv6RouterAdvertTable = MibTable((1, 3, 6, 1, 2, 1, 4, 39))
ipv6RouterAdvertEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 39, 1)).setIndexNames((0, "IP-MIB", "ipv6RouterAdvertIfIndex"))
ipv6RouterAdvertIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
ipv6RouterAdvertSendAdverts = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
ipv6RouterAdvertMaxInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 3), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(4, 1800)).clone(600)).setMaxAccess("readcreate")
ipv6RouterAdvertMinInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 4), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(3, 1350))).setMaxAccess("readcreate")
ipv6RouterAdvertManagedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
ipv6RouterAdvertOtherConfigFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
ipv6RouterAdvertLinkMTU = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 7), Unsigned32().clone(0)).setMaxAccess("readcreate")
ipv6RouterAdvertReachableTime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 8), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 3600000)).clone(0)).setMaxAccess("readcreate")
ipv6RouterAdvertRetransmitTime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 9), Unsigned32().clone(0)).setMaxAccess("readcreate")
ipv6RouterAdvertCurHopLimit = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 10), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
ipv6RouterAdvertDefaultLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 11), Unsigned32().subtype(subtypeSpec=constraint.ConstraintsUnion(constraint.ValueRangeConstraint(0,0),constraint.ValueRangeConstraint(4,9000),))).setMaxAccess("readcreate")
ipv6RouterAdvertRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 39, 1, 12), RowStatus()).setMaxAccess("readcreate")
icmp = MibIdentifier((1, 3, 6, 1, 2, 1, 5))
icmpInMsgs = MibScalar((1, 3, 6, 1, 2, 1, 5, 1), Counter32()).setMaxAccess("readonly")
icmpInErrors = MibScalar((1, 3, 6, 1, 2, 1, 5, 2), Counter32()).setMaxAccess("readonly")
icmpInDestUnreachs = MibScalar((1, 3, 6, 1, 2, 1, 5, 3), Counter32()).setMaxAccess("readonly")
icmpInTimeExcds = MibScalar((1, 3, 6, 1, 2, 1, 5, 4), Counter32()).setMaxAccess("readonly")
icmpInParmProbs = MibScalar((1, 3, 6, 1, 2, 1, 5, 5), Counter32()).setMaxAccess("readonly")
icmpInSrcQuenchs = MibScalar((1, 3, 6, 1, 2, 1, 5, 6), Counter32()).setMaxAccess("readonly")
icmpInRedirects = MibScalar((1, 3, 6, 1, 2, 1, 5, 7), Counter32()).setMaxAccess("readonly")
icmpInEchos = MibScalar((1, 3, 6, 1, 2, 1, 5, 8), Counter32()).setMaxAccess("readonly")
icmpInEchoReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 9), Counter32()).setMaxAccess("readonly")
icmpInTimestamps = MibScalar((1, 3, 6, 1, 2, 1, 5, 10), Counter32()).setMaxAccess("readonly")
icmpInTimestampReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 11), Counter32()).setMaxAccess("readonly")
icmpInAddrMasks = MibScalar((1, 3, 6, 1, 2, 1, 5, 12), Counter32()).setMaxAccess("readonly")
icmpInAddrMaskReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 13), Counter32()).setMaxAccess("readonly")
icmpOutMsgs = MibScalar((1, 3, 6, 1, 2, 1, 5, 14), Counter32()).setMaxAccess("readonly")
icmpOutErrors = MibScalar((1, 3, 6, 1, 2, 1, 5, 15), Counter32()).setMaxAccess("readonly")
icmpOutDestUnreachs = MibScalar((1, 3, 6, 1, 2, 1, 5, 16), Counter32()).setMaxAccess("readonly")
icmpOutTimeExcds = MibScalar((1, 3, 6, 1, 2, 1, 5, 17), Counter32()).setMaxAccess("readonly")
icmpOutParmProbs = MibScalar((1, 3, 6, 1, 2, 1, 5, 18), Counter32()).setMaxAccess("readonly")
icmpOutSrcQuenchs = MibScalar((1, 3, 6, 1, 2, 1, 5, 19), Counter32()).setMaxAccess("readonly")
icmpOutRedirects = MibScalar((1, 3, 6, 1, 2, 1, 5, 20), Counter32()).setMaxAccess("readonly")
icmpOutEchos = MibScalar((1, 3, 6, 1, 2, 1, 5, 21), Counter32()).setMaxAccess("readonly")
icmpOutEchoReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 22), Counter32()).setMaxAccess("readonly")
icmpOutTimestamps = MibScalar((1, 3, 6, 1, 2, 1, 5, 23), Counter32()).setMaxAccess("readonly")
icmpOutTimestampReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 24), Counter32()).setMaxAccess("readonly")
icmpOutAddrMasks = MibScalar((1, 3, 6, 1, 2, 1, 5, 25), Counter32()).setMaxAccess("readonly")
icmpOutAddrMaskReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 26), Counter32()).setMaxAccess("readonly")
icmpStatsTable = MibTable((1, 3, 6, 1, 2, 1, 5, 29))
icmpStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 5, 29, 1)).setIndexNames((0, "IP-MIB", "icmpStatsIPVersion"))
icmpStatsIPVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 29, 1, 1), InetVersion()).setMaxAccess("noaccess")
icmpStatsInMsgs = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 29, 1, 2), Counter32()).setMaxAccess("readonly")
icmpStatsInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 29, 1, 3), Counter32()).setMaxAccess("readonly")
icmpStatsOutMsgs = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 29, 1, 4), Counter32()).setMaxAccess("readonly")
icmpStatsOutErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 29, 1, 5), Counter32()).setMaxAccess("readonly")
icmpMsgStatsTable = MibTable((1, 3, 6, 1, 2, 1, 5, 30))
icmpMsgStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 5, 30, 1)).setIndexNames((0, "IP-MIB", "icmpMsgStatsIPVersion"), (0, "IP-MIB", "icmpMsgStatsType"))
icmpMsgStatsIPVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 30, 1, 1), InetVersion()).setMaxAccess("noaccess")
icmpMsgStatsType = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 30, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess("noaccess")
icmpMsgStatsInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 30, 1, 3), Counter32()).setMaxAccess("readonly")
icmpMsgStatsOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 5, 30, 1, 4), Counter32()).setMaxAccess("readonly")
ipMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 48)).setRevisions(("2006-02-02 00:00","1994-11-01 00:00","1991-03-31 00:00",))
ipMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 48, 2))
ipMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 48, 2, 1))
ipMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 48, 2, 2))

# Augmentions

# Groups

ipSystemStatsHCPacketGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 11)).setObjects(("IP-MIB", "ipSystemStatsHCInReceives"), ("IP-MIB", "ipSystemStatsHCOutForwDatagrams"), ("IP-MIB", "ipSystemStatsHCOutMcastPkts"), ("IP-MIB", "ipSystemStatsHCOutTransmits"), ("IP-MIB", "ipSystemStatsHCInForwDatagrams"), ("IP-MIB", "ipSystemStatsHCInDelivers"), ("IP-MIB", "ipSystemStatsHCOutRequests"), ("IP-MIB", "ipSystemStatsHCInMcastPkts"), )
icmpGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 2)).setObjects(("IP-MIB", "icmpOutRedirects"), ("IP-MIB", "icmpOutTimestamps"), ("IP-MIB", "icmpOutAddrMasks"), ("IP-MIB", "icmpInTimestamps"), ("IP-MIB", "icmpInEchos"), ("IP-MIB", "icmpInMsgs"), ("IP-MIB", "icmpInParmProbs"), ("IP-MIB", "icmpOutParmProbs"), ("IP-MIB", "icmpOutTimeExcds"), ("IP-MIB", "icmpInDestUnreachs"), ("IP-MIB", "icmpOutEchoReps"), ("IP-MIB", "icmpOutMsgs"), ("IP-MIB", "icmpOutTimestampReps"), ("IP-MIB", "icmpOutErrors"), ("IP-MIB", "icmpOutDestUnreachs"), ("IP-MIB", "icmpOutSrcQuenchs"), ("IP-MIB", "icmpOutAddrMaskReps"), ("IP-MIB", "icmpInAddrMaskReps"), ("IP-MIB", "icmpInTimeExcds"), ("IP-MIB", "icmpInErrors"), ("IP-MIB", "icmpOutEchos"), ("IP-MIB", "icmpInAddrMasks"), ("IP-MIB", "icmpInRedirects"), ("IP-MIB", "icmpInTimestampReps"), ("IP-MIB", "icmpInSrcQuenchs"), ("IP-MIB", "icmpInEchoReps"), )
ipv6ScopeGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 21)).setObjects(("IP-MIB", "ipv6ScopeZoneIndexLinkLocal"), ("IP-MIB", "ipv6ScopeZoneIndexSiteLocal"), ("IP-MIB", "ipv6ScopeZoneIndexAdminLocal"), ("IP-MIB", "ipv6ScopeZoneIndex3"), ("IP-MIB", "ipv6ScopeZoneIndex6"), ("IP-MIB", "ipv6ScopeZoneIndex7"), ("IP-MIB", "ipv6ScopeZoneIndexOrganizationLocal"), ("IP-MIB", "ipv6ScopeZoneIndexA"), ("IP-MIB", "ipv6ScopeZoneIndex9"), ("IP-MIB", "ipv6ScopeZoneIndexB"), ("IP-MIB", "ipv6ScopeZoneIndexC"), ("IP-MIB", "ipv6ScopeZoneIndexD"), )
ipDefaultRouterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 22)).setObjects(("IP-MIB", "ipDefaultRouterPreference"), ("IP-MIB", "ipDefaultRouterLifetime"), )
ipNetToPhysicalGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 20)).setObjects(("IP-MIB", "ipNetToPhysicalPhysAddress"), ("IP-MIB", "ipNetToPhysicalType"), ("IP-MIB", "ipNetToPhysicalRowStatus"), ("IP-MIB", "ipNetToPhysicalState"), ("IP-MIB", "ipNetToPhysicalLastUpdated"), )
ipGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 1)).setObjects(("IP-MIB", "ipInDelivers"), ("IP-MIB", "ipOutDiscards"), ("IP-MIB", "ipForwDatagrams"), ("IP-MIB", "ipReasmFails"), ("IP-MIB", "ipForwarding"), ("IP-MIB", "ipRoutingDiscards"), ("IP-MIB", "ipNetToMediaNetAddress"), ("IP-MIB", "ipNetToMediaType"), ("IP-MIB", "ipInHdrErrors"), ("IP-MIB", "ipFragFails"), ("IP-MIB", "ipAdEntReasmMaxSize"), ("IP-MIB", "ipInReceives"), ("IP-MIB", "ipReasmTimeout"), ("IP-MIB", "ipFragCreates"), ("IP-MIB", "ipAdEntIfIndex"), ("IP-MIB", "ipDefaultTTL"), ("IP-MIB", "ipInUnknownProtos"), ("IP-MIB", "ipReasmOKs"), ("IP-MIB", "ipAdEntAddr"), ("IP-MIB", "ipOutNoRoutes"), ("IP-MIB", "ipNetToMediaIfIndex"), ("IP-MIB", "ipInAddrErrors"), ("IP-MIB", "ipFragOKs"), ("IP-MIB", "ipOutRequests"), ("IP-MIB", "ipNetToMediaPhysAddress"), ("IP-MIB", "ipReasmReqds"), ("IP-MIB", "ipAdEntNetMask"), ("IP-MIB", "ipAdEntBcastAddr"), ("IP-MIB", "ipInDiscards"), )
ipLastChangeGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 7)).setObjects(("IP-MIB", "ipv6InterfaceTableLastChange"), ("IP-MIB", "ipIfStatsTableLastChange"), ("IP-MIB", "ipv4InterfaceTableLastChange"), )
ipv6GeneralGroup2 = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 5)).setObjects(("IP-MIB", "ipv6IpForwarding"), ("IP-MIB", "ipv6IpDefaultHopLimit"), )
ipSystemStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 8)).setObjects(("IP-MIB", "ipSystemStatsOutTransmits"), ("IP-MIB", "ipSystemStatsInMcastOctets"), ("IP-MIB", "ipSystemStatsOutFragOKs"), ("IP-MIB", "ipSystemStatsInTruncatedPkts"), ("IP-MIB", "ipSystemStatsRefreshRate"), ("IP-MIB", "ipSystemStatsInDelivers"), ("IP-MIB", "ipSystemStatsOutRequests"), ("IP-MIB", "ipSystemStatsInMcastPkts"), ("IP-MIB", "ipSystemStatsInHdrErrors"), ("IP-MIB", "ipSystemStatsOutMcastPkts"), ("IP-MIB", "ipSystemStatsReasmFails"), ("IP-MIB", "ipSystemStatsReasmReqds"), ("IP-MIB", "ipSystemStatsInDiscards"), ("IP-MIB", "ipSystemStatsOutNoRoutes"), ("IP-MIB", "ipSystemStatsInReceives"), ("IP-MIB", "ipSystemStatsInUnknownProtos"), ("IP-MIB", "ipSystemStatsDiscontinuityTime"), ("IP-MIB", "ipSystemStatsOutDiscards"), ("IP-MIB", "ipSystemStatsReasmOKs"), ("IP-MIB", "ipSystemStatsInNoRoutes"), ("IP-MIB", "ipSystemStatsOutMcastOctets"), ("IP-MIB", "ipSystemStatsOutFragReqds"), ("IP-MIB", "ipSystemStatsOutFragCreates"), ("IP-MIB", "ipSystemStatsOutFragFails"), ("IP-MIB", "ipSystemStatsOutOctets"), ("IP-MIB", "ipSystemStatsInOctets"), ("IP-MIB", "ipSystemStatsOutForwDatagrams"), ("IP-MIB", "ipSystemStatsInAddrErrors"), ("IP-MIB", "ipSystemStatsInForwDatagrams"), )
ipSystemStatsHCOctetGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 10)).setObjects(("IP-MIB", "ipSystemStatsHCInOctets"), ("IP-MIB", "ipSystemStatsHCOutOctets"), ("IP-MIB", "ipSystemStatsHCOutMcastOctets"), ("IP-MIB", "ipSystemStatsHCInMcastOctets"), )
icmpStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 24)).setObjects(("IP-MIB", "icmpMsgStatsInPkts"), ("IP-MIB", "icmpStatsInMsgs"), ("IP-MIB", "icmpStatsInErrors"), ("IP-MIB", "icmpMsgStatsOutPkts"), ("IP-MIB", "icmpStatsOutMsgs"), ("IP-MIB", "icmpStatsOutErrors"), )
ipv4SystemStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 9)).setObjects(("IP-MIB", "ipSystemStatsInBcastPkts"), ("IP-MIB", "ipSystemStatsOutBcastPkts"), )
ipAddressPrefixGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 18)).setObjects(("IP-MIB", "ipAddressPrefixOnLinkFlag"), ("IP-MIB", "ipAddressPrefixOrigin"), ("IP-MIB", "ipAddressPrefixAdvValidLifetime"), ("IP-MIB", "ipAddressPrefixAutonomousFlag"), ("IP-MIB", "ipAddressPrefixAdvPreferredLifetime"), )
ipv6IfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 6)).setObjects(("IP-MIB", "ipv6InterfaceRetransmitTime"), ("IP-MIB", "ipv6InterfaceReachableTime"), ("IP-MIB", "ipv6InterfaceEnableStatus"), ("IP-MIB", "ipv6InterfaceIdentifier"), ("IP-MIB", "ipv6InterfaceReasmMaxSize"), ("IP-MIB", "ipv6InterfaceForwarding"), )
ipv4SystemStatsHCPacketGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 12)).setObjects(("IP-MIB", "ipSystemStatsHCInBcastPkts"), ("IP-MIB", "ipSystemStatsHCOutBcastPkts"), )
ipv6RouterAdvertGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 23)).setObjects(("IP-MIB", "ipv6RouterAdvertRetransmitTime"), ("IP-MIB", "ipv6RouterAdvertRowStatus"), ("IP-MIB", "ipv6RouterAdvertSendAdverts"), ("IP-MIB", "ipv6RouterAdvertMaxInterval"), ("IP-MIB", "ipv6RouterAdvertReachableTime"), ("IP-MIB", "ipv6RouterAdvertOtherConfigFlag"), ("IP-MIB", "ipv6RouterAdvertManagedFlag"), ("IP-MIB", "ipv6RouterAdvertMinInterval"), ("IP-MIB", "ipv6RouterAdvertCurHopLimit"), ("IP-MIB", "ipv6RouterAdvertSpinLock"), ("IP-MIB", "ipv6RouterAdvertLinkMTU"), ("IP-MIB", "ipv6RouterAdvertDefaultLifetime"), )
ipv4IfStatsHCPacketGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 17)).setObjects(("IP-MIB", "ipIfStatsHCOutBcastPkts"), ("IP-MIB", "ipIfStatsHCInBcastPkts"), )
ipAddressGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 19)).setObjects(("IP-MIB", "ipAddressType"), ("IP-MIB", "ipAddressOrigin"), ("IP-MIB", "ipAddressSpinLock"), ("IP-MIB", "ipAddressLastChanged"), ("IP-MIB", "ipAddressStorageType"), ("IP-MIB", "ipAddressCreated"), ("IP-MIB", "ipAddressIfIndex"), ("IP-MIB", "ipAddressStatus"), ("IP-MIB", "ipAddressPrefix"), ("IP-MIB", "ipAddressRowStatus"), )
ipIfStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 13)).setObjects(("IP-MIB", "ipIfStatsOutFragOKs"), ("IP-MIB", "ipIfStatsRefreshRate"), ("IP-MIB", "ipIfStatsOutFragFails"), ("IP-MIB", "ipIfStatsInReceives"), ("IP-MIB", "ipIfStatsOutFragReqds"), ("IP-MIB", "ipIfStatsOutMcastPkts"), ("IP-MIB", "ipIfStatsOutForwDatagrams"), ("IP-MIB", "ipIfStatsOutMcastOctets"), ("IP-MIB", "ipIfStatsInNoRoutes"), ("IP-MIB", "ipIfStatsReasmOKs"), ("IP-MIB", "ipIfStatsInMcastPkts"), ("IP-MIB", "ipIfStatsDiscontinuityTime"), ("IP-MIB", "ipIfStatsOutDiscards"), ("IP-MIB", "ipIfStatsInAddrErrors"), ("IP-MIB", "ipIfStatsInHdrErrors"), ("IP-MIB", "ipIfStatsInOctets"), ("IP-MIB", "ipIfStatsInTruncatedPkts"), ("IP-MIB", "ipIfStatsOutRequests"), ("IP-MIB", "ipIfStatsInDiscards"), ("IP-MIB", "ipIfStatsInDelivers"), ("IP-MIB", "ipIfStatsOutFragCreates"), ("IP-MIB", "ipIfStatsReasmReqds"), ("IP-MIB", "ipIfStatsInForwDatagrams"), ("IP-MIB", "ipIfStatsInUnknownProtos"), ("IP-MIB", "ipIfStatsReasmFails"), ("IP-MIB", "ipIfStatsOutOctets"), ("IP-MIB", "ipIfStatsInMcastOctets"), ("IP-MIB", "ipIfStatsOutTransmits"), )
ipIfStatsHCPacketGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 16)).setObjects(("IP-MIB", "ipIfStatsHCInMcastPkts"), ("IP-MIB", "ipIfStatsHCOutMcastPkts"), ("IP-MIB", "ipIfStatsHCOutRequests"), ("IP-MIB", "ipIfStatsHCInDelivers"), ("IP-MIB", "ipIfStatsHCOutTransmits"), ("IP-MIB", "ipIfStatsHCInReceives"), ("IP-MIB", "ipIfStatsHCOutForwDatagrams"), ("IP-MIB", "ipIfStatsHCInForwDatagrams"), )
ipv4GeneralGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 3)).setObjects(("IP-MIB", "ipForwarding"), ("IP-MIB", "ipReasmTimeout"), ("IP-MIB", "ipDefaultTTL"), )
ipv4IfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 4)).setObjects(("IP-MIB", "ipv4InterfaceEnableStatus"), ("IP-MIB", "ipv4InterfaceRetransmitTime"), ("IP-MIB", "ipv4InterfaceReasmMaxSize"), )
ipIfStatsHCOctetGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 15)).setObjects(("IP-MIB", "ipIfStatsHCOutOctets"), ("IP-MIB", "ipIfStatsHCInMcastOctets"), ("IP-MIB", "ipIfStatsHCOutMcastOctets"), ("IP-MIB", "ipIfStatsHCInOctets"), )
ipv4IfStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 48, 2, 2, 14)).setObjects(("IP-MIB", "ipIfStatsInBcastPkts"), ("IP-MIB", "ipIfStatsOutBcastPkts"), )

# Exports

# Module identity
mibBuilder.exportSymbols("IP-MIB", PYSNMP_MODULE_ID=ipMIB)

# Types
mibBuilder.exportSymbols("IP-MIB", IpAddressOriginTC=IpAddressOriginTC, IpAddressPrefixOriginTC=IpAddressPrefixOriginTC, IpAddressStatusTC=IpAddressStatusTC, Ipv6AddressIfIdentifierTC=Ipv6AddressIfIdentifierTC)

# Objects
mibBuilder.exportSymbols("IP-MIB", ip=ip, ipForwarding=ipForwarding, ipDefaultTTL=ipDefaultTTL, ipInReceives=ipInReceives, ipInHdrErrors=ipInHdrErrors, ipInAddrErrors=ipInAddrErrors, ipForwDatagrams=ipForwDatagrams, ipInUnknownProtos=ipInUnknownProtos, ipInDiscards=ipInDiscards, ipInDelivers=ipInDelivers, ipOutRequests=ipOutRequests, ipOutDiscards=ipOutDiscards, ipOutNoRoutes=ipOutNoRoutes, ipReasmTimeout=ipReasmTimeout, ipReasmReqds=ipReasmReqds, ipReasmOKs=ipReasmOKs, ipReasmFails=ipReasmFails, ipFragOKs=ipFragOKs, ipFragFails=ipFragFails, ipFragCreates=ipFragCreates, ipAddrTable=ipAddrTable, ipAddrEntry=ipAddrEntry, ipAdEntAddr=ipAdEntAddr, ipAdEntIfIndex=ipAdEntIfIndex, ipAdEntNetMask=ipAdEntNetMask, ipAdEntBcastAddr=ipAdEntBcastAddr, ipAdEntReasmMaxSize=ipAdEntReasmMaxSize, ipNetToMediaTable=ipNetToMediaTable, ipNetToMediaEntry=ipNetToMediaEntry, ipNetToMediaIfIndex=ipNetToMediaIfIndex, ipNetToMediaPhysAddress=ipNetToMediaPhysAddress, ipNetToMediaNetAddress=ipNetToMediaNetAddress, ipNetToMediaType=ipNetToMediaType, ipRoutingDiscards=ipRoutingDiscards, ipv6IpForwarding=ipv6IpForwarding, ipv6IpDefaultHopLimit=ipv6IpDefaultHopLimit, ipv4InterfaceTableLastChange=ipv4InterfaceTableLastChange, ipv4InterfaceTable=ipv4InterfaceTable, ipv4InterfaceEntry=ipv4InterfaceEntry, ipv4InterfaceIfIndex=ipv4InterfaceIfIndex, ipv4InterfaceReasmMaxSize=ipv4InterfaceReasmMaxSize, ipv4InterfaceEnableStatus=ipv4InterfaceEnableStatus, ipv4InterfaceRetransmitTime=ipv4InterfaceRetransmitTime, ipv6InterfaceTableLastChange=ipv6InterfaceTableLastChange, ipv6InterfaceTable=ipv6InterfaceTable, ipv6InterfaceEntry=ipv6InterfaceEntry, ipv6InterfaceIfIndex=ipv6InterfaceIfIndex, ipv6InterfaceReasmMaxSize=ipv6InterfaceReasmMaxSize, ipv6InterfaceIdentifier=ipv6InterfaceIdentifier, ipv6InterfaceEnableStatus=ipv6InterfaceEnableStatus, ipv6InterfaceReachableTime=ipv6InterfaceReachableTime, ipv6InterfaceRetransmitTime=ipv6InterfaceRetransmitTime, ipv6InterfaceForwarding=ipv6InterfaceForwarding, ipTrafficStats=ipTrafficStats, ipSystemStatsTable=ipSystemStatsTable, ipSystemStatsEntry=ipSystemStatsEntry, ipSystemStatsIPVersion=ipSystemStatsIPVersion, ipSystemStatsInReceives=ipSystemStatsInReceives, ipSystemStatsHCInReceives=ipSystemStatsHCInReceives, ipSystemStatsInOctets=ipSystemStatsInOctets, ipSystemStatsHCInOctets=ipSystemStatsHCInOctets, ipSystemStatsInHdrErrors=ipSystemStatsInHdrErrors, ipSystemStatsInNoRoutes=ipSystemStatsInNoRoutes, ipSystemStatsInAddrErrors=ipSystemStatsInAddrErrors, ipSystemStatsInUnknownProtos=ipSystemStatsInUnknownProtos, ipSystemStatsInTruncatedPkts=ipSystemStatsInTruncatedPkts, ipSystemStatsInForwDatagrams=ipSystemStatsInForwDatagrams, ipSystemStatsHCInForwDatagrams=ipSystemStatsHCInForwDatagrams, ipSystemStatsReasmReqds=ipSystemStatsReasmReqds, ipSystemStatsReasmOKs=ipSystemStatsReasmOKs, ipSystemStatsReasmFails=ipSystemStatsReasmFails, ipSystemStatsInDiscards=ipSystemStatsInDiscards, ipSystemStatsInDelivers=ipSystemStatsInDelivers, ipSystemStatsHCInDelivers=ipSystemStatsHCInDelivers, ipSystemStatsOutRequests=ipSystemStatsOutRequests, ipSystemStatsHCOutRequests=ipSystemStatsHCOutRequests, ipSystemStatsOutNoRoutes=ipSystemStatsOutNoRoutes, ipSystemStatsOutForwDatagrams=ipSystemStatsOutForwDatagrams, ipSystemStatsHCOutForwDatagrams=ipSystemStatsHCOutForwDatagrams, ipSystemStatsOutDiscards=ipSystemStatsOutDiscards, ipSystemStatsOutFragReqds=ipSystemStatsOutFragReqds, ipSystemStatsOutFragOKs=ipSystemStatsOutFragOKs, ipSystemStatsOutFragFails=ipSystemStatsOutFragFails, ipSystemStatsOutFragCreates=ipSystemStatsOutFragCreates, ipSystemStatsOutTransmits=ipSystemStatsOutTransmits, ipSystemStatsHCOutTransmits=ipSystemStatsHCOutTransmits, ipSystemStatsOutOctets=ipSystemStatsOutOctets, ipSystemStatsHCOutOctets=ipSystemStatsHCOutOctets, ipSystemStatsInMcastPkts=ipSystemStatsInMcastPkts, ipSystemStatsHCInMcastPkts=ipSystemStatsHCInMcastPkts, ipSystemStatsInMcastOctets=ipSystemStatsInMcastOctets, ipSystemStatsHCInMcastOctets=ipSystemStatsHCInMcastOctets, ipSystemStatsOutMcastPkts=ipSystemStatsOutMcastPkts, ipSystemStatsHCOutMcastPkts=ipSystemStatsHCOutMcastPkts, ipSystemStatsOutMcastOctets=ipSystemStatsOutMcastOctets, ipSystemStatsHCOutMcastOctets=ipSystemStatsHCOutMcastOctets, ipSystemStatsInBcastPkts=ipSystemStatsInBcastPkts, ipSystemStatsHCInBcastPkts=ipSystemStatsHCInBcastPkts, ipSystemStatsOutBcastPkts=ipSystemStatsOutBcastPkts, ipSystemStatsHCOutBcastPkts=ipSystemStatsHCOutBcastPkts, ipSystemStatsDiscontinuityTime=ipSystemStatsDiscontinuityTime, ipSystemStatsRefreshRate=ipSystemStatsRefreshRate, ipIfStatsTableLastChange=ipIfStatsTableLastChange, ipIfStatsTable=ipIfStatsTable, ipIfStatsEntry=ipIfStatsEntry, ipIfStatsIPVersion=ipIfStatsIPVersion, ipIfStatsIfIndex=ipIfStatsIfIndex, ipIfStatsInReceives=ipIfStatsInReceives, ipIfStatsHCInReceives=ipIfStatsHCInReceives, ipIfStatsInOctets=ipIfStatsInOctets, ipIfStatsHCInOctets=ipIfStatsHCInOctets, ipIfStatsInHdrErrors=ipIfStatsInHdrErrors, ipIfStatsInNoRoutes=ipIfStatsInNoRoutes, ipIfStatsInAddrErrors=ipIfStatsInAddrErrors, ipIfStatsInUnknownProtos=ipIfStatsInUnknownProtos, ipIfStatsInTruncatedPkts=ipIfStatsInTruncatedPkts, ipIfStatsInForwDatagrams=ipIfStatsInForwDatagrams, ipIfStatsHCInForwDatagrams=ipIfStatsHCInForwDatagrams, ipIfStatsReasmReqds=ipIfStatsReasmReqds, ipIfStatsReasmOKs=ipIfStatsReasmOKs, ipIfStatsReasmFails=ipIfStatsReasmFails, ipIfStatsInDiscards=ipIfStatsInDiscards, ipIfStatsInDelivers=ipIfStatsInDelivers, ipIfStatsHCInDelivers=ipIfStatsHCInDelivers, ipIfStatsOutRequests=ipIfStatsOutRequests, ipIfStatsHCOutRequests=ipIfStatsHCOutRequests)
mibBuilder.exportSymbols("IP-MIB", ipIfStatsOutForwDatagrams=ipIfStatsOutForwDatagrams, ipIfStatsHCOutForwDatagrams=ipIfStatsHCOutForwDatagrams, ipIfStatsOutDiscards=ipIfStatsOutDiscards, ipIfStatsOutFragReqds=ipIfStatsOutFragReqds, ipIfStatsOutFragOKs=ipIfStatsOutFragOKs, ipIfStatsOutFragFails=ipIfStatsOutFragFails, ipIfStatsOutFragCreates=ipIfStatsOutFragCreates, ipIfStatsOutTransmits=ipIfStatsOutTransmits, ipIfStatsHCOutTransmits=ipIfStatsHCOutTransmits, ipIfStatsOutOctets=ipIfStatsOutOctets, ipIfStatsHCOutOctets=ipIfStatsHCOutOctets, ipIfStatsInMcastPkts=ipIfStatsInMcastPkts, ipIfStatsHCInMcastPkts=ipIfStatsHCInMcastPkts, ipIfStatsInMcastOctets=ipIfStatsInMcastOctets, ipIfStatsHCInMcastOctets=ipIfStatsHCInMcastOctets, ipIfStatsOutMcastPkts=ipIfStatsOutMcastPkts, ipIfStatsHCOutMcastPkts=ipIfStatsHCOutMcastPkts, ipIfStatsOutMcastOctets=ipIfStatsOutMcastOctets, ipIfStatsHCOutMcastOctets=ipIfStatsHCOutMcastOctets, ipIfStatsInBcastPkts=ipIfStatsInBcastPkts, ipIfStatsHCInBcastPkts=ipIfStatsHCInBcastPkts, ipIfStatsOutBcastPkts=ipIfStatsOutBcastPkts, ipIfStatsHCOutBcastPkts=ipIfStatsHCOutBcastPkts, ipIfStatsDiscontinuityTime=ipIfStatsDiscontinuityTime, ipIfStatsRefreshRate=ipIfStatsRefreshRate, ipAddressPrefixTable=ipAddressPrefixTable, ipAddressPrefixEntry=ipAddressPrefixEntry, ipAddressPrefixIfIndex=ipAddressPrefixIfIndex, ipAddressPrefixType=ipAddressPrefixType, ipAddressPrefixPrefix=ipAddressPrefixPrefix, ipAddressPrefixLength=ipAddressPrefixLength, ipAddressPrefixOrigin=ipAddressPrefixOrigin, ipAddressPrefixOnLinkFlag=ipAddressPrefixOnLinkFlag, ipAddressPrefixAutonomousFlag=ipAddressPrefixAutonomousFlag, ipAddressPrefixAdvPreferredLifetime=ipAddressPrefixAdvPreferredLifetime, ipAddressPrefixAdvValidLifetime=ipAddressPrefixAdvValidLifetime, ipAddressSpinLock=ipAddressSpinLock, ipAddressTable=ipAddressTable, ipAddressEntry=ipAddressEntry, ipAddressAddrType=ipAddressAddrType, ipAddressAddr=ipAddressAddr, ipAddressIfIndex=ipAddressIfIndex, ipAddressType=ipAddressType, ipAddressPrefix=ipAddressPrefix, ipAddressOrigin=ipAddressOrigin, ipAddressStatus=ipAddressStatus, ipAddressCreated=ipAddressCreated, ipAddressLastChanged=ipAddressLastChanged, ipAddressRowStatus=ipAddressRowStatus, ipAddressStorageType=ipAddressStorageType, ipNetToPhysicalTable=ipNetToPhysicalTable, ipNetToPhysicalEntry=ipNetToPhysicalEntry, ipNetToPhysicalIfIndex=ipNetToPhysicalIfIndex, ipNetToPhysicalNetAddressType=ipNetToPhysicalNetAddressType, ipNetToPhysicalNetAddress=ipNetToPhysicalNetAddress, ipNetToPhysicalPhysAddress=ipNetToPhysicalPhysAddress, ipNetToPhysicalLastUpdated=ipNetToPhysicalLastUpdated, ipNetToPhysicalType=ipNetToPhysicalType, ipNetToPhysicalState=ipNetToPhysicalState, ipNetToPhysicalRowStatus=ipNetToPhysicalRowStatus, ipv6ScopeZoneIndexTable=ipv6ScopeZoneIndexTable, ipv6ScopeZoneIndexEntry=ipv6ScopeZoneIndexEntry, ipv6ScopeZoneIndexIfIndex=ipv6ScopeZoneIndexIfIndex, ipv6ScopeZoneIndexLinkLocal=ipv6ScopeZoneIndexLinkLocal, ipv6ScopeZoneIndex3=ipv6ScopeZoneIndex3, ipv6ScopeZoneIndexAdminLocal=ipv6ScopeZoneIndexAdminLocal, ipv6ScopeZoneIndexSiteLocal=ipv6ScopeZoneIndexSiteLocal, ipv6ScopeZoneIndex6=ipv6ScopeZoneIndex6, ipv6ScopeZoneIndex7=ipv6ScopeZoneIndex7, ipv6ScopeZoneIndexOrganizationLocal=ipv6ScopeZoneIndexOrganizationLocal, ipv6ScopeZoneIndex9=ipv6ScopeZoneIndex9, ipv6ScopeZoneIndexA=ipv6ScopeZoneIndexA, ipv6ScopeZoneIndexB=ipv6ScopeZoneIndexB, ipv6ScopeZoneIndexC=ipv6ScopeZoneIndexC, ipv6ScopeZoneIndexD=ipv6ScopeZoneIndexD, ipDefaultRouterTable=ipDefaultRouterTable, ipDefaultRouterEntry=ipDefaultRouterEntry, ipDefaultRouterAddressType=ipDefaultRouterAddressType, ipDefaultRouterAddress=ipDefaultRouterAddress, ipDefaultRouterIfIndex=ipDefaultRouterIfIndex, ipDefaultRouterLifetime=ipDefaultRouterLifetime, ipDefaultRouterPreference=ipDefaultRouterPreference, ipv6RouterAdvertSpinLock=ipv6RouterAdvertSpinLock, ipv6RouterAdvertTable=ipv6RouterAdvertTable, ipv6RouterAdvertEntry=ipv6RouterAdvertEntry, ipv6RouterAdvertIfIndex=ipv6RouterAdvertIfIndex, ipv6RouterAdvertSendAdverts=ipv6RouterAdvertSendAdverts, ipv6RouterAdvertMaxInterval=ipv6RouterAdvertMaxInterval, ipv6RouterAdvertMinInterval=ipv6RouterAdvertMinInterval, ipv6RouterAdvertManagedFlag=ipv6RouterAdvertManagedFlag, ipv6RouterAdvertOtherConfigFlag=ipv6RouterAdvertOtherConfigFlag, ipv6RouterAdvertLinkMTU=ipv6RouterAdvertLinkMTU, ipv6RouterAdvertReachableTime=ipv6RouterAdvertReachableTime, ipv6RouterAdvertRetransmitTime=ipv6RouterAdvertRetransmitTime, ipv6RouterAdvertCurHopLimit=ipv6RouterAdvertCurHopLimit, ipv6RouterAdvertDefaultLifetime=ipv6RouterAdvertDefaultLifetime, ipv6RouterAdvertRowStatus=ipv6RouterAdvertRowStatus, icmp=icmp, icmpInMsgs=icmpInMsgs, icmpInErrors=icmpInErrors, icmpInDestUnreachs=icmpInDestUnreachs, icmpInTimeExcds=icmpInTimeExcds, icmpInParmProbs=icmpInParmProbs, icmpInSrcQuenchs=icmpInSrcQuenchs, icmpInRedirects=icmpInRedirects, icmpInEchos=icmpInEchos, icmpInEchoReps=icmpInEchoReps, icmpInTimestamps=icmpInTimestamps, icmpInTimestampReps=icmpInTimestampReps, icmpInAddrMasks=icmpInAddrMasks, icmpInAddrMaskReps=icmpInAddrMaskReps, icmpOutMsgs=icmpOutMsgs, icmpOutErrors=icmpOutErrors, icmpOutDestUnreachs=icmpOutDestUnreachs, icmpOutTimeExcds=icmpOutTimeExcds, icmpOutParmProbs=icmpOutParmProbs, icmpOutSrcQuenchs=icmpOutSrcQuenchs, icmpOutRedirects=icmpOutRedirects, icmpOutEchos=icmpOutEchos, icmpOutEchoReps=icmpOutEchoReps, icmpOutTimestamps=icmpOutTimestamps, icmpOutTimestampReps=icmpOutTimestampReps, icmpOutAddrMasks=icmpOutAddrMasks, icmpOutAddrMaskReps=icmpOutAddrMaskReps, icmpStatsTable=icmpStatsTable, icmpStatsEntry=icmpStatsEntry, icmpStatsIPVersion=icmpStatsIPVersion)
mibBuilder.exportSymbols("IP-MIB", icmpStatsInMsgs=icmpStatsInMsgs, icmpStatsInErrors=icmpStatsInErrors, icmpStatsOutMsgs=icmpStatsOutMsgs, icmpStatsOutErrors=icmpStatsOutErrors, icmpMsgStatsTable=icmpMsgStatsTable, icmpMsgStatsEntry=icmpMsgStatsEntry, icmpMsgStatsIPVersion=icmpMsgStatsIPVersion, icmpMsgStatsType=icmpMsgStatsType, icmpMsgStatsInPkts=icmpMsgStatsInPkts, icmpMsgStatsOutPkts=icmpMsgStatsOutPkts, ipMIB=ipMIB, ipMIBConformance=ipMIBConformance, ipMIBCompliances=ipMIBCompliances, ipMIBGroups=ipMIBGroups)

# Groups
mibBuilder.exportSymbols("IP-MIB", ipSystemStatsHCPacketGroup=ipSystemStatsHCPacketGroup, icmpGroup=icmpGroup, ipv6ScopeGroup=ipv6ScopeGroup, ipDefaultRouterGroup=ipDefaultRouterGroup, ipNetToPhysicalGroup=ipNetToPhysicalGroup, ipGroup=ipGroup, ipLastChangeGroup=ipLastChangeGroup, ipv6GeneralGroup2=ipv6GeneralGroup2, ipSystemStatsGroup=ipSystemStatsGroup, ipSystemStatsHCOctetGroup=ipSystemStatsHCOctetGroup, icmpStatsGroup=icmpStatsGroup, ipv4SystemStatsGroup=ipv4SystemStatsGroup, ipAddressPrefixGroup=ipAddressPrefixGroup, ipv6IfGroup=ipv6IfGroup, ipv4SystemStatsHCPacketGroup=ipv4SystemStatsHCPacketGroup, ipv6RouterAdvertGroup=ipv6RouterAdvertGroup, ipv4IfStatsHCPacketGroup=ipv4IfStatsHCPacketGroup, ipAddressGroup=ipAddressGroup, ipIfStatsGroup=ipIfStatsGroup, ipIfStatsHCPacketGroup=ipIfStatsHCPacketGroup, ipv4GeneralGroup=ipv4GeneralGroup, ipv4IfGroup=ipv4IfGroup, ipIfStatsHCOctetGroup=ipIfStatsHCOctetGroup, ipv4IfStatsGroup=ipv4IfStatsGroup)
