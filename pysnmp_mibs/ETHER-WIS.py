# PySNMP SMI module. Autogenerated from smidump -f python ETHER-WIS
# by libsmi2pysnmp-0.0.7-alpha at Tue Jun 20 21:10:04 2006,
# Python version (2, 4, 3, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Gauge32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, transmission, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "transmission")
( sonetFarEndLineStuff2, sonetFarEndPathStuff2, sonetLineStuff2, sonetMediumCircuitIdentifier, sonetMediumLineCoding, sonetMediumLineType, sonetMediumLoopbackConfig, sonetMediumStuff2, sonetMediumType, sonetPathCurrentWidth, sonetPathStuff2, sonetSESthresholdSet, sonetSectionStuff2, ) = mibBuilder.importSymbols("SONET-MIB", "sonetFarEndLineStuff2", "sonetFarEndPathStuff2", "sonetLineStuff2", "sonetMediumCircuitIdentifier", "sonetMediumLineCoding", "sonetMediumLineType", "sonetMediumLoopbackConfig", "sonetMediumStuff2", "sonetMediumType", "sonetPathCurrentWidth", "sonetPathStuff2", "sonetSESthresholdSet", "sonetSectionStuff2")

# Objects

etherWisMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 134)).setRevisions(("2003-09-19 00:00",))
etherWisObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 1))
etherWisDevice = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 1, 1))
etherWisDeviceTable = MibTable((1, 3, 6, 1, 2, 1, 10, 134, 1, 1, 1))
etherWisDeviceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 134, 1, 1, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
etherWisDeviceTxTestPatternMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 1, 1, 1, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,4,3,)).subtype(namedValues=namedval.NamedValues(("none", 1), ("squareWave", 2), ("prbs31", 3), ("mixedFrequency", 4), ))).setMaxAccess("readwrite")
etherWisDeviceRxTestPatternMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 1, 1, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,4,3,)).subtype(namedValues=namedval.NamedValues(("none", 1), ("prbs31", 3), ("mixedFrequency", 4), ))).setMaxAccess("readwrite")
etherWisDeviceRxTestPatternErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 1, 1, 1, 1, 3), Gauge32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
etherWisSection = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 1, 2))
etherWisSectionCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 134, 1, 2, 1))
etherWisSectionCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 134, 1, 2, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
etherWisSectionCurrentJ0Transmitted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(16, 16))).setMaxAccess("readwrite")
etherWisSectionCurrentJ0Received = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(16, 16))).setMaxAccess("readonly")
etherWisObjectsPath = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 2))
etherWisPath = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 2, 1))
etherWisPathCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 134, 2, 1, 1))
etherWisPathCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 134, 2, 1, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
etherWisPathCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 2, 1, 1, 1, 1), Bits().subtype(namedValues=namedval.NamedValues(("etherWisPathLOP", 0), ("etherWisPathAIS", 1), ("etherWisPathPLM", 2), ("etherWisPathLCD", 3), ))).setMaxAccess("readonly")
etherWisPathCurrentJ1Transmitted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 2, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(16, 16))).setMaxAccess("readwrite")
etherWisPathCurrentJ1Received = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 2, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(16, 16))).setMaxAccess("readonly")
etherWisFarEndPath = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 2, 2))
etherWisFarEndPathCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 134, 2, 2, 1))
etherWisFarEndPathCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 134, 2, 2, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
etherWisFarEndPathCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 2, 2, 1, 1, 1), Bits().subtype(namedValues=namedval.NamedValues(("etherWisFarEndPayloadDefect", 0), ("etherWisFarEndServerDefect", 1), ))).setMaxAccess("readonly")
etherWisConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 3))
etherWisGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 3, 1))
etherWisCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 3, 2))

# Augmentions

# Groups

etherWisDeviceGroupBasic = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 134, 3, 1, 1)).setObjects(("ETHER-WIS", "etherWisDeviceRxTestPatternMode"), ("ETHER-WIS", "etherWisDeviceTxTestPatternMode"), )
etherWisDeviceGroupExtra = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 134, 3, 1, 2)).setObjects(("ETHER-WIS", "etherWisDeviceRxTestPatternErrors"), )
etherWisPathGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 134, 3, 1, 4)).setObjects(("ETHER-WIS", "etherWisPathCurrentStatus"), ("ETHER-WIS", "etherWisPathCurrentJ1Transmitted"), ("ETHER-WIS", "etherWisPathCurrentJ1Received"), )
etherWisFarEndPathGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 134, 3, 1, 5)).setObjects(("ETHER-WIS", "etherWisFarEndPathCurrentStatus"), )
etherWisSectionGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 134, 3, 1, 3)).setObjects(("ETHER-WIS", "etherWisSectionCurrentJ0Received"), ("ETHER-WIS", "etherWisSectionCurrentJ0Transmitted"), )

# Exports

# Module identity
mibBuilder.exportSymbols("ETHER-WIS", PYSNMP_MODULE_ID=etherWisMIB)

# Objects
mibBuilder.exportSymbols("ETHER-WIS", etherWisMIB=etherWisMIB, etherWisObjects=etherWisObjects, etherWisDevice=etherWisDevice, etherWisDeviceTable=etherWisDeviceTable, etherWisDeviceEntry=etherWisDeviceEntry, etherWisDeviceTxTestPatternMode=etherWisDeviceTxTestPatternMode, etherWisDeviceRxTestPatternMode=etherWisDeviceRxTestPatternMode, etherWisDeviceRxTestPatternErrors=etherWisDeviceRxTestPatternErrors, etherWisSection=etherWisSection, etherWisSectionCurrentTable=etherWisSectionCurrentTable, etherWisSectionCurrentEntry=etherWisSectionCurrentEntry, etherWisSectionCurrentJ0Transmitted=etherWisSectionCurrentJ0Transmitted, etherWisSectionCurrentJ0Received=etherWisSectionCurrentJ0Received, etherWisObjectsPath=etherWisObjectsPath, etherWisPath=etherWisPath, etherWisPathCurrentTable=etherWisPathCurrentTable, etherWisPathCurrentEntry=etherWisPathCurrentEntry, etherWisPathCurrentStatus=etherWisPathCurrentStatus, etherWisPathCurrentJ1Transmitted=etherWisPathCurrentJ1Transmitted, etherWisPathCurrentJ1Received=etherWisPathCurrentJ1Received, etherWisFarEndPath=etherWisFarEndPath, etherWisFarEndPathCurrentTable=etherWisFarEndPathCurrentTable, etherWisFarEndPathCurrentEntry=etherWisFarEndPathCurrentEntry, etherWisFarEndPathCurrentStatus=etherWisFarEndPathCurrentStatus, etherWisConformance=etherWisConformance, etherWisGroups=etherWisGroups, etherWisCompliances=etherWisCompliances)

# Groups
mibBuilder.exportSymbols("ETHER-WIS", etherWisDeviceGroupBasic=etherWisDeviceGroupBasic, etherWisDeviceGroupExtra=etherWisDeviceGroupExtra, etherWisPathGroup=etherWisPathGroup, etherWisFarEndPathGroup=etherWisFarEndPathGroup, etherWisSectionGroup=etherWisSectionGroup)
