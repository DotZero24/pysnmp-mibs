#
# PySNMP MIB module FORTINET-FORTIGATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/rob/Code/pysnmp-mibs/mibs/fortinet/FORTINET-FORTIGATE-MIB
# Produced by pysmi-1.1.12 at Mon Aug  4 16:48:03 2025
# On host macmini.vegmond.io platform Darwin version 24.5.0 by user rob
# Using Python version 3.12.8 (main, Dec  3 2024, 18:42:41) [Clang 16.0.0 (clang-1600.0.26.4)]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
FnIndex, fnAdminEntry, fortinet, FnBoolState, fnSysSerial = mibBuilder.importSymbols("FORTINET-CORE-MIB", "FnIndex", "fnAdminEntry", "fortinet", "FnBoolState", "fnSysSerial")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
ifEntry, ifName, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifEntry", "ifName", "ifIndex")
InetAddressType, InetAddress, InetAddressPrefixLength, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressPrefixLength", "InetPortNumber")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32, Integer32, ModuleIdentity, TimeTicks, NotificationType, Counter32, Bits, IpAddress, iso, ObjectIdentity, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32", "Integer32", "ModuleIdentity", "TimeTicks", "NotificationType", "Counter32", "Bits", "IpAddress", "iso", "ObjectIdentity", "Counter64", "Gauge32")
AutonomousType, TimeStamp, DateAndTime, PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "AutonomousType", "TimeStamp", "DateAndTime", "PhysAddress", "TextualConvention", "DisplayString")
fnFortiGateMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 12356, 101))
fnFortiGateMib.setRevisions(('2023-07-21 00:00', '2023-03-16 00:00', '2023-03-14 00:00', '2022-12-19 00:00', '2022-10-22 00:00', '2022-10-07 00:00', '2022-09-23 00:00', '2022-06-30 00:00', '2022-06-01 00:00', '2022-03-11 00:00', '2022-02-16 00:00', '2022-01-26 00:00', '2021-04-28 00:00', '2021-03-09 00:01', '2021-03-09 00:00', '2021-03-05 00:00', '2021-02-25 00:00', '2021-01-26 00:00', '2021-01-06 00:00', '2020-12-07 00:00', '2020-10-08 00:00', '2020-10-02 00:00', '2020-09-30 00:00', '2020-09-21 00:00', '2020-08-14 00:00', '2020-06-25 00:00', '2020-05-08 00:00', '2020-04-30 00:00', '2019-10-28 00:00', '2019-08-16 00:00', '2019-08-07 00:00', '2019-05-31 00:00', '2019-05-27 00:00', '2019-01-24 00:00', '2018-12-12 00:00', '2018-06-11 00:00', '2018-06-06 00:00', '2018-04-06 00:00', '2018-01-18 00:00', '2018-01-10 00:00', '2017-11-16 00:00', '2017-10-18 00:00', '2017-10-03 00:00', '2017-09-07 00:00', '2017-08-30 00:00', '2017-08-25 00:00', '2017-07-21 00:00', '2017-07-12 00:00', '2017-04-28 00:00', '2017-04-05 00:00', '2017-01-16 00:00', '2016-09-15 00:00', '2016-06-17 00:00', '2015-04-23 00:00', '2015-03-16 00:00', '2015-01-10 00:00', '2014-12-04 00:00', '2014-06-04 00:00', '2014-02-13 00:00', '2013-08-12 00:00', '2013-07-26 00:00', '2013-04-12 00:00', '2013-04-06 00:00', '2012-11-29 00:00', '2012-07-10 00:00', '2012-05-16 00:00', '2012-02-06 00:00', '2011-09-12 00:00', '2011-01-10 00:00', '2009-11-03 00:00', '2009-10-01 00:00', '2009-07-07 00:00', '2008-11-03 00:00', '2008-09-02 00:00', '2008-08-19 00:00', '2008-06-16 00:00', '2008-04-14 00:00',))
if mibBuilder.loadTexts: fnFortiGateMib.setLastUpdated('202307210000Z')
if mibBuilder.loadTexts: fnFortiGateMib.setOrganization('Fortinet Technologies, Inc.')
class FgVdIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class FgOpMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("nat", 1), ("transparent", 2))

class FgHaMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("standalone", 1), ("activeActive", 2), ("activePassive", 3))

class FgHaState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("primary", 1), ("secondary", 2), ("standalone", 3))

class FgSgWorkerBladeIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class FgSgWorkerBladeState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("dead", 2), ("standby", 3), ("active", 4))

class FgHaLBSchedule(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("hub", 2), ("leastConnections", 3), ("roundRobin", 4), ("weightedRoundRobin", 5), ("random", 6), ("ipBased", 7), ("ipPortBased", 8))

class FgAdminPermLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 15, 255))
    namedValues = NamedValues(("readAdmin", 0), ("writeAdmin", 1), ("domainAdmin", 15), ("superAdmin", 255))

class FgFwUserAuthType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("local", 1), ("radiusSingle", 2), ("radiusMultiple", 3), ("ldap", 4))

class FgFwAuthUserType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("fsso", 0), ("rsso", 1), ("ntlm", 2), ("fw", 3), ("wsso", 4), ("fsspCitrix", 5), ("ssoGuest", 6), ("disclaimer", 7), ("other", 8), ("unauth", 9), ("email", 10))

class FgSessProto(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6, 8, 12, 17, 22, 41, 46, 47, 50, 51, 89, 103, 108, 255))
    namedValues = NamedValues(("ip", 0), ("icmp", 1), ("igmp", 2), ("ipip", 4), ("tcp", 6), ("egp", 8), ("pup", 12), ("udp", 17), ("idp", 22), ("ipv6", 41), ("rsvp", 46), ("gre", 47), ("esp", 50), ("ah", 51), ("ospf", 89), ("pim", 103), ("comp", 108), ("raw", 255))

class FgP2PProto(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("bitTorrent", 0), ("eDonkey", 1), ("gnutella", 2), ("kaZaa", 3), ("skype", 4), ("winNY", 5))

class FgScanAvDisposition(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("detected", 1), ("blocked", 2))

class FgWanOptProtocols(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("http", 1), ("mapi", 2), ("cifs", 3), ("ftp", 4), ("tcp", 5))

class FgWanOptHistPeriods(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("last10Min", 1), ("lastHour", 2), ("lastDay", 3), ("lastMonth", 4))

class FgHaStatsSyncStatusType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("unsynchronized", 0), ("synchronized", 1))

class FgWcWlanSecurityType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("other", 0), ("open", 1), ("captivePortal", 2), ("wep64", 3), ("wep128", 4), ("wpaOnlyPersonal", 5), ("wpaOnlyEnterprise", 6), ("wpa2OnlyPersonal", 7), ("wpa2OnlyEnterprise", 8), ("wpaPersonal", 9), ("wpaEnterprise", 10), ("wpaOnlyPersonalCaptivePortal", 11), ("wpa2OnlyPersonalCaptivePortal", 12), ("wpaPersonalCaptivePortal", 13), ("wpa3Sae", 14), ("wpa3SaeTransition", 15), ("wpa3Enterprise", 16), ("wpa3Owe", 17), ("osen", 18))

class FgWcWlanAuthenticationType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("other", 0), ("psk", 1), ("radiusServer", 2), ("userGroup", 3))

class FgWcWlanEncryptionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("other", 0), ("none", 1), ("tkip", 2), ("aes", 3), ("tkipAes", 4))

class FgWcWtpRadioId(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 31)

class FgWcWtpRadioType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
    namedValues = NamedValues(("other", 0), ("dot11a", 1), ("dot11b", 2), ("dot11g", 3), ("dot11n5g", 4), ("dot11n2g", 5), ("dot11ac", 6), ("dot11ngOnly", 7), ("dot11gOnly", 8), ("dot11n2GHzOnly", 9), ("dot11n5GHzOnly", 10), ("dot11acnOnly", 11), ("dot11acOnly", 12), ("dot11ax2g", 13), ("dot11ax5g", 14), ("dot11ax6g", 15), ("dot11axng2gOnly", 16), ("dot11axn2gOnly", 17), ("dot11ax2gOnly", 18), ("dot11axacn5gOnly", 19), ("dot11axac5gOnly", 20), ("dot11ax5gOnly", 21))

class FgWcWtpChannelWidthType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("other", 0), ("width20MHz", 1), ("width40MHz", 2), ("width80MHz", 3), ("width160MHz", 4))

class FgWcWtpRadioBandType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("other", 0), ("band2GHz", 1), ("band5GHz", 2))

class FgWcWtpRadioChannelNumber(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class FgWcWtpRadioMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 0), ("notExist", 1), ("disabled", 2), ("ap", 3), ("monitor", 4), ("sniffer", 5))

class FgWcCountryString(TextualConvention, OctetString):
    status = 'current'
    displayHint = '3a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

fgModel = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1))
fgtVM64 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 30))
fgtVM64VMX = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 31))
fgtVM64SVM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 32))
fgtVM64XEN = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 40))
fosVM64XEN = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 41))
fgtVM64AWS = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 45))
fgtVM64FGCAWS = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 46))
fgtVM64OPC = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 47))
fgtVM64KVm = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 60))
fgtVM64FGCKVM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 61))
fgtVM64GCP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 65))
fgtARM64KVM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 66))
fgtVM64HV = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 70))
fwf20C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 210))
fgt20C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 212))
fw20CA = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 213))
fg20CA = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 214))
fgt30B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 302))
fgt30D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 304))
fgt30DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 305))
fgt30E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 306))
fgr30D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 307))
fgr35D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 308))
fr30DA = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 309))
fwf30B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 310))
fwf30D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 314))
fwf30DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 315))
fwf30E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 316))
fgt30EG = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 319))
fg30EN = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 320))
fg30EI = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 321))
fw30EN = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 322))
fw30EI = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 323))
fw30EG = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 324))
fgt40C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 410))
fwf40C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 411))
fgt40F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 441))
fgt41F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 442))
fg40FI = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 443))
fg41FI = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 444))
fwf40F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 445))
fwf41F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 446))
fw40FI = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 447))
fw41FI = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 448))
fgt50A = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 500))
fgt50B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 502))
fgt51B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 504))
fgt50E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 505))
fwf50E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 506))
fwf50B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 510))
fgt51E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 515))
fwf51E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 516))
fw502R = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 517))
fgt52E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 518))
fgt60 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 600))
fgt60M = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 601))
fgt60ADSL = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 602))
fgt60B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 603))
fwf60 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 610))
fwf60A = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 611))
fwf60AM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 612))
fwf60B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 613))
fgt60C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 615))
fwf60C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 616))
fw60CM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 617))
fw60CA = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 618))
fw6XMB = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 619))
fgt60CP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 621))
fgt60CSFP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 622))
fgt60D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 624))
fgt60DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 625))
fwf60D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 626))
fw60DP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 627))
fgtsoc3 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 628))
fgt90D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 630))
fgt90DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 631))
fwf90D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 632))
fwf90DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 633))
fgt94DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 634))
fgt98DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 635))
fgt92D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 636))
fwf92D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 637))
fgr90D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 638))
fwf60E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 639))
fgt61E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 640))
fgt60E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 641))
fgt60EPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 642))
fgr60F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 643))
fgt60F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 644))
fgt61F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 645))
fg60EI = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 646))
fg60EC = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 647))
fgr60FI = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 648))
fwf61E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 649))
fgt60EJ = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 661))
fwf60EJ = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 662))
fgt60EV = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 663))
fwf60EV = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 664))
fgt70D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 700))
fgt70F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 701))
fgt71F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 702))
fr70FB = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 704))
fr70FM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 705))
fgt80C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 800))
fgt80CM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 801))
fgt82C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 802))
fgt80D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 803))
fwf80CM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 810))
fwf81CM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 811))
fgt80EPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 841))
fgt80E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 842))
fgt81E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 843))
fgt81EPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 844))
fgt80F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 845))
fgt81F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 846))
fgt80FBP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 847))
fwf80F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 848))
fwf81F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 849))
fgt80FPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 850))
fgt81FPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 851))
fw81FD = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 852))
fw81FP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 853))
fg900D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 900))
fgt90E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 940))
fgt91E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 941))
fgt100F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1000))
fgt101F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1001))
fgt110C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1002))
fgt111C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1003))
fgt100D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1004))
fgt140E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1005))
fgt140EP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1006))
fgt100E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1041))
fgt100EF = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1042))
fgt101E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1043))
fgt140D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1401))
fgt140P = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1402))
fgt140T = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1403))
fgt200 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2000))
fgt200A = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2001))
fgt224B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2002))
fgt200B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2003))
fgt200BPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2004))
fgt200D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2005))
fgt240D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2006))
fgt200DP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2007))
fgt240DP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2008))
fgt200E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2009))
fgt201E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2010))
fgt200F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2011))
fgt201F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2012))
fgt280D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2013))
fgt300 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 3000))
fgt300A = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 3001))
fgt310B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 3002))
fgt300D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 3003))
fgt311B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 3004))
fgt300C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 3005))
fgt3HD = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 3006))
fgt300E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 3007))
fgt301E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 3008))
fgt400 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 4000))
fgt400A = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 4001))
fgt400D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 4004))
fgt400E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 4007))
fgt401E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 4008))
fgt400EBP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 4009))
fgt400F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 4010))
fgt401F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 4011))
fgt500 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 5000))
fgt500A = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 5001))
fgt500D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 5004))
fgt500E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 5005))
fgt501E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 5006))
fgt600C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 6003))
fgt600D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 6004))
fgt600E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 6005))
fgt601E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 6006))
fgt600F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 6007))
fgt601F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 6008))
fgt620B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 6200))
fgt620D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 6201))
fgt621B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 6210))
fgt800 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 8000))
fgt800F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 8001))
fgt800C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 8003))
fgt800D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 8004))
fgt1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 10000))
fgt1000A = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 10001))
fgt1000AFA2 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 10002))
fgt1000ALENC = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 10003))
fgt1000C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 10004))
fgt1000D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 10005))
fgt1100E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 10006))
fgt1101E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 10007))
fgt1200D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 12000))
fgt1240B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 12400))
fgt1500D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 15000))
fgt1500DT = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 15001))
fgt1801F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 15002))
fgt1800F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 15003))
fgt2200E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 18000))
fgt2201E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 18001))
fgt2000E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 20000))
fgt2500E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 25000))
fgt2600F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 26000))
fgt2601F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 26001))
fgt3000D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 30000))
fgt3300E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 30001))
fgt3301E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 30002))
fgt3000F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 30003))
fgt3001F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 30004))
fgt3016B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 30160))
fgt3040B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 30400))
fgt3140B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 30401))
fgt3100D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 31000))
fgt3200D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 32000))
fgt3240C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 32401))
fgt3400E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 34001))
fgt3401E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 34011))
fgt3500F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 35001))
fgt3501F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 35011))
fgt3600 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 36000))
fgt3600E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 36001))
fgt3600A = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 36003))
fgt3600C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 36004))
fgt3601E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 36011))
fgt3700D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 37000))
fgt3700DX = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 37001))
fgt3800D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 38001))
fgt4200F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 38002))
ffw4200F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 38006))
fgt3810A = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 38100))
fgt3810D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 38101))
fgt3815D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 38150))
fgt4400F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 39001))
ffw4400F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 39007))
fgt3950B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 39500))
fgt3951B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 39501))
fgt3960E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 39601))
fgt3980E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 39801))
ffw3980E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 39804))
fgt4201F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 42002))
fgt4401F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 44001))
fgt5002FB2 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 50001))
fgt5001 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 50010))
fgt5001A = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 50011))
fgt5001FA2 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 50012))
fgt5001B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 50013))
fgt5001C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 50014))
fgt5001D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 50015))
fgt5001E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 50016))
fgt5001E1 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 50017))
fsw5203B = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 50023))
fgt5005FA2 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 50051))
fgt5101C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 51010))
fgt6000F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 60001))
fgt7000E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 70001))
fgt7000F = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 71201))
ffvmev = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80000))
fgvmev = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80001))
fgvmxx = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80002))
fgtvmx = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80003))
fgvm00 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80004))
fgvm01 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80005))
fgvm02 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80006))
fgvm04 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80007))
fgvm08 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80008))
fgvm16 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80009))
fgvm32 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80010))
fgvm1v = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80011))
fgvm2v = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80012))
fgvm4v = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80013))
fgvm8v = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80014))
fgv16v = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80015))
fgv32v = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80016))
fgvulv = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80019))
fgvmul = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80020))
fgvmsl = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80021))
fgvmsb = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80022))
fgvmel = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80023))
fgvmml = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80024))
ffvmbb = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80025))
fgvmpg = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 80030))
fosVM64 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90000))
fgtARM64AWS = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90007))
fgtARM64XEN = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90008))
fgtVM64AZUREONDEMAND = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90010))
fgtVM64GCPONDEMAND = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90018))
fgtVM64ALI = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90019))
fgtVM64ALIONDEMAND = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90020))
fgtVM64RAXONDEMAND = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90021))
fgtVM64IBM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90022))
fgtARM64OCI = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90025))
fgtARM64GCP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90026))
fgtARM64AZURE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90027))
fosVM64KVM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90060))
fosVM64HV = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90061))
ffwVM64 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90070))
ffwVM64KVm = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90071))
fgtVM64AZURE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90081))
fgTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 2))
fgTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0))
fgVirtualDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 3))
fgVdInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 3, 1))
fgVdNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdNumber.setStatus('current')
fgVdMaxVdoms = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdMaxVdoms.setStatus('current')
fgVdEnabled = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 3, 1, 3), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEnabled.setStatus('current')
fgVdTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2))
fgVdTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1), )
if mibBuilder.loadTexts: fgVdTable.setStatus('current')
fgVdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgVdEntry.setStatus('current')
fgVdEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 1), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntIndex.setStatus('current')
fgVdEntName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntName.setStatus('current')
fgVdEntOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 3), FgOpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntOpMode.setStatus('current')
fgVdEntHaState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 4), FgHaState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntHaState.setStatus('current')
fgVdEntCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntCpuUsage.setStatus('current')
fgVdEntMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntMemUsage.setStatus('current')
fgVdEntSesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntSesCount.setStatus('current')
fgVdEntSesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 8), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntSesRate.setStatus('current')
fgVdEntChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntChecksum.setStatus('current')
fgVdTpTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 2), )
if mibBuilder.loadTexts: fgVdTpTable.setStatus('current')
fgVdTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgVdTpEntry.setStatus('current')
fgVdTpMgmtAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdTpMgmtAddrType.setStatus('current')
fgVdTpMgmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdTpMgmtAddr.setStatus('current')
fgVdTpMgmtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 2, 1, 3), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdTpMgmtMask.setStatus('current')
fgSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4))
fgSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1))
fgSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysVersion.setStatus('current')
fgSysMgmtVdom = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 2), FgVdIndex())
if mibBuilder.loadTexts: fgSysMgmtVdom.setStatus('current')
fgSysCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysCpuUsage.setStatus('current')
fgSysMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysMemUsage.setStatus('current')
fgSysMemCapacity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysMemCapacity.setStatus('current')
fgSysDiskUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysDiskUsage.setStatus('current')
fgSysDiskCapacity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysDiskCapacity.setStatus('current')
fgSysSesCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSesCount.setStatus('current')
fgSysLowMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysLowMemUsage.setStatus('current')
fgSysLowMemCapacity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysLowMemCapacity.setStatus('current')
fgSysSesRate1 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 11), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSesRate1.setStatus('current')
fgSysSesRate10 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 12), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSesRate10.setStatus('current')
fgSysSesRate30 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 13), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSesRate30.setStatus('current')
fgSysSesRate60 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 14), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSesRate60.setStatus('current')
fgSysSes6Count = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSes6Count.setStatus('current')
fgSysSes6Rate1 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 16), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSes6Rate1.setStatus('current')
fgSysSes6Rate10 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 17), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSes6Rate10.setStatus('current')
fgSysSes6Rate30 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 18), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSes6Rate30.setStatus('current')
fgSysSes6Rate60 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 19), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSes6Rate60.setStatus('current')
fgSysUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 20), Counter64()).setUnits('hundredths of a second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysUpTime.setStatus('current')
fgSysNeedLogPartitionScan = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 21), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysNeedLogPartitionScan.setStatus('current')
fgSysUpTimeDetail = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysUpTimeDetail.setStatus('current')
fgSysRebootReason = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysRebootReason.setStatus('current')
fgSysNpuSesCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysNpuSesCount.setStatus('current')
fgSysNpuSesRate1 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 25), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysNpuSesRate1.setStatus('current')
fgSysNpuSesRate10 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 26), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysNpuSesRate10.setStatus('current')
fgSysNpuSesRate30 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 27), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysNpuSesRate30.setStatus('current')
fgSysNpuSesRate60 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 28), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysNpuSesRate60.setStatus('current')
fgSysNpuSes6Count = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysNpuSes6Count.setStatus('current')
fgSysNpuSes6Rate1 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 30), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysNpuSes6Rate1.setStatus('current')
fgSysNpuSes6Rate10 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 31), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysNpuSes6Rate10.setStatus('current')
fgSysNpuSes6Rate30 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 32), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysNpuSes6Rate30.setStatus('current')
fgSysNpuSes6Rate60 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 33), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysNpuSes6Rate60.setStatus('current')
fgDataCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 34), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDataCpuUsage.setStatus('current')
fgDataMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 35), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDataMemUsage.setStatus('current')
fgSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 2))
fgSysVersionAv = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysVersionAv.setStatus('current')
fgSysVersionIps = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysVersionIps.setStatus('current')
fgSysVersionAvEt = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysVersionAvEt.setStatus('current')
fgSysVersionIpsEt = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysVersionIpsEt.setStatus('current')
fgHwSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3))
fgHwSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHwSensorCount.setStatus('current')
fgHwSensorTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2), )
if mibBuilder.loadTexts: fgHwSensorTable.setStatus('current')
fgHwSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgHwSensorEntIndex"))
if mibBuilder.loadTexts: fgHwSensorEntry.setStatus('current')
fgHwSensorEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgHwSensorEntIndex.setStatus('current')
fgHwSensorEntName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHwSensorEntName.setStatus('current')
fgHwSensorEntValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHwSensorEntValue.setStatus('current')
fgHwSensorEntAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHwSensorEntAlarmStatus.setStatus('current')
fgProcessors = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4))
fgProcessorCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorCount.setStatus('current')
fgProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2), )
if mibBuilder.loadTexts: fgProcessorTable.setStatus('current')
fgProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgProcessorEntIndex"))
if mibBuilder.loadTexts: fgProcessorEntry.setStatus('current')
fgProcessorEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgProcessorEntIndex.setStatus('current')
fgProcessorUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorUsage.setStatus('current')
fgProcessorUsage5sec = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorUsage5sec.setStatus('current')
fgProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 4), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorType.setStatus('current')
fgProcessorContainedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 5), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorContainedIn.setStatus('current')
fgProcessorPktRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorPktRxCount.setStatus('current')
fgProcessorPktTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorPktTxCount.setStatus('current')
fgProcessorPktDroppedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorPktDroppedCount.setStatus('current')
fgProcessorUserUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorUserUsage.setStatus('current')
fgProcessorSysUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorSysUsage.setStatus('current')
fgProcessorPktTxDroppedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorPktTxDroppedCount.setStatus('current')
fgProcessorTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3))
fgProcessorOther = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 1))
if mibBuilder.loadTexts: fgProcessorOther.setStatus('current')
fgProcessorIntel = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 2))
if mibBuilder.loadTexts: fgProcessorIntel.setStatus('current')
fgProcessorAMD = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 3))
if mibBuilder.loadTexts: fgProcessorAMD.setStatus('current')
fgProcessorXlr = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 4))
if mibBuilder.loadTexts: fgProcessorXlr.setStatus('current')
fgProcessorFnSoc = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 5))
if mibBuilder.loadTexts: fgProcessorFnSoc.setStatus('current')
fgProcessorFnNP2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 6))
if mibBuilder.loadTexts: fgProcessorFnNP2.setStatus('current')
fgProcessorFnNP4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 7))
if mibBuilder.loadTexts: fgProcessorFnNP4.setStatus('current')
fgProcessorFnNP6 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 8))
if mibBuilder.loadTexts: fgProcessorFnNP6.setStatus('current')
fgProcessorFnNP6LITE = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 9))
if mibBuilder.loadTexts: fgProcessorFnNP6LITE.setStatus('current')
fgProcessorFnNP7 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 10))
if mibBuilder.loadTexts: fgProcessorFnNP7.setStatus('current')
fgProcessorFnNP6XLITE = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 11))
if mibBuilder.loadTexts: fgProcessorFnNP6XLITE.setStatus('current')
fgProcessorsTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 4))
fgPerCpuHighDetails = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 4, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgPerCpuHighDetails.setStatus('current')
fgProcessorModules = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5))
fgProcessorModuleTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1))
fgProcModOther = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 1))
if mibBuilder.loadTexts: fgProcModOther.setStatus('current')
fgProcModIntegrated = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 2))
if mibBuilder.loadTexts: fgProcModIntegrated.setStatus('current')
fgProcModIntegratedNPU = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 3))
if mibBuilder.loadTexts: fgProcModIntegratedNPU.setStatus('current')
fgProcessorModuleCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorModuleCount.setStatus('current')
fgProcessorModuleTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3), )
if mibBuilder.loadTexts: fgProcessorModuleTable.setStatus('current')
fgProcessorModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgProcModIndex"))
if mibBuilder.loadTexts: fgProcessorModuleEntry.setStatus('current')
fgProcModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgProcModIndex.setStatus('current')
fgProcModType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModType.setStatus('current')
fgProcModName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModName.setStatus('current')
fgProcModDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModDescr.setStatus('current')
fgProcModProcessorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModProcessorCount.setStatus('current')
fgProcModMemCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModMemCapacity.setStatus('current')
fgProcModMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModMemUsage.setStatus('current')
fgProcModSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModSessionCount.setStatus('current')
fgProcModSACount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModSACount.setStatus('current')
fgSystemInfoAdvanced = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6))
fgSysInfoAdvMem = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1))
fgSIAdvMemPageCache = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 1), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemPageCache.setStatus('current')
fgSIAdvMemCacheActive = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 2), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemCacheActive.setStatus('current')
fgSIAdvMemCacheInactive = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 3), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemCacheInactive.setStatus('current')
fgSIAdvMemBuffer = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 4), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemBuffer.setStatus('current')
fgSIAdvMemEnterKerConsThrsh = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 5), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemEnterKerConsThrsh.setStatus('current')
fgSIAdvMemLeaveKerConsThrsh = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 6), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemLeaveKerConsThrsh.setStatus('current')
fgSIAdvMemEnterProxyConsThrsh = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 7), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemEnterProxyConsThrsh.setStatus('current')
fgSIAdvMemLeaveProxyConsThrsh = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 8), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemLeaveProxyConsThrsh.setStatus('current')
fgSysInfoAdvSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2))
fgSIAdvSesEphemeralCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesEphemeralCount.setStatus('current')
fgSIAdvSesEphemeralLimit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesEphemeralLimit.setStatus('current')
fgSIAdvSesClashCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesClashCount.setStatus('current')
fgSIAdvSesExpCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesExpCount.setStatus('current')
fgSIAdvSesSyncQFCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesSyncQFCount.setStatus('current')
fgSIAdvSesAcceptQFCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesAcceptQFCount.setStatus('current')
fgSIAdvSesNoListenerCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesNoListenerCount.setStatus('current')
fgSIAdvLicenseDetails = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3))
fgLicContracts = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3, 1))
fgLicContractCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLicContractCount.setStatus('current')
fgLicContractTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3, 1, 2), )
if mibBuilder.loadTexts: fgLicContractTable.setStatus('current')
fgLicContractEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3, 1, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgLicContractEntry.setStatus('current')
fgLicContractDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLicContractDesc.setStatus('current')
fgLicContractExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLicContractExpiry.setStatus('current')
fgLicVersions = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3, 2))
fgLicVersionCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLicVersionCount.setStatus('current')
fgLicVersionTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3, 2, 2), )
if mibBuilder.loadTexts: fgLicVersionTable.setStatus('current')
fgLicVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3, 2, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgLicVersionEntry.setStatus('current')
fgLicVersionDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLicVersionDesc.setStatus('current')
fgLicVersionExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLicVersionExpiry.setStatus('current')
fgLicVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLicVersionNumber.setStatus('current')
fgLicVersionUpdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLicVersionUpdTime.setStatus('current')
fgLicVersionUpdMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLicVersionUpdMethod.setStatus('current')
fgLicVersionTryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3, 2, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLicVersionTryTime.setStatus('current')
fgLicVersionTryResult = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 3, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLicVersionTryResult.setStatus('current')
fgUsbports = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7))
fgUsbportCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportCount.setStatus('current')
fgUsbportTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2), )
if mibBuilder.loadTexts: fgUsbportTable.setStatus('current')
fgUsbportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgUsbportEntIndex"))
if mibBuilder.loadTexts: fgUsbportEntry.setStatus('current')
fgUsbportEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgUsbportEntIndex.setStatus('current')
fgUsbportPlugged = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unplugged", 0), ("plugged", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportPlugged.setStatus('current')
fgUsbportVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportVersion.setStatus('current')
fgUsbportClass = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 254, 255))).clone(namedValues=NamedValues(("ifc", 0), ("audio", 1), ("comm", 2), ("hid", 3), ("physical", 5), ("image", 6), ("printer", 7), ("storage", 8), ("hub", 9), ("cdcData", 10), ("chipSmartCard", 11), ("contentSecurity", 13), ("appSpec", 254), ("vendorSpec", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportClass.setStatus('current')
fgUsbportVendId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportVendId.setStatus('current')
fgUsbportProdId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportProdId.setStatus('current')
fgUsbportRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportRevision.setStatus('current')
fgUsbportManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportManufacturer.setStatus('current')
fgUsbportProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportProduct.setStatus('current')
fgUsbportSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportSerial.setStatus('current')
fgLinkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8))
fgLinkMonitorNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorNumber.setStatus('current')
fgLinkMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2), )
if mibBuilder.loadTexts: fgLinkMonitorTable.setStatus('current')
fgLinkMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgLinkMonitorID"))
if mibBuilder.loadTexts: fgLinkMonitorEntry.setStatus('current')
fgLinkMonitorID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgLinkMonitorID.setStatus('current')
fgLinkMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorName.setStatus('current')
fgLinkMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alive", 0), ("dead", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorState.setStatus('current')
fgLinkMonitorLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorLatency.setStatus('current')
fgLinkMonitorJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorJitter.setStatus('current')
fgLinkMonitorPacketSend = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorPacketSend.setStatus('current')
fgLinkMonitorPacketRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorPacketRecv.setStatus('current')
fgLinkMonitorPacketLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorPacketLoss.setStatus('current')
fgLinkMonitorVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorVdom.setStatus('current')
fgLinkMonitorBandwidthIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorBandwidthIn.setStatus('current')
fgLinkMonitorBandwidthOut = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorBandwidthOut.setStatus('current')
fgLinkMonitorBandwidthBi = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorBandwidthBi.setStatus('current')
fgLinkMonitorOutofSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorOutofSeq.setStatus('current')
fgLinkMonitorServer = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorServer.setStatus('current')
fgLinkMonitorProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorProtocol.setStatus('current')
fgVWLHealthCheckLink = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9))
fgVWLHealthCheckLinkNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkNumber.setStatus('current')
fgVWLHealthCheckLinkTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2), )
if mibBuilder.loadTexts: fgVWLHealthCheckLinkTable.setStatus('current')
fgVWLHealthCheckLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkID"))
if mibBuilder.loadTexts: fgVWLHealthCheckLinkEntry.setStatus('current')
fgVWLHealthCheckLinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgVWLHealthCheckLinkID.setStatus('current')
fgVWLHealthCheckLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkName.setStatus('current')
fgVWLHealthCheckLinkSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkSeq.setStatus('current')
fgVWLHealthCheckLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alive", 0), ("dead", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkState.setStatus('current')
fgVWLHealthCheckLinkLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkLatency.setStatus('current')
fgVWLHealthCheckLinkJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkJitter.setStatus('current')
fgVWLHealthCheckLinkPacketSend = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkPacketSend.setStatus('current')
fgVWLHealthCheckLinkPacketRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkPacketRecv.setStatus('current')
fgVWLHealthCheckLinkPacketLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkPacketLoss.setStatus('current')
fgVWLHealthCheckLinkVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkVdom.setStatus('current')
fgVWLHealthCheckLinkBandwidthIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkBandwidthIn.setStatus('current')
fgVWLHealthCheckLinkBandwidthOut = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkBandwidthOut.setStatus('current')
fgVWLHealthCheckLinkBandwidthBi = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkBandwidthBi.setStatus('current')
fgVWLHealthCheckLinkIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkIfName.setStatus('current')
fgVWLHealthCheckLinkUsedBandwidthIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkUsedBandwidthIn.setStatus('current')
fgVWLHealthCheckLinkUsedBandwidthOut = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkUsedBandwidthOut.setStatus('current')
fgVWLHealthCheckLinkUsedBandwidthBi = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkUsedBandwidthBi.setStatus('current')
fgVWLHealthCheckLinkMOSCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkMOSCodec.setStatus('current')
fgVWLHealthCheckLinkMOS = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 9, 2, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVWLHealthCheckLinkMOS.setStatus('current')
fgDisks = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 10))
fgDiskCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDiskCount.setStatus('current')
fgDiskTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 10, 2), )
if mibBuilder.loadTexts: fgDiskTable.setStatus('current')
fgDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 10, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgDiskIndex"))
if mibBuilder.loadTexts: fgDiskEntry.setStatus('current')
fgDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 10, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgDiskIndex.setStatus('current')
fgDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 10, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDiskName.setStatus('current')
fgSlaProbeClient = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11))
fgSlaProbeClientNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientNumber.setStatus('current')
fgSlaProbeClientTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2), )
if mibBuilder.loadTexts: fgSlaProbeClientTable.setStatus('current')
fgSlaProbeClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgSlaProbeClientID"))
if mibBuilder.loadTexts: fgSlaProbeClientEntry.setStatus('current')
fgSlaProbeClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgSlaProbeClientID.setStatus('current')
fgSlaProbeClientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientIP.setStatus('current')
fgSlaProbeClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alive", 0), ("dead", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientState.setStatus('current')
fgSlaProbeClientAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientAvgLatency.setStatus('current')
fgSlaProbeClientAvgLatencySD = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientAvgLatencySD.setStatus('current')
fgSlaProbeClientAvgLatencyDS = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientAvgLatencyDS.setStatus('current')
fgSlaProbeClientMinLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientMinLatency.setStatus('current')
fgSlaProbeClientMinLatencySD = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientMinLatencySD.setStatus('current')
fgSlaProbeClientMinLatencyDS = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientMinLatencyDS.setStatus('current')
fgSlaProbeClientMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientMaxLatency.setStatus('current')
fgSlaProbeClientMaxLatencySD = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientMaxLatencySD.setStatus('current')
fgSlaProbeClientMaxLatencyDS = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientMaxLatencyDS.setStatus('current')
fgSlaProbeClientAvgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientAvgJitter.setStatus('current')
fgSlaProbeClientAvgJitterSD = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientAvgJitterSD.setStatus('current')
fgSlaProbeClientAvgJitterDS = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientAvgJitterDS.setStatus('current')
fgSlaProbeClientMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientMinJitter.setStatus('current')
fgSlaProbeClientMinJitterSD = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientMinJitterSD.setStatus('current')
fgSlaProbeClientMinJitterDS = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientMinJitterDS.setStatus('current')
fgSlaProbeClientMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientMaxJitter.setStatus('current')
fgSlaProbeClientMaxJitterSD = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientMaxJitterSD.setStatus('current')
fgSlaProbeClientMaxJitterDS = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientMaxJitterDS.setStatus('current')
fgSlaProbeClientPktloss = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientPktloss.setStatus('current')
fgSlaProbeClientPktlossSD = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientPktlossSD.setStatus('current')
fgSlaProbeClientPktlossDS = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientPktlossDS.setStatus('current')
fgSlaProbeClientOutofSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientOutofSeq.setStatus('current')
fgSlaProbeClientOutofSeqSD = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientOutofSeqSD.setStatus('current')
fgSlaProbeClientOutofSeqDS = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 11, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSlaProbeClientOutofSeqDS.setStatus('current')
fgDpdkEngs = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 12))
fgDpdkEngCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDpdkEngCount.setStatus('current')
fgDpdkEngTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 12, 2), )
if mibBuilder.loadTexts: fgDpdkEngTable.setStatus('current')
fgDpdkEngEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 12, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgDpdkEngEntIndex"))
if mibBuilder.loadTexts: fgDpdkEngEntry.setStatus('current')
fgDpdkEngEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 12, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgDpdkEngEntIndex.setStatus('current')
fgDpdkEngRxUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 12, 2, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDpdkEngRxUsage.setStatus('current')
fgDpdkEngVnpUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 12, 2, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDpdkEngVnpUsage.setStatus('current')
fgDpdkEngIpsUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 12, 2, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDpdkEngIpsUsage.setStatus('current')
fgDpdkEngTxUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 12, 2, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDpdkEngTxUsage.setStatus('current')
fgDpdkEngIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 12, 2, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDpdkEngIdle.setStatus('current')
fgDpdkEngToCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 12, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDpdkEngToCpu.setStatus('current')
fgFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5))
fgFwPolicies = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1))
fgFwPolInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 1))
fgFwPolTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2))
fgFwPolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1), )
if mibBuilder.loadTexts: fgFwPolStatsTable.setStatus('current')
fgFwPolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgFwPolID"))
if mibBuilder.loadTexts: fgFwPolStatsEntry.setStatus('current')
fgFwPolID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgFwPolID.setStatus('current')
fgFwPolPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPolPktCount.setStatus('current')
fgFwPolByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPolByteCount.setStatus('current')
fgFwPolLastUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPolLastUsed.setStatus('current')
fgFwPolPktCountHc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPolPktCountHc.setStatus('current')
fgFwPolByteCountHc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPolByteCountHc.setStatus('current')
fgFwHsPolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 3), )
if mibBuilder.loadTexts: fgFwHsPolStatsTable.setStatus('current')
fgFwHsPolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgFwHsPolID"))
if mibBuilder.loadTexts: fgFwHsPolStatsEntry.setStatus('current')
fgFwHsPolID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 3, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgFwHsPolID.setStatus('current')
fgFwHsPolPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwHsPolPktCount.setStatus('current')
fgFwHsPolByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwHsPolByteCount.setStatus('current')
fgFwHsPolLastUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwHsPolLastUsed.setStatus('current')
fgFwUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2))
fgFwUserInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 1))
fgFwUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserNumber.setStatus('current')
fgFwUserAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserAuthTimeout.setStatus('current')
fgFwUserTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2))
fgFwUserTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1), )
if mibBuilder.loadTexts: fgFwUserTable.setStatus('current')
fgFwUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgFwUserIndex"))
if mibBuilder.loadTexts: fgFwUserEntry.setStatus('current')
fgFwUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgFwUserIndex.setStatus('current')
fgFwUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserName.setStatus('current')
fgFwUserAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1, 3), FgFwUserAuthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserAuth.setStatus('current')
fgFwUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1, 4), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserState.setStatus('current')
fgFwUserVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1, 5), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserVdom.setStatus('current')
fgFwAuthUserTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3))
fgFwAuthUserInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 1), )
if mibBuilder.loadTexts: fgFwAuthUserInfoTable.setStatus('current')
fgFwAuthUserInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgFwAuthUserInfoVdom"))
if mibBuilder.loadTexts: fgFwAuthUserInfoEntry.setStatus('current')
fgFwAuthUserInfoVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 1, 1, 1), FgVdIndex())
if mibBuilder.loadTexts: fgFwAuthUserInfoVdom.setStatus('current')
fgFwAuthIpv4UserNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwAuthIpv4UserNumber.setStatus('current')
fgFwAuthIpv6UserNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwAuthIpv6UserNumber.setStatus('current')
fgFwAuthIpv4UserTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 2), )
if mibBuilder.loadTexts: fgFwAuthIpv4UserTable.setStatus('current')
fgFwAuthIpv4UserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgFwAuthIpv4UserIndex"))
if mibBuilder.loadTexts: fgFwAuthIpv4UserEntry.setStatus('current')
fgFwAuthIpv4UserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgFwAuthIpv4UserIndex.setStatus('current')
fgFwAuthIpv4UserVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 2, 1, 2), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwAuthIpv4UserVdom.setStatus('current')
fgFwAuthIpv4UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwAuthIpv4UserName.setStatus('current')
fgFwAuthIpv4UserType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 2, 1, 4), FgFwAuthUserType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwAuthIpv4UserType.setStatus('current')
fgFwAuthIpv4UserAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwAuthIpv4UserAddr.setStatus('current')
fgFwAuthIpv6UserTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 3), )
if mibBuilder.loadTexts: fgFwAuthIpv6UserTable.setStatus('current')
fgFwAuthIpv6UserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgFwAuthIpv6UserIndex"))
if mibBuilder.loadTexts: fgFwAuthIpv6UserEntry.setStatus('current')
fgFwAuthIpv6UserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 3, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgFwAuthIpv6UserIndex.setStatus('current')
fgFwAuthIpv6UserVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 3, 1, 2), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwAuthIpv6UserVdom.setStatus('current')
fgFwAuthIpv6UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwAuthIpv6UserName.setStatus('current')
fgFwAuthIpv6UserType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 3, 1, 4), FgFwAuthUserType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwAuthIpv6UserType.setStatus('current')
fgFwAuthIpv6UserAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 3, 3, 1, 5), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwAuthIpv6UserAddr.setStatus('current')
fgFwIppools = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3))
fgFwIppTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2))
fgFwIppStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1), )
if mibBuilder.loadTexts: fgFwIppStatsTable.setStatus('current')
fgFwIppStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgFwIppStatsStartIp"), (0, "FORTINET-FORTIGATE-MIB", "fgFwIppStatsEndIp"))
if mibBuilder.loadTexts: fgFwIppStatsEntry.setStatus('current')
fgFwIppStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsName.setStatus('current')
fgFwIppStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsType.setStatus('current')
fgFwIppStatsStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: fgFwIppStatsStartIp.setStatus('current')
fgFwIppStatsEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 4), IpAddress())
if mibBuilder.loadTexts: fgFwIppStatsEndIp.setStatus('current')
fgFwIppStatsTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsTotalSessions.setStatus('current')
fgFwIppStatsTcpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsTcpSessions.setStatus('current')
fgFwIppStatsUdpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsUdpSessions.setStatus('current')
fgFwIppStatsOtherSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsOtherSessions.setStatus('current')
fgFwIppStatsTotalPBAs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsTotalPBAs.setStatus('current')
fgFwIppStatsInusePBAs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsInusePBAs.setStatus('current')
fgFwIppStatsExpiringPBAs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsExpiringPBAs.setStatus('current')
fgFwIppStatsFreePBAs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsFreePBAs.setStatus('current')
fgFwIppStatsFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsFlags.setStatus('current')
fgFwIppStatsGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsGroupName.setStatus('current')
fgFwIppStatsBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsBlockSize.setStatus('current')
fgFwIppStatsPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 16), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsPortStart.setStatus('current')
fgFwIppStatsPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 17), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsPortEnd.setStatus('current')
fgFwIppStatsStartClientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsStartClientIP.setStatus('current')
fgFwIppStatsEndClientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsEndClientIP.setStatus('current')
fgFwIppStatsRscTCP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsRscTCP.setStatus('current')
fgFwIppStatsRscUDP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsRscUDP.setStatus('current')
fgFwIppStatsUsedRscTCP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsUsedRscTCP.setStatus('current')
fgFwIppStatsUsedRscUDP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsUsedRscUDP.setStatus('current')
fgFwIppStatsPercentageTCP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 24), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsPercentageTCP.setStatus('current')
fgFwIppStatsPercentageUDP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 2, 1, 1, 25), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwIppStatsPercentageUDP.setStatus('current')
fgFwIppTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 3))
fgFwIppTrapType = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raise", 1), ("clear", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgFwIppTrapType.setStatus('current')
fgFwTrapPoolUtilization = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 3, 2), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgFwTrapPoolUtilization.setStatus('current')
fgFwIppTrapPoolProto = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 3, 3, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgFwIppTrapPoolProto.setStatus('current')
fgFwGtp = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4))
fgFwGtpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1))
fgFwGtpStatsRequest = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsRequest.setStatus('current')
fgFwGtpStatsEchoRequest = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsEchoRequest.setStatus('current')
fgFwGtpStatsTunnel = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsTunnel.setStatus('current')
fgFwGtpStatsTunnelV0 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsTunnelV0.setStatus('current')
fgFwGtpStatsPath = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsPath.setStatus('current')
fgFwGtpStatsBearer = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsBearer.setStatus('current')
fgFwGtpStatsFteid = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsFteid.setStatus('current')
fgFwGtpStatsProfile = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsProfile.setStatus('current')
fgFwGtpStatsImsi = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsImsi.setStatus('current')
fgFwGtpStatsApn = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsApn.setStatus('current')
fgFwGtpStatsApnShaper = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsApnShaper.setStatus('current')
fgFwGtpStatsTunnelLimiter = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsTunnelLimiter.setStatus('current')
fgFwGtpStatsAdvPolicies = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsAdvPolicies.setStatus('current')
fgFwGtpStatsIeRemovePolicies = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsIeRemovePolicies.setStatus('current')
fgFwGtpStatsIpPolicy = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsIpPolicy.setStatus('current')
fgFwGtpStatsNoipPolicy = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsNoipPolicy.setStatus('current')
fgFwGtpStatsIeWlEntry = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsIeWlEntry.setStatus('current')
fgFwGtpStatsClash = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsClash.setStatus('current')
fgFwGtpStatsDrop = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpStatsDrop.setStatus('current')
fgFwGtpRtStats = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2))
fgFwGtpRtStatsCPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1))
fgFwGtpRtStatsCForwarded = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCForwarded.setStatus('current')
fgFwGtpRtStatsCRejected = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCRejected.setStatus('current')
fgFwGtpRtStatsCDropped0 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped0.setStatus('current')
fgFwGtpRtStatsCDropped1 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped1.setStatus('current')
fgFwGtpRtStatsCDropped2 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped2.setStatus('current')
fgFwGtpRtStatsCDropped3 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped3.setStatus('current')
fgFwGtpRtStatsCDropped4 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped4.setStatus('current')
fgFwGtpRtStatsCDropped5 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped5.setStatus('current')
fgFwGtpRtStatsCDropped6 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped6.setStatus('current')
fgFwGtpRtStatsCDropped7 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped7.setStatus('current')
fgFwGtpRtStatsCDropped8 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped8.setStatus('current')
fgFwGtpRtStatsCDropped9 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped9.setStatus('current')
fgFwGtpRtStatsCDropped10 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped10.setStatus('current')
fgFwGtpRtStatsCDropped11 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped11.setStatus('current')
fgFwGtpRtStatsCDropped12 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped12.setStatus('current')
fgFwGtpRtStatsCDropped13 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped13.setStatus('current')
fgFwGtpRtStatsCDropped14 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped14.setStatus('current')
fgFwGtpRtStatsCDropped15 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped15.setStatus('current')
fgFwGtpRtStatsCDropped16 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped16.setStatus('current')
fgFwGtpRtStatsCDropped17 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped17.setStatus('current')
fgFwGtpRtStatsCDropped18 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped18.setStatus('current')
fgFwGtpRtStatsCDropped19 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped19.setStatus('current')
fgFwGtpRtStatsCDropped20 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped20.setStatus('current')
fgFwGtpRtStatsCDropped21 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped21.setStatus('current')
fgFwGtpRtStatsCDropped22 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped22.setStatus('current')
fgFwGtpRtStatsCDropped23 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsCDropped23.setStatus('current')
fgFwGtpRtStatsDPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 2))
fgFwGtpRtStatsDForwarded = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsDForwarded.setStatus('current')
fgFwGtpRtStatsDDroppedSanity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsDDroppedSanity.setStatus('current')
fgFwGtpRtStatsDDroppedMalMsg = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsDDroppedMalMsg.setStatus('current')
fgFwGtpRtStatsDDroppedNoState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsDDroppedNoState.setStatus('current')
fgFwGtpRtStatsDDroppedMalIe = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsDDroppedMalIe.setStatus('current')
fgFwGtpRtStatsDDroppedGtpInGtp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsDDroppedGtpInGtp.setStatus('current')
fgFwGtpRtStatsDDroppedSpoof = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsDDroppedSpoof.setStatus('current')
fgFwGtpRtStatsDDroppedIpPol = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsDDroppedIpPol.setStatus('current')
fgFwGtpRtStatsDDroppedMsgFilter = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsDDroppedMsgFilter.setStatus('current')
fgFwGtpRtStatsDDroppedMsgRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsDDroppedMsgRateLimit.setStatus('current')
fgFwGtpRtStatsDDroppedUnknownVersion = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsDDroppedUnknownVersion.setStatus('current')
fgFwGtpRtStatsBPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 3))
fgFwGtpRtStatsBForwarded = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 3, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsBForwarded.setStatus('current')
fgFwGtpRtStatsBDroppedSanity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsBDroppedSanity.setStatus('current')
fgFwGtpRtStatsBDroppedMalMsg = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsBDroppedMalMsg.setStatus('current')
fgFwGtpRtStatsBDroppedMalIe = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsBDroppedMalIe.setStatus('current')
fgFwGtpRtStatsBDroppedMsgFilter = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 4, 2, 3, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwGtpRtStatsBDroppedMsgFilter.setStatus('current')
fgFwAddresses = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 5))
fgFwAddrTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 5, 2))
fgFwAddrDynEmsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 5, 5, 2, 1), )
if mibBuilder.loadTexts: fgFwAddrDynEmsTable.setStatus('current')
fgFwAddrDynEmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 5, 5, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgFwAddrDynEmsID"))
if mibBuilder.loadTexts: fgFwAddrDynEmsEntry.setStatus('current')
fgFwAddrDynEmsID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 5, 2, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgFwAddrDynEmsID.setStatus('current')
fgFwAddrDynEmsName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwAddrDynEmsName.setStatus('current')
fgFwAddrDynEmsAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 5, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwAddrDynEmsAddresses.setStatus('current')
fgMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6))
fgFmTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6, 0))
fgAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1))
fgAdminOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 1))
fgAdminIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAdminIdleTimeout.setStatus('current')
fgAdminLcdProtection = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 1, 2), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAdminLcdProtection.setStatus('current')
fgAdminTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 2))
fgAdminTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 2, 1), )
if mibBuilder.loadTexts: fgAdminTable.setStatus('current')
fgAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 2, 1, 1), )
fnAdminEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgAdminEntry"))
fgAdminEntry.setIndexNames(*fnAdminEntry.getIndexNames())
if mibBuilder.loadTexts: fgAdminEntry.setStatus('current')
fgAdminVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 2, 1, 1, 1), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAdminVdom.setStatus('current')
fgMgmtTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6, 2))
fgManIfIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 6, 2, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgManIfIp.setStatus('current')
fgManIfMask = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 6, 2, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgManIfMask.setStatus('current')
fgManIfIp6 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 6, 2, 3), Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgManIfIp6.setStatus('current')
fgFazTrapType = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mainFailover", 1), ("altFailover", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgFazTrapType.setStatus('current')
fgIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 7))
fgIntfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 7, 1))
fgIntfTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2))
fgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 1), )
if mibBuilder.loadTexts: fgIntfTable.setStatus('current')
fgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 1, 1), )
ifEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgIntfEntry"))
fgIntfEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: fgIntfEntry.setStatus('current')
fgIntfEntVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 1, 1, 1), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfEntVdom.setStatus('current')
fgIntfEntEstUpBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfEntEstUpBandwidth.setStatus('current')
fgIntfEntEstDownBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfEntEstDownBandwidth.setStatus('current')
fgIntfEntMeaUpBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfEntMeaUpBandwidth.setStatus('current')
fgIntfEntMeaDownBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfEntMeaDownBandwidth.setStatus('current')
fgIntfVlanTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 2), )
if mibBuilder.loadTexts: fgIntfVlanTable.setStatus('current')
fgIntfVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fgIntfVlanEntry.setStatus('current')
fgIntfVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVlanName.setStatus('current')
fgIntfVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVlanID.setStatus('current')
fgIntfVlanPhyName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVlanPhyName.setStatus('current')
fgIntfVrrps = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3))
fgIntfVrrpCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpCount.setStatus('current')
fgIntfVrrpTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2), )
if mibBuilder.loadTexts: fgIntfVrrpTable.setStatus('current')
fgIntfVrrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntIndex"))
if mibBuilder.loadTexts: fgIntfVrrpEntry.setStatus('current')
fgIntfVrrpEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgIntfVrrpEntIndex.setStatus('current')
fgIntfVrrpEntVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 2), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpEntVrId.setStatus('current')
fgIntfVrrpEntGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 3), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpEntGrpId.setStatus('current')
fgIntfVrrpEntIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpEntIfName.setStatus('current')
fgIntfVrrpEntState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backup", 1), ("master", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpEntState.setStatus('current')
fgIntfVrrpEntVrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpEntVrIp.setStatus('current')
fgIntfVlanHbs = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4))
fgIntfVlanHbCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVlanHbCount.setStatus('current')
fgIntfVlanHbTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2), )
if mibBuilder.loadTexts: fgIntfVlanHbTable.setStatus('current')
fgIntfVlanHbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgIntfVlanHbEntIndex"))
if mibBuilder.loadTexts: fgIntfVlanHbEntry.setStatus('current')
fgIntfVlanHbEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgIntfVlanHbEntIndex.setStatus('current')
fgIntfVlanHbEntIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVlanHbEntIfName.setStatus('current')
fgIntfVlanHbEntSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVlanHbEntSerial.setStatus('current')
fgIntfVlanHbEntState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVlanHbEntState.setStatus('current')
fgIntfBcs = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5))
fgIntfBcTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 2), )
if mibBuilder.loadTexts: fgIntfBcTable.setStatus('current')
fgIntfBcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fgIntfBcEntry.setStatus('current')
fgIntfBcAllocatedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcAllocatedBandwidth.setStatus('current')
fgIntfBcGuaranteedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcGuaranteedBandwidth.setStatus('current')
fgIntfBcMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcMaxBandwidth.setStatus('current')
fgIntfBcCurrentBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCurrentBandwidth.setStatus('current')
fgIntfBcBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcBytes.setStatus('current')
fgIntfBcDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcDrops.setStatus('current')
fgIntfBcQTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 4), )
if mibBuilder.loadTexts: fgIntfBcQTable.setStatus('current')
fgIntfBcQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fgIntfBcQEntry.setStatus('current')
fgIntfBcQPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcQPackets.setStatus('current')
fgIntfBcQBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcQBytes.setStatus('current')
fgIntfBcQPDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcQPDrops.setStatus('current')
fgIntfBcQBDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcQBDrops.setStatus('current')
fgIntfBcInTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 3), )
if mibBuilder.loadTexts: fgIntfBcInTable.setStatus('current')
fgIntfBcInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fgIntfBcInEntry.setStatus('current')
fgIntfBcInAllocatedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcInAllocatedBandwidth.setStatus('current')
fgIntfBcInGuaranteedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcInGuaranteedBandwidth.setStatus('current')
fgIntfBcInMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcInMaxBandwidth.setStatus('current')
fgIntfBcInCurrentBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcInCurrentBandwidth.setStatus('current')
fgIntfBcInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcInBytes.setStatus('current')
fgIntfBcInDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcInDrops.setStatus('current')
fgIntfBcCfgTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5))
fgIntfBcCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 1), )
if mibBuilder.loadTexts: fgIntfBcCfgIfTable.setStatus('current')
fgIntfBcCfgIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fgIntfBcCfgIfEntry.setStatus('current')
fgIntfBcCfgIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgIfName.setStatus('current')
fgIntfBcCfgIfEgressSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgIfEgressSProfile.setStatus('current')
fgIntfBcCfgIfIngressSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgIfIngressSProfile.setStatus('current')
fgIntfBcCfgIfEstUpBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgIfEstUpBandwidth.setStatus('current')
fgIntfBcCfgIfEstDownBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgIfEstDownBandwidth.setStatus('current')
fgIntfBcCfgIfInBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgIfInBandwidth.setStatus('current')
fgIntfBcCfgIfOutBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgIfOutBandwidth.setStatus('current')
fgIntfBcCfgSproTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 2), )
if mibBuilder.loadTexts: fgIntfBcCfgSproTable.setStatus('current')
fgIntfBcCfgSproEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgIntfBcCfgSproID"))
if mibBuilder.loadTexts: fgIntfBcCfgSproEntry.setStatus('current')
fgIntfBcCfgSproID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgIntfBcCfgSproID.setStatus('current')
fgIntfBcCfgSproName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgSproName.setStatus('current')
fgIntfBcCfgSproType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("policing", 0), ("queueing", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgSproType.setStatus('current')
fgIntfBcCfgSproDefaultClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgSproDefaultClassId.setStatus('current')
fgIntfBcCfgSproClassNum = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgSproClassNum.setStatus('current')
fgIntfBcCfgSentTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 3), )
if mibBuilder.loadTexts: fgIntfBcCfgSentTable.setStatus('current')
fgIntfBcCfgSentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgIntfBcCfgSproID"), (0, "FORTINET-FORTIGATE-MIB", "fgIntfBcCfgSentClassID"))
if mibBuilder.loadTexts: fgIntfBcCfgSentEntry.setStatus('current')
fgIntfBcCfgSentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 3, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgIntfBcCfgSentClassID.setStatus('current')
fgIntfBcCfgSentClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgSentClassName.setStatus('current')
fgIntfBcCfgSentGuaranteedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgSentGuaranteedBandwidth.setStatus('current')
fgIntfBcCfgSentMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgSentMaxBandwidth.setStatus('current')
fgIntfBcCfgSpolTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 4), )
if mibBuilder.loadTexts: fgIntfBcCfgSpolTable.setStatus('current')
fgIntfBcCfgSpolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 4, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgIntfBcCfgSpolID"))
if mibBuilder.loadTexts: fgIntfBcCfgSpolEntry.setStatus('current')
fgIntfBcCfgSpolID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 4, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgIntfBcCfgSpolID.setStatus('current')
fgIntfBcCfgSpolSrcaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgSpolSrcaddr.setStatus('current')
fgIntfBcCfgSpolDstaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgSpolDstaddr.setStatus('current')
fgIntfBcCfgSpolSvr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgSpolSvr.setStatus('current')
fgIntfBcCfgSpolComment = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgSpolComment.setStatus('current')
fgIntfBcCfgSpolClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 5, 5, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfBcCfgSpolClassName.setStatus('current')
fgAntivirus = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 8))
fgAvInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 8, 1))
fgAvTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2))
fgAvStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1), )
if mibBuilder.loadTexts: fgAvStatsTable.setStatus('current')
fgAvStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgAvStatsEntry"))
fgAvStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgAvStatsEntry.setStatus('current')
fgAvVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvVirusDetected.setStatus('current')
fgAvVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvVirusBlocked.setStatus('current')
fgAvHTTPVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvHTTPVirusDetected.setStatus('current')
fgAvHTTPVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvHTTPVirusBlocked.setStatus('current')
fgAvSMTPVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvSMTPVirusDetected.setStatus('current')
fgAvSMTPVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvSMTPVirusBlocked.setStatus('current')
fgAvPOP3VirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvPOP3VirusDetected.setStatus('current')
fgAvPOP3VirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvPOP3VirusBlocked.setStatus('current')
fgAvIMAPVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvIMAPVirusDetected.setStatus('current')
fgAvIMAPVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvIMAPVirusBlocked.setStatus('current')
fgAvFTPVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvFTPVirusDetected.setStatus('current')
fgAvFTPVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvFTPVirusBlocked.setStatus('current')
fgAvIMVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvIMVirusDetected.setStatus('current')
fgAvIMVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvIMVirusBlocked.setStatus('current')
fgAvNNTPVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvNNTPVirusDetected.setStatus('current')
fgAvNNTPVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvNNTPVirusBlocked.setStatus('current')
fgAvOversizedDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvOversizedDetected.setStatus('current')
fgAvOversizedBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvOversizedBlocked.setStatus('current')
fgAvMAPIVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvMAPIVirusDetected.setStatus('current')
fgAvMAPIVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvMAPIVirusBlocked.setStatus('current')
fgAvSMBVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvSMBVirusDetected.setStatus('current')
fgAvSMBVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvSMBVirusBlocked.setStatus('current')
fgAvTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 8, 3))
fgAvTrapVirName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 8, 3, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgAvTrapVirName.setStatus('current')
fgIps = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 9))
fgIpsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 9, 1))
fgIpsTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2))
fgIpsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1), )
if mibBuilder.loadTexts: fgIpsStatsTable.setStatus('current')
fgIpsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgIpsStatsEntry"))
fgIpsStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgIpsStatsEntry.setStatus('current')
fgIpsIntrusionsDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsIntrusionsDetected.setStatus('current')
fgIpsIntrusionsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsIntrusionsBlocked.setStatus('current')
fgIpsCritSevDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsCritSevDetections.setStatus('current')
fgIpsHighSevDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsHighSevDetections.setStatus('current')
fgIpsMedSevDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsMedSevDetections.setStatus('current')
fgIpsLowSevDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsLowSevDetections.setStatus('current')
fgIpsInfoSevDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsInfoSevDetections.setStatus('current')
fgIpsSignatureDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsSignatureDetections.setStatus('current')
fgIpsAnomalyDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsAnomalyDetections.setStatus('current')
fgIpsTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 9, 3))
fgIpsTrapSigId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 9, 3, 1), FnIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgIpsTrapSigId.setStatus('current')
fgIpsTrapSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 9, 3, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgIpsTrapSrcIp.setStatus('current')
fgIpsTrapSigMsg = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 9, 3, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgIpsTrapSigMsg.setStatus('current')
fgApplications = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10))
fgWebfilter = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1))
fgWebfilterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 1))
fgWebfilterTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2))
fgWebfilterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1), )
if mibBuilder.loadTexts: fgWebfilterStatsTable.setStatus('current')
fgWebfilterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgWebfilterStatsEntry"))
fgWebfilterStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgWebfilterStatsEntry.setStatus('current')
fgWfHTTPBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfHTTPBlocked.setStatus('current')
fgWfHTTPSBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfHTTPSBlocked.setStatus('current')
fgWfHTTPURLBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfHTTPURLBlocked.setStatus('current')
fgWfHTTPSURLBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfHTTPSURLBlocked.setStatus('current')
fgWfActiveXBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfActiveXBlocked.setStatus('current')
fgWfCookieBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfCookieBlocked.setStatus('current')
fgWfAppletBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfAppletBlocked.setStatus('current')
fgFortiGuardStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2), )
if mibBuilder.loadTexts: fgFortiGuardStatsTable.setStatus('current')
fgFortiGuardStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgFortiGuardStatsEntry"))
fgFortiGuardStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgFortiGuardStatsEntry.setStatus('current')
fgFgWfHTTPExamined = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPExamined.setStatus('current')
fgFgWfHTTPSExamined = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPSExamined.setStatus('current')
fgFgWfHTTPAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPAllowed.setStatus('current')
fgFgWfHTTPSAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPSAllowed.setStatus('current')
fgFgWfHTTPBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPBlocked.setStatus('current')
fgFgWfHTTPSBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPSBlocked.setStatus('current')
fgFgWfHTTPLogged = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPLogged.setStatus('current')
fgFgWfHTTPSLogged = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPSLogged.setStatus('current')
fgFgWfHTTPOverridden = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPOverridden.setStatus('current')
fgFgWfHTTPSOverridden = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPSOverridden.setStatus('current')
fgAppProxyHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100))
fgApHTTPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApHTTPUpTime.setStatus('deprecated')
fgApHTTPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApHTTPMemUsage.setStatus('deprecated')
fgApHTTPConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApHTTPConnections.setStatus('current')
fgApHTTPMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApHTTPMaxConnections.setStatus('current')
fgApHTTPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 3), )
if mibBuilder.loadTexts: fgApHTTPStatsTable.setStatus('current')
fgApHTTPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApHTTPStatsEntry"))
fgApHTTPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApHTTPStatsEntry.setStatus('current')
fgApHTTPReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApHTTPReqProcessed.setStatus('current')
fgAppProxySMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101))
fgApSMTPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPUpTime.setStatus('deprecated')
fgApSMTPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPMemUsage.setStatus('deprecated')
fgApSMTPConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPConnections.setStatus('current')
fgApSMTPMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPMaxConnections.setStatus('current')
fgApSMTPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 3), )
if mibBuilder.loadTexts: fgApSMTPStatsTable.setStatus('current')
fgApSMTPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApSMTPStatsEntry"))
fgApSMTPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApSMTPStatsEntry.setStatus('current')
fgApSMTPReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPReqProcessed.setStatus('current')
fgApSMTPSpamDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPSpamDetected.setStatus('current')
fgAppProxyPOP3 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102))
fgApPOP3UpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3UpTime.setStatus('deprecated')
fgApPOP3MemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3MemUsage.setStatus('deprecated')
fgApPOP3Connections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3Connections.setStatus('current')
fgApPOP3MaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3MaxConnections.setStatus('current')
fgApPOP3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 3), )
if mibBuilder.loadTexts: fgApPOP3StatsTable.setStatus('current')
fgApPOP3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApPOP3StatsEntry"))
fgApPOP3StatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApPOP3StatsEntry.setStatus('current')
fgApPOP3ReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3ReqProcessed.setStatus('current')
fgApPOP3SpamDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3SpamDetected.setStatus('current')
fgAppProxyIMAP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103))
fgApIMAPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPUpTime.setStatus('deprecated')
fgApIMAPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPMemUsage.setStatus('deprecated')
fgApIMAPConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPConnections.setStatus('current')
fgApIMAPMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPMaxConnections.setStatus('current')
fgApIMAPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 3), )
if mibBuilder.loadTexts: fgApIMAPStatsTable.setStatus('current')
fgApIMAPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApIMAPStatsEntry"))
fgApIMAPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApIMAPStatsEntry.setStatus('current')
fgApIMAPReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPReqProcessed.setStatus('current')
fgApIMAPSpamDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPSpamDetected.setStatus('current')
fgAppProxyNNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104))
fgApNNTPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApNNTPUpTime.setStatus('deprecated')
fgApNNTPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApNNTPMemUsage.setStatus('deprecated')
fgApNNTPConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApNNTPConnections.setStatus('current')
fgApNNTPMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApNNTPMaxConnections.setStatus('current')
fgApNNTPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 3), )
if mibBuilder.loadTexts: fgApNNTPStatsTable.setStatus('current')
fgApNNTPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApNNTPStatsEntry"))
fgApNNTPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApNNTPStatsEntry.setStatus('current')
fgApNNTPReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApNNTPReqProcessed.setStatus('current')
fgAppProxyIM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105))
fgApIMUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMUpTime.setStatus('current')
fgApIMMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMMemUsage.setStatus('current')
fgApIMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105, 3), )
if mibBuilder.loadTexts: fgApIMStatsTable.setStatus('current')
fgApIMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApIMStatsEntry"))
fgApIMStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApIMStatsEntry.setStatus('current')
fgApIMReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMReqProcessed.setStatus('current')
fgAppProxySIP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106))
fgApSIPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPUpTime.setStatus('current')
fgApSIPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPMemUsage.setStatus('current')
fgApSIPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3), )
if mibBuilder.loadTexts: fgApSIPStatsTable.setStatus('current')
fgApSIPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApSIPStatsEntry"))
fgApSIPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApSIPStatsEntry.setStatus('current')
fgApSIPClientReg = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPClientReg.setStatus('current')
fgApSIPCallHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPCallHandling.setStatus('current')
fgApSIPServices = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPServices.setStatus('current')
fgApSIPOtherReq = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPOtherReq.setStatus('current')
fgAppScanUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107))
fgAppSuNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppSuNumber.setStatus('current')
fgAppSuStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107, 2), )
if mibBuilder.loadTexts: fgAppSuStatsTable.setStatus('current')
fgAppSuStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgAppSuIndex"))
if mibBuilder.loadTexts: fgAppSuStatsEntry.setStatus('current')
fgAppSuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgAppSuIndex.setStatus('current')
fgAppSuFileScanned = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppSuFileScanned.setStatus('current')
fgAppVoIP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 108))
fgAppVoIPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 108, 1), )
if mibBuilder.loadTexts: fgAppVoIPStatsTable.setStatus('current')
fgAppVoIPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 108, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgAppVoIPStatsEntry"))
fgAppVoIPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgAppVoIPStatsEntry.setStatus('current')
fgAppVoIPConn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 108, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppVoIPConn.setStatus('current')
fgAppVoIPCallBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 108, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppVoIPCallBlocked.setStatus('current')
fgAppP2P = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109))
fgAppP2PStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 1), )
if mibBuilder.loadTexts: fgAppP2PStatsTable.setStatus('current')
fgAppP2PStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgAppP2PStatsEntry"))
fgAppP2PStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgAppP2PStatsEntry.setStatus('current')
fgAppP2PConnBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppP2PConnBlocked.setStatus('current')
fgAppP2PProtoTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 2), )
if mibBuilder.loadTexts: fgAppP2PProtoTable.setStatus('current')
fgAppP2PProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgAppP2PProtEntProto"))
if mibBuilder.loadTexts: fgAppP2PProtoEntry.setStatus('current')
fgAppP2PProtEntProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 2, 1, 1), FgP2PProto())
if mibBuilder.loadTexts: fgAppP2PProtEntProto.setStatus('current')
fgAppP2PProtEntBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppP2PProtEntBytes.setStatus('current')
fgAppP2PProtoEntLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppP2PProtoEntLastReset.setStatus('current')
fgAppIM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110))
fgAppIMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1), )
if mibBuilder.loadTexts: fgAppIMStatsTable.setStatus('current')
fgAppIMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgAppIMStatsEntry"))
fgAppIMStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgAppIMStatsEntry.setStatus('current')
fgAppIMMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppIMMessages.setStatus('current')
fgAppIMFileTransfered = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppIMFileTransfered.setStatus('current')
fgAppIMFileTxBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppIMFileTxBlocked.setStatus('current')
fgAppIMConnBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppIMConnBlocked.setStatus('current')
fgAppProxyFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111))
fgApFTPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApFTPUpTime.setStatus('deprecated')
fgApFTPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApFTPMemUsage.setStatus('deprecated')
fgApFTPConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApFTPConnections.setStatus('current')
fgApFTPMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApFTPMaxConnections.setStatus('current')
fgApFTPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 3), )
if mibBuilder.loadTexts: fgApFTPStatsTable.setStatus('current')
fgApFTPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApFTPStatsEntry"))
fgApFTPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApFTPStatsEntry.setStatus('current')
fgApFTPReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApFTPReqProcessed.setStatus('current')
fgAppExplicitProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112))
fgExplicitProxyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 1))
fgExplicitProxyUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyUpTime.setStatus('current')
fgExplicitProxyMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyMemUsage.setStatus('current')
fgExplicitProxyRequests = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyRequests.setStatus('current')
fgExplicitProxyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 2), )
if mibBuilder.loadTexts: fgExplicitProxyStatsTable.setStatus('current')
fgExplicitProxyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgExplicitProxyStatsEntry.setStatus('current')
fgExplicitProxyUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyUsers.setStatus('current')
fgExplicitProxySessions = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxySessions.setStatus('current')
fgExplicitProxyScanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3), )
if mibBuilder.loadTexts: fgExplicitProxyScanStatsTable.setStatus('current')
fgExplicitProxyScanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgExplicitProxyScanStatsDisp"))
if mibBuilder.loadTexts: fgExplicitProxyScanStatsEntry.setStatus('current')
fgExplicitProxyScanStatsDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 1), FgScanAvDisposition())
if mibBuilder.loadTexts: fgExplicitProxyScanStatsDisp.setStatus('current')
fgExplicitProxyVirus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyVirus.setStatus('current')
fgExplicitProxyBannedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyBannedWords.setStatus('current')
fgExplicitProxyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyPolicy.setStatus('current')
fgExplicitProxyOversized = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyOversized.setStatus('current')
fgExplicitProxyArchNest = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchNest.setStatus('current')
fgExplicitProxyArchSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchSize.setStatus('current')
fgExplicitProxyArchEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchEncrypted.setStatus('current')
fgExplicitProxyArchMultiPart = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchMultiPart.setStatus('current')
fgExplicitProxyArchUnsupported = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchUnsupported.setStatus('current')
fgExplicitProxyArchBomb = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchBomb.setStatus('current')
fgExplicitProxyArchCorrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchCorrupt.setStatus('current')
fgExplicitProxyScriptStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4), )
if mibBuilder.loadTexts: fgExplicitProxyScriptStatsTable.setStatus('current')
fgExplicitProxyScriptStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgExplicitProxyScriptStatsEntry.setStatus('current')
fgExplicitProxyFilteredApplets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredApplets.setStatus('current')
fgExplicitProxyFilteredActiveX = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredActiveX.setStatus('current')
fgExplicitProxyFilteredJScript = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredJScript.setStatus('current')
fgExplicitProxyFilteredJS = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredJS.setStatus('current')
fgExplicitProxyFilteredVBS = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredVBS.setStatus('current')
fgExplicitProxyFilteredOthScript = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredOthScript.setStatus('current')
fgExplicitProxyFilterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5), )
if mibBuilder.loadTexts: fgExplicitProxyFilterStatsTable.setStatus('current')
fgExplicitProxyFilterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgExplicitProxyFilterStatsEntry.setStatus('current')
fgExplicitProxyBlockedDLP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyBlockedDLP.setStatus('current')
fgExplicitProxyBlockedConType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyBlockedConType.setStatus('current')
fgExplicitProxyExaminedURLs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyExaminedURLs.setStatus('current')
fgExplicitProxyAllowedURLs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyAllowedURLs.setStatus('current')
fgExplicitProxyBlockedURLs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyBlockedURLs.setStatus('current')
fgExplicitProxyLoggedURLs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyLoggedURLs.setStatus('current')
fgExplicitProxyOverriddenURLs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyOverriddenURLs.setStatus('current')
fgAppWebCache = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113))
fgWebCacheInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1))
fgWebCacheRAMLimit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheRAMLimit.setStatus('current')
fgWebCacheRAMUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheRAMUsage.setStatus('current')
fgWebCacheRAMHits = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheRAMHits.setStatus('current')
fgWebCacheRAMMisses = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheRAMMisses.setStatus('current')
fgWebCacheRequests = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheRequests.setStatus('current')
fgWebCacheBypass = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheBypass.setStatus('current')
fgWebCacheUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheUpTime.setStatus('current')
fgWebCacheDiskStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2), )
if mibBuilder.loadTexts: fgWebCacheDiskStatsTable.setStatus('current')
fgWebCacheDiskStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgWebCacheDisk"))
if mibBuilder.loadTexts: fgWebCacheDiskStatsEntry.setStatus('current')
fgWebCacheDisk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fgWebCacheDisk.setStatus('current')
fgWebCacheDiskLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheDiskLimit.setStatus('current')
fgWebCacheDiskUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheDiskUsage.setStatus('current')
fgWebCacheDiskHits = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheDiskHits.setStatus('current')
fgWebCacheDiskMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheDiskMisses.setStatus('current')
fgWebCacheDiskFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheDiskFailure.setStatus('current')
fgAppWanOpt = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114))
fgWanOptInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1))
fgMemCacheLimit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMemCacheLimit.setStatus('current')
fgMemCacheUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMemCacheUsage.setStatus('current')
fgMemCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMemCacheHits.setStatus('current')
fgMemCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMemCacheMisses.setStatus('current')
fgByteCacheRAMLimit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgByteCacheRAMLimit.setStatus('current')
fgByteCacheRAMUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgByteCacheRAMUsage.setStatus('current')
fgWanOptUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptUpTime.setStatus('current')
fgWanOptStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2), )
if mibBuilder.loadTexts: fgWanOptStatsTable.setStatus('current')
fgWanOptStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgWanOptStatsEntry.setStatus('current')
fgWanOptTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptTunnels.setStatus('current')
fgWanOptLANBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptLANBytesIn.setStatus('current')
fgWanOptLANBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptLANBytesOut.setStatus('current')
fgWanOptWANBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptWANBytesIn.setStatus('current')
fgWanOptWANBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptWANBytesOut.setStatus('current')
fgWanOptHistoryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3), )
if mibBuilder.loadTexts: fgWanOptHistoryStatsTable.setStatus('current')
fgWanOptHistoryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWanOptHistPeriod"), (0, "FORTINET-FORTIGATE-MIB", "fgWanOptProtocol"))
if mibBuilder.loadTexts: fgWanOptHistoryStatsEntry.setStatus('current')
fgWanOptHistPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1, 1), FgWanOptHistPeriods())
if mibBuilder.loadTexts: fgWanOptHistPeriod.setStatus('current')
fgWanOptProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1, 2), FgWanOptProtocols())
if mibBuilder.loadTexts: fgWanOptProtocol.setStatus('current')
fgWanOptReductionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptReductionRate.setStatus('current')
fgWanOptLanTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptLanTraffic.setStatus('current')
fgWanOptWanTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1, 5), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptWanTraffic.setStatus('current')
fgWanOptTrafficStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4), )
if mibBuilder.loadTexts: fgWanOptTrafficStatsTable.setStatus('current')
fgWanOptTrafficStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWanOptProtocol"))
if mibBuilder.loadTexts: fgWanOptTrafficStatsEntry.setStatus('current')
fgWanOptLanInTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptLanInTraffic.setStatus('current')
fgWanOptLanOutTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptLanOutTraffic.setStatus('current')
fgWanOptWanInTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptWanInTraffic.setStatus('current')
fgWanOptWanOutTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptWanOutTraffic.setStatus('current')
fgWanOptDiskStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5), )
if mibBuilder.loadTexts: fgWanOptDiskStatsTable.setStatus('current')
fgWanOptDiskStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgWanOptDisk"))
if mibBuilder.loadTexts: fgWanOptDiskStatsEntry.setStatus('current')
fgWanOptDisk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fgWanOptDisk.setStatus('current')
fgWanOptDiskLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptDiskLimit.setStatus('current')
fgWanOptDiskUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptDiskUsage.setStatus('current')
fgWanOptDiskHits = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptDiskHits.setStatus('current')
fgWanOptDiskMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptDiskMisses.setStatus('current')
fgWanOptDiskFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptDiskFailure.setStatus('current')
fgAppDNSProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 115))
fgDNSProxyStatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 115, 1))
fgDNSProxyStatsUdpCacheHit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 115, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDNSProxyStatsUdpCacheHit.setStatus('current')
fgDNSProxyStatsUdpRatingCacheHit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 115, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDNSProxyStatsUdpRatingCacheHit.setStatus('current')
fgDNSProxyStatsUdpReq = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 115, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDNSProxyStatsUdpReq.setStatus('current')
fgDNSProxyStatsUdpRes = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 115, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDNSProxyStatsUdpRes.setStatus('current')
fgDNSProxyStatsUdpFwd = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 115, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDNSProxyStatsUdpFwd.setStatus('current')
fgDNSProxyStatsUdpRetrans = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 115, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDNSProxyStatsUdpRetrans.setStatus('current')
fgDNSProxyStatsUdpTo = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 115, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDNSProxyStatsUdpTo.setStatus('current')
fgDNSProxyStatsUdpFtgRes = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 115, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDNSProxyStatsUdpFtgRes.setStatus('current')
fgDNSProxyStatsUdpFtgFwd = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 115, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDNSProxyStatsUdpFtgFwd.setStatus('current')
fgDNSProxyStatsUdpFtgRetrans = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 115, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDNSProxyStatsUdpFtgRetrans.setStatus('current')
fgAppFnbam = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 116))
fgAppFnbamStatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 116, 1))
fgAppFnbamStatsTotalAuthReqs = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 116, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppFnbamStatsTotalAuthReqs.setStatus('current')
fgAppFnbamStatsTotalEagainErrs = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 116, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppFnbamStatsTotalEagainErrs.setStatus('current')
fgAppFnbamStatsTotalLdapFails = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 116, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppFnbamStatsTotalLdapFails.setStatus('current')
fgInetProto = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 11))
fgInetProtoInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 11, 1))
fgInetProtoTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2))
fgIpSessTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1), )
if mibBuilder.loadTexts: fgIpSessTable.setStatus('current')
fgIpSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgIpSessIndex"))
if mibBuilder.loadTexts: fgIpSessEntry.setStatus('current')
fgIpSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgIpSessIndex.setStatus('current')
fgIpSessProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 2), FgSessProto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessProto.setStatus('current')
fgIpSessFromAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessFromAddr.setStatus('current')
fgIpSessFromPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessFromPort.setStatus('current')
fgIpSessToAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessToAddr.setStatus('current')
fgIpSessToPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessToPort.setStatus('current')
fgIpSessExp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessExp.setStatus('current')
fgIpSessVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 8), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessVdom.setStatus('current')
fgIpSessStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 2), )
if mibBuilder.loadTexts: fgIpSessStatsTable.setStatus('current')
fgIpSessStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 2, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgIpSessStatsEntry"))
fgIpSessStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgIpSessStatsEntry.setStatus('current')
fgIpSessNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessNumber.setStatus('current')
fgIp6SessStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 3), )
if mibBuilder.loadTexts: fgIp6SessStatsTable.setStatus('current')
fgIp6SessStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgIp6SessStatsEntry"))
fgIp6SessStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgIp6SessStatsEntry.setStatus('current')
fgIp6SessNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIp6SessNumber.setStatus('current')
fgVpn = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 12))
fgVpnInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 12, 1))
fgVpnTunnelUpCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunnelUpCount.setStatus('current')
fgVpnTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2))
fgVpnDialupTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1), )
if mibBuilder.loadTexts: fgVpnDialupTable.setStatus('current')
fgVpnDialupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVpnDialupIndex"))
if mibBuilder.loadTexts: fgVpnDialupEntry.setStatus('current')
fgVpnDialupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgVpnDialupIndex.setStatus('current')
fgVpnDialupGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupGateway.setStatus('current')
fgVpnDialupLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupLifetime.setStatus('current')
fgVpnDialupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupTimeout.setStatus('current')
fgVpnDialupSrcBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupSrcBegin.setStatus('current')
fgVpnDialupSrcEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupSrcEnd.setStatus('current')
fgVpnDialupDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupDstAddr.setStatus('current')
fgVpnDialupVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 8), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupVdom.setStatus('current')
fgVpnDialupInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupInOctets.setStatus('current')
fgVpnDialupOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupOutOctets.setStatus('current')
fgVpnTunTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2), )
if mibBuilder.loadTexts: fgVpnTunTable.setStatus('current')
fgVpnTunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVpnTunEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgVpnTunEntPhase2Index"))
if mibBuilder.loadTexts: fgVpnTunEntry.setStatus('current')
fgVpnTunEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgVpnTunEntIndex.setStatus('current')
fgVpnTunEntPhase1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntPhase1Name.setStatus('current')
fgVpnTunEntPhase2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntPhase2Name.setStatus('current')
fgVpnTunEntRemGwyIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntRemGwyIp.setStatus('current')
fgVpnTunEntRemGwyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 5), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntRemGwyPort.setStatus('current')
fgVpnTunEntLocGwyIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntLocGwyIp.setStatus('current')
fgVpnTunEntLocGwyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntLocGwyPort.setStatus('current')
fgVpnTunEntSelectorSrcBeginIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorSrcBeginIp.setStatus('current')
fgVpnTunEntSelectorSrcEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorSrcEndIp.setStatus('current')
fgVpnTunEntSelectorSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 10), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorSrcPort.setStatus('current')
fgVpnTunEntSelectorDstBeginIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorDstBeginIp.setStatus('current')
fgVpnTunEntSelectorDstEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorDstEndIp.setStatus('current')
fgVpnTunEntSelectorDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 13), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorDstPort.setStatus('current')
fgVpnTunEntSelectorProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorProto.setStatus('current')
fgVpnTunEntLifeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntLifeSecs.setStatus('current')
fgVpnTunEntLifeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntLifeBytes.setStatus('current')
fgVpnTunEntTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntTimeout.setStatus('current')
fgVpnTunEntInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntInOctets.setStatus('current')
fgVpnTunEntOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntOutOctets.setStatus('current')
fgVpnTunEntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntStatus.setStatus('current')
fgVpnTunEntVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 21), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntVdom.setStatus('current')
fgVpnTunEntPhase2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 22), FnIndex())
if mibBuilder.loadTexts: fgVpnTunEntPhase2Index.setStatus('current')
fgVpnSslStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3), )
if mibBuilder.loadTexts: fgVpnSslStatsTable.setStatus('current')
fgVpnSslStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsEntry"))
fgVpnSslStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgVpnSslStatsEntry.setStatus('current')
fgVpnSslState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 1), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslState.setStatus('current')
fgVpnSslStatsLoginUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsLoginUsers.setStatus('current')
fgVpnSslStatsMaxUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsMaxUsers.setStatus('current')
fgVpnSslStatsActiveWebSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsActiveWebSessions.setStatus('current')
fgVpnSslStatsMaxWebSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsMaxWebSessions.setStatus('current')
fgVpnSslStatsActiveTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsActiveTunnels.setStatus('current')
fgVpnSslStatsMaxTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsMaxTunnels.setStatus('current')
fgVpnSslTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4), )
if mibBuilder.loadTexts: fgVpnSslTunnelTable.setStatus('current')
fgVpnSslTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelIndex"))
if mibBuilder.loadTexts: fgVpnSslTunnelEntry.setStatus('current')
fgVpnSslTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgVpnSslTunnelIndex.setStatus('current')
fgVpnSslTunnelVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 2), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelVdom.setStatus('current')
fgVpnSslTunnelUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelUserName.setStatus('current')
fgVpnSslTunnelSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelSrcIp.setStatus('current')
fgVpnSslTunnelIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelIp.setStatus('current')
fgVpnSslTunnelUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelUpTime.setStatus('current')
fgVpnSslTunnelBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelBytesIn.setStatus('current')
fgVpnSslTunnelBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelBytesOut.setStatus('current')
fgVpnTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 12, 3))
fgVpnTrapLocalGateway = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 12, 3, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgVpnTrapLocalGateway.setStatus('current')
fgVpnTrapRemoteGateway = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 12, 3, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgVpnTrapRemoteGateway.setStatus('current')
fgVpnTrapPhase1Name = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 12, 3, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgVpnTrapPhase1Name.setStatus('current')
fgVpn2Tables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4))
fgVpn2DialupTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1), )
if mibBuilder.loadTexts: fgVpn2DialupTable.setStatus('current')
fgVpn2DialupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVpn2DialupIndex"))
if mibBuilder.loadTexts: fgVpn2DialupEntry.setStatus('current')
fgVpn2DialupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgVpn2DialupIndex.setStatus('current')
fgVpn2DialupGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2DialupGatewayType.setStatus('current')
fgVpn2DialupGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2DialupGateway.setStatus('current')
fgVpn2DialupLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2DialupLifetime.setStatus('current')
fgVpn2DialupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2DialupTimeout.setStatus('current')
fgVpn2DialupSrcBeginType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2DialupSrcBeginType.setStatus('current')
fgVpn2DialupSrcBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2DialupSrcBegin.setStatus('current')
fgVpn2DialupSrcEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2DialupSrcEndType.setStatus('current')
fgVpn2DialupSrcEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2DialupSrcEnd.setStatus('current')
fgVpn2DialupDstBeginType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2DialupDstBeginType.setStatus('current')
fgVpn2DialupDstBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2DialupDstBegin.setStatus('current')
fgVpn2DialupDstEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2DialupDstEndType.setStatus('current')
fgVpn2DialupDstEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2DialupDstEnd.setStatus('current')
fgVpn2DialupInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2DialupInOctets.setStatus('current')
fgVpn2DialupOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2DialupOutOctets.setStatus('current')
fgVpn2DialupPhase1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2DialupPhase1Name.setStatus('current')
fgVpn2DialupVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 1, 1, 17), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2DialupVdom.setStatus('current')
fgVpn2TunTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2), )
if mibBuilder.loadTexts: fgVpn2TunTable.setStatus('current')
fgVpn2TunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVpn2TunIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgVpn2TunPhase2Index"))
if mibBuilder.loadTexts: fgVpn2TunEntry.setStatus('current')
fgVpn2TunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgVpn2TunIndex.setStatus('current')
fgVpn2TunPhase1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunPhase1Name.setStatus('current')
fgVpn2TunPhase2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunPhase2Name.setStatus('current')
fgVpn2TunRemGwyIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunRemGwyIpType.setStatus('current')
fgVpn2TunRemGwyIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunRemGwyIp.setStatus('current')
fgVpn2TunRemGwyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunRemGwyPort.setStatus('current')
fgVpn2TunLocGwyIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunLocGwyIpType.setStatus('current')
fgVpn2TunLocGwyIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunLocGwyIp.setStatus('current')
fgVpn2TunLocGwyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 9), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunLocGwyPort.setStatus('current')
fgVpn2TunSelSrcBeginIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunSelSrcBeginIpType.setStatus('current')
fgVpn2TunSelSrcBeginIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunSelSrcBeginIp.setStatus('current')
fgVpn2TunSelSrcEndIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunSelSrcEndIpType.setStatus('current')
fgVpn2TunSelSrcEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunSelSrcEndIp.setStatus('current')
fgVpn2TunSelSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 14), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunSelSrcPort.setStatus('current')
fgVpn2TunSelDstBeginIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunSelDstBeginIpType.setStatus('current')
fgVpn2TunSelDstBeginIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 16), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunSelDstBeginIp.setStatus('current')
fgVpn2TunSelDstEndIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunSelDstEndIpType.setStatus('current')
fgVpn2TunSelDstEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunSelDstEndIp.setStatus('current')
fgVpn2TunSelDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 19), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunSelDstPort.setStatus('current')
fgVpn2TunSelProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunSelProto.setStatus('current')
fgVpn2TunLifeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunLifeSecs.setStatus('current')
fgVpn2TunLifeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunLifeBytes.setStatus('current')
fgVpn2TunTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunTimeout.setStatus('current')
fgVpn2TunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunInOctets.setStatus('current')
fgVpn2TunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunOutOctets.setStatus('current')
fgVpn2TunStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunStatus.setStatus('current')
fgVpn2TunVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 27), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpn2TunVdom.setStatus('current')
fgVpn2TunPhase2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 4, 2, 1, 28), FnIndex())
if mibBuilder.loadTexts: fgVpn2TunPhase2Index.setStatus('current')
fgHighAvailability = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 13))
fgHaInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1))
fgHaSystemMode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 1), FgHaMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaSystemMode.setStatus('current')
fgHaGroupId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 2), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaGroupId.setStatus('current')
fgHaPriority = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaPriority.setStatus('current')
fgHaOverride = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 4), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaOverride.setStatus('current')
fgHaAutoSync = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 5), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaAutoSync.setStatus('current')
fgHaSchedule = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 6), FgHaLBSchedule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaSchedule.setStatus('current')
fgHaGroupName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaGroupName.setStatus('current')
fgHaTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2))
fgHaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1), )
if mibBuilder.loadTexts: fgHaStatsTable.setStatus('current')
fgHaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgHaStatsIndex"))
if mibBuilder.loadTexts: fgHaStatsEntry.setStatus('current')
fgHaStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgHaStatsIndex.setStatus('current')
fgHaStatsSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsSerial.setStatus('current')
fgHaStatsCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsCpuUsage.setStatus('current')
fgHaStatsMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsMemUsage.setStatus('current')
fgHaStatsNetUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsNetUsage.setStatus('current')
fgHaStatsSesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsSesCount.setStatus('current')
fgHaStatsPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsPktCount.setStatus('current')
fgHaStatsByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsByteCount.setStatus('current')
fgHaStatsIdsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsIdsCount.setStatus('current')
fgHaStatsAvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsAvCount.setStatus('current')
fgHaStatsHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsHostname.setStatus('current')
fgHaStatsSyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 12), FgHaStatsSyncStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsSyncStatus.setStatus('current')
fgHaStatsSyncDatimeSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsSyncDatimeSucc.setStatus('current')
fgHaStatsSyncDatimeUnsucc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsSyncDatimeUnsucc.setStatus('current')
fgHaStatsGlobalChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsGlobalChecksum.setStatus('current')
fgHaStatsPrimarySerial = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsPrimarySerial.setStatus('current')
fgHaStatsAllChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsAllChecksum.setStatus('current')
fgHaTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 13, 3))
fgHaTrapMemberSerial = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 3, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgHaTrapMemberSerial.setStatus('current')
fgWc = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 14))
fgWcTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 14, 1))
fgWcApVdom = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 1, 1), FgVdIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgWcApVdom.setStatus('current')
fgWcApSerial = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgWcApSerial.setStatus('current')
fgWcApName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgWcApName.setStatus('current')
fgWcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2))
fgWcInfoName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoName.setStatus('current')
fgWcInfoLocation = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoLocation.setStatus('current')
fgWcInfoWtpCapacity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoWtpCapacity.setStatus('current')
fgWcInfoWtpManaged = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoWtpManaged.setStatus('current')
fgWcInfoWtpSessions = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoWtpSessions.setStatus('current')
fgWcInfoStationCapacity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoStationCapacity.setStatus('current')
fgWcInfoStationCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoStationCount.setStatus('current')
fgWcWlanTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3), )
if mibBuilder.loadTexts: fgWcWlanTable.setStatus('current')
fgWcWlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fgWcWlanEntry.setStatus('current')
fgWcWlanSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanSsid.setStatus('current')
fgWcWlanBroadcastSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 2), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanBroadcastSsid.setStatus('current')
fgWcWlanSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 3), FgWcWlanSecurityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanSecurity.setStatus('current')
fgWcWlanEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 4), FgWcWlanEncryptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanEncryption.setStatus('current')
fgWcWlanAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 5), FgWcWlanAuthenticationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanAuthentication.setStatus('current')
fgWcWlanRadiusServer = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanRadiusServer.setStatus('current')
fgWcWlanUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanUserGroup.setStatus('current')
fgWcWlanLocalBridging = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 8), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanLocalBridging.setStatus('current')
fgWcWlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanVlanId.setStatus('current')
fgWcWlanMeshBackhaul = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 10), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanMeshBackhaul.setStatus('current')
fgWcWlanStationCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanStationCapacity.setStatus('current')
fgWcWlanStationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanStationCount.setStatus('current')
fgWcWtpTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4))
fgWcWtpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1), )
if mibBuilder.loadTexts: fgWcWtpProfileTable.setStatus('current')
fgWcWtpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpProfileName"))
if mibBuilder.loadTexts: fgWcWtpProfileEntry.setStatus('current')
fgWcWtpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpProfileName.setStatus('current')
fgWcWtpProfilePlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfilePlatform.setStatus('current')
fgWcWtpProfileDataChannelDtlsPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1, 1, 3), Bits().clone(namedValues=NamedValues(("other", 0), ("clear", 1), ("dtls", 2), ("ipsec", 3), ("ipsecsn", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileDataChannelDtlsPolicy.setStatus('current')
fgWcWtpProfileCountryString = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1, 1, 4), FgWcCountryString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileCountryString.setStatus('current')
fgWcWtpProfileRadioTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2), )
if mibBuilder.loadTexts: fgWcWtpProfileRadioTable.setStatus('current')
fgWcWtpProfileRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioProfileName"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioRadioId"))
if mibBuilder.loadTexts: fgWcWtpProfileRadioEntry.setStatus('current')
fgWcWtpProfileRadioProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpProfileRadioProfileName.setStatus('current')
fgWcWtpProfileRadioRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 2), FgWcWtpRadioId())
if mibBuilder.loadTexts: fgWcWtpProfileRadioRadioId.setStatus('current')
fgWcWtpProfileRadioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 3), FgWcWtpRadioMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioMode.setStatus('current')
fgWcWtpProfileRadioApScan = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 4), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioApScan.setStatus('current')
fgWcWtpProfileRadioWidsProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioWidsProfile.setStatus('current')
fgWcWtpProfileRadioDarrp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 6), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioDarrp.setStatus('current')
fgWcWtpProfileRadioFrequencyHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 7), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioFrequencyHandoff.setStatus('current')
fgWcWtpProfileRadioApHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 8), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioApHandoff.setStatus('current')
fgWcWtpProfileRadioBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioBeaconInterval.setStatus('current')
fgWcWtpProfileRadioDtimPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioDtimPeriod.setStatus('current')
fgWcWtpProfileRadioBand = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 11), FgWcWtpRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioBand.setStatus('current')
fgWcWtpProfileRadioChannelBonding = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 12), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioChannelBonding.setStatus('current')
fgWcWtpProfileRadioChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioChannel.setStatus('current')
fgWcWtpProfileRadioAutoTxPowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 14), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioAutoTxPowerControl.setStatus('current')
fgWcWtpProfileRadioAutoTxPowerLow = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioAutoTxPowerLow.setStatus('current')
fgWcWtpProfileRadioAutoTxPowerHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioAutoTxPowerHigh.setStatus('current')
fgWcWtpProfileRadioTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 17), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioTxPowerLevel.setStatus('current')
fgWcWtpProfileRadioVaps = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioVaps.setStatus('current')
fgWcWtpProfileRadioStationCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioStationCapacity.setStatus('current')
fgWcWtpProfileRadioChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 20), FgWcWtpChannelWidthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioChannelWidth.setStatus('current')
fgWcWtpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3), )
if mibBuilder.loadTexts: fgWcWtpConfigTable.setStatus('current')
fgWcWtpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpConfigWtpId"))
if mibBuilder.loadTexts: fgWcWtpConfigEntry.setStatus('current')
fgWcWtpConfigWtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpConfigWtpId.setStatus('current')
fgWcWtpConfigWtpAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("other", 0), ("discovered", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigWtpAdmin.setStatus('current')
fgWcWtpConfigWtpName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigWtpName.setStatus('current')
fgWcWtpConfigWtpLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigWtpLocation.setStatus('current')
fgWcWtpConfigWtpProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigWtpProfile.setStatus('current')
fgWcWtpConfigRadioEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 6), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioEnable.setStatus('current')
fgWcWtpConfigRadioAutoTxPowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 7), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioAutoTxPowerControl.setStatus('current')
fgWcWtpConfigRadioAutoTxPowerLow = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioAutoTxPowerLow.setStatus('current')
fgWcWtpConfigRadioAutoTxPowerHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioAutoTxPowerHigh.setStatus('current')
fgWcWtpConfigRadioTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioTxPowerLevel.setStatus('current')
fgWcWtpConfigRadioBand = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 11), FgWcWtpRadioBandType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioBand.setStatus('current')
fgWcWtpConfigRadioApScan = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 12), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioApScan.setStatus('current')
fgWcWtpConfigVapAll = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 13), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigVapAll.setStatus('current')
fgWcWtpConfigVaps = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigVaps.setStatus('current')
fgWcWtpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4), )
if mibBuilder.loadTexts: fgWcWtpSessionTable.setStatus('current')
fgWcWtpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpId"))
if mibBuilder.loadTexts: fgWcWtpSessionEntry.setStatus('current')
fgWcWtpSessionWtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpSessionWtpId.setStatus('current')
fgWcWtpSessionWtpIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpIpAddressType.setStatus('current')
fgWcWtpSessionWtpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpIpAddress.setStatus('current')
fgWcWtpSessionWtpLocalIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpLocalIpAddressType.setStatus('current')
fgWcWtpSessionWtpLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpLocalIpAddress.setStatus('current')
fgWcWtpSessionWtpBaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 6), PhysAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(6, 6), ValueSizeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpBaseMacAddress.setStatus('current')
fgWcWtpSessionConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 0), ("offLine", 1), ("onLine", 2), ("downloadingImage", 3), ("connectedImage", 4), ("standby", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionConnectionState.setStatus('current')
fgWcWtpSessionWtpUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpUpTime.setStatus('current')
fgWcWtpSessionWtpDaemonUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpDaemonUpTime.setStatus('current')
fgWcWtpSessionWtpSessionUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpSessionUpTime.setStatus('current')
fgWcWtpSessionWtpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpProfileName.setStatus('current')
fgWcWtpSessionWtpModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpModelNumber.setStatus('current')
fgWcWtpSessionWtpHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpHwVersion.setStatus('current')
fgWcWtpSessionWtpSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpSwVersion.setStatus('current')
fgWcWtpSessionWtpBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpBootVersion.setStatus('current')
fgWcWtpSessionWtpRegionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpRegionCode.setStatus('current')
fgWcWtpSessionWtpStationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpStationCount.setStatus('current')
fgWcWtpSessionWtpByteRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpByteRxCount.setStatus('current')
fgWcWtpSessionWtpByteTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpByteTxCount.setStatus('current')
fgWcWtpSessionWtpCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 20), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpCpuUsage.setStatus('current')
fgWcWtpSessionWtpMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 21), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpMemoryUsage.setStatus('current')
fgWcWtpSessionWtpMemoryCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpMemoryCapacity.setStatus('current')
fgWcWtpSessionRadioTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5), )
if mibBuilder.loadTexts: fgWcWtpSessionRadioTable.setStatus('current')
fgWcWtpSessionRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioWtpId"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioRadioId"))
if mibBuilder.loadTexts: fgWcWtpSessionRadioEntry.setStatus('current')
fgWcWtpSessionRadioWtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpSessionRadioWtpId.setStatus('current')
fgWcWtpSessionRadioRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 2), FgWcWtpRadioId())
if mibBuilder.loadTexts: fgWcWtpSessionRadioRadioId.setStatus('current')
fgWcWtpSessionRadioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 3), FgWcWtpRadioMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioMode.setStatus('current')
fgWcWtpSessionRadioBaseBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 4), PhysAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(6, 6), ValueSizeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioBaseBssid.setStatus('current')
fgWcWtpSessionRadioCountryString = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 5), FgWcCountryString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioCountryString.setStatus('current')
fgWcWtpSessionRadioCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioCountryCode.setStatus('current')
fgWcWtpSessionRadioOperatingChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 7), FgWcWtpRadioChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioOperatingChannel.setStatus('current')
fgWcWtpSessionRadioOperatingPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioOperatingPower.setStatus('current')
fgWcWtpSessionRadioStationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioStationCount.setStatus('current')
fgWcWtpSessionVapTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6), )
if mibBuilder.loadTexts: fgWcWtpSessionVapTable.setStatus('current')
fgWcWtpSessionVapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapWtpId"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapRadioId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fgWcWtpSessionVapEntry.setStatus('current')
fgWcWtpSessionVapWtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpSessionVapWtpId.setStatus('current')
fgWcWtpSessionVapRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 2), FgWcWtpRadioId())
if mibBuilder.loadTexts: fgWcWtpSessionVapRadioId.setStatus('current')
fgWcWtpSessionVapSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionVapSsid.setStatus('current')
fgWcWtpSessionVapStationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionVapStationCount.setStatus('current')
fgWcWtpSessionVapByteRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionVapByteRxCount.setStatus('current')
fgWcWtpSessionVapByteTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionVapByteTxCount.setStatus('current')
fgWcStaTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5), )
if mibBuilder.loadTexts: fgWcStaTable.setStatus('current')
fgWcStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "IF-MIB", "ifIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcStaMacAddress"))
if mibBuilder.loadTexts: fgWcStaEntry.setStatus('current')
fgWcStaMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 1), PhysAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(6, 6), ValueSizeConstraint(8, 8), )))
if mibBuilder.loadTexts: fgWcStaMacAddress.setStatus('current')
fgWcStaWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaWlan.setStatus('current')
fgWcStaWtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaWtpId.setStatus('current')
fgWcStaRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 4), FgWcWtpRadioId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaRadioId.setStatus('current')
fgWcStaVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaVlanId.setStatus('current')
fgWcStaIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaIpAddressType.setStatus('current')
fgWcStaIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaIpAddress.setStatus('current')
fgWcStaVci = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaVci.setStatus('current')
fgWcStaHost = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaHost.setStatus('current')
fgWcStaUser = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaUser.setStatus('current')
fgWcStaGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaGroup.setStatus('current')
fgWcStaSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaSignal.setStatus('current')
fgWcStaNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaNoise.setStatus('current')
fgWcStaIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaIdle.setStatus('current')
fgWcStaBandwidthTx = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaBandwidthTx.setStatus('current')
fgWcStaBandwidthRx = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaBandwidthRx.setStatus('current')
fgWcStaChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 17), FgWcWtpRadioChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaChannel.setStatus('current')
fgWcStaRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 18), FgWcWtpRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaRadioType.setStatus('current')
fgWcStaSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 19), FgWcWlanSecurityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaSecurity.setStatus('current')
fgWcStaEncrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 20), FgWcWlanEncryptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaEncrypt.setStatus('current')
fgWcStaOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaOnline.setStatus('current')
fgFc = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 15))
fgFcTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 15, 1))
fgFcSwVdom = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 15, 1, 1), FgVdIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgFcSwVdom.setStatus('current')
fgFcSwSerial = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgFcSwSerial.setStatus('current')
fgFcSwName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 15, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgFcSwName.setStatus('current')
fgServerLoadBalance = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 16))
fgServerLoadBalanceTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 16, 1))
fgServerLoadBalanceRealServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 16, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgServerLoadBalanceRealServerAddress.setStatus('current')
fgServerLoadBalanceVirtualServerName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgServerLoadBalanceVirtualServerName.setStatus('current')
fgServerLoadBalanceRealServerAddress6 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 16, 1, 3), Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgServerLoadBalanceRealServerAddress6.setStatus('current')
fgUsbModemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 17))
fgUsbModemInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1))
fgUsbModemSignalStrength = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemSignalStrength.setStatus('current')
fgUsbModemStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnected", 0), ("connected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemStatus.setStatus('current')
fgUsbModemSimState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("valid", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemSimState.setStatus('current')
fgUsbModemVendor = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemVendor.setStatus('current')
fgUsbModemProduct = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemProduct.setStatus('current')
fgUsbModemNetwork = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("network3G", 0), ("networkLTE", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemNetwork.setStatus('current')
fgUsbModemId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemId.setStatus('current')
fgUsbModemSimId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemSimId.setStatus('current')
fgDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 18))
fgDeviceTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 18, 1))
fgDeviceMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 18, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgDeviceMacAddress.setStatus('current')
fgDeviceCreated = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 18, 1, 2), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgDeviceCreated.setStatus('current')
fgDeviceLastSeen = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 18, 1, 3), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgDeviceLastSeen.setStatus('current')
fgInternalLTEModemsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 19))
fgMdmInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1), )
if mibBuilder.loadTexts: fgMdmInfoTable.setStatus('current')
fgMdmInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgMdmEntIndex"))
if mibBuilder.loadTexts: fgMdmInfoEntry.setStatus('current')
fgMdmEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgMdmEntIndex.setStatus('current')
fgMdmDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmDetected.setStatus('current')
fgMdmVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmVendor.setStatus('current')
fgMdmModel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmModel.setStatus('current')
fgMdmRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmRevision.setStatus('current')
fgMdmMsisdn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmMsisdn.setStatus('current')
fgMdmEsn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmEsn.setStatus('current')
fgMdmImei = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmImei.setStatus('current')
fgMdmHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmHwRevision.setStatus('current')
fgMdmMeid = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmMeid.setStatus('current')
fgMdmSwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmSwRev.setStatus('current')
fgMdmSku = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmSku.setStatus('current')
fgMdmFsn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmFsn.setStatus('current')
fgMdmPrlVer = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmPrlVer.setStatus('current')
fgMdmFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmFwVer.setStatus('current')
fgMdmPriFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmPriFwVer.setStatus('current')
fgMdmCarrierAbbr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmCarrierAbbr.setStatus('current')
fgMdmActState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("notActivated", 0), ("activated", 1), ("connecting", 2), ("connected", 3), ("otaspAuthenticated", 4), ("otaspNamDownloaded", 5), ("otaspMdnDownloaded", 6), ("otaspImsiDownloaded", 7), ("otaspPrlDownloaded", 8), ("otaspSpcDownloaded", 9), ("otaspSettingsCmted", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmActState.setStatus('current')
fgMdmOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("online", 0), ("lowPower", 1), ("factoryTest", 2), ("offLine", 3), ("reset", 4), ("shuttingDown", 5), ("persistentLowPower", 6), ("modeOnlyLowPower", 7), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmOpMode.setStatus('current')
fgMdmLacTac = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmLacTac.setStatus('current')
fgMdmActBand = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmActBand.setStatus('current')
fgMdmCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmCellId.setStatus('current')
fgMdmRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMdmRssi.setStatus('current')
fgSimInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 19, 2), )
if mibBuilder.loadTexts: fgSimInfoTable.setStatus('current')
fgSimInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 19, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgSimEntIndex"))
if mibBuilder.loadTexts: fgSimInfoEntry.setStatus('current')
fgSimEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgSimEntIndex.setStatus('current')
fgSimMdmEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 2, 1, 2), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSimMdmEntIndex.setStatus('current')
fgSimState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("initialized", 0), ("lockedOrFailed", 1), ("notPresent", 2), ("reserved", 3), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSimState.setStatus('current')
fgSimIccid = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSimIccid.setStatus('current')
fgSimImsi = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSimImsi.setStatus('current')
fgSimCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSimCountry.setStatus('current')
fgSimNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSimNetwork.setStatus('current')
fgSignalInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 19, 3), )
if mibBuilder.loadTexts: fgSignalInfoTable.setStatus('current')
fgSignalInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 19, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgSigMdmEntIndex"))
if mibBuilder.loadTexts: fgSignalInfoEntry.setStatus('current')
fgSigMdmEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 3, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgSigMdmEntIndex.setStatus('current')
fgCdmaRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgCdmaRssi.setStatus('current')
fgCdmaEcio = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-65536, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgCdmaEcio.setStatus('current')
fgHdrRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHdrRssi.setStatus('current')
fgHdrEcio = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-65536, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHdrEcio.setStatus('current')
fgHdrSinr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHdrSinr.setStatus('current')
fgHdrIo = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHdrIo.setStatus('current')
fgGsm = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgGsm.setStatus('current')
fgWcdmaRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcdmaRssi.setStatus('current')
fgWcdmaEcio = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-65536, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcdmaEcio.setStatus('current')
fgLteRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLteRssi.setStatus('current')
fgLteRsrq = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLteRsrq.setStatus('current')
fgLteRsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-65536, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLteRsrp.setStatus('current')
fgLteSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-65536, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLteSnr.setStatus('current')
fgTdma = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgTdma.setStatus('current')
fgTrafficInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 19, 4), )
if mibBuilder.loadTexts: fgTrafficInfoTable.setStatus('current')
fgTrafficInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 19, 4, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgTrafMdmEntIndex"))
if mibBuilder.loadTexts: fgTrafficInfoEntry.setStatus('current')
fgTrafMdmEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 4, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgTrafMdmEntIndex.setStatus('current')
fgTxPacksOK = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgTxPacksOK.setStatus('current')
fgRxPacksOK = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgRxPacksOK.setStatus('current')
fgTxPacksErr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgTxPacksErr.setStatus('current')
fgRxPacksErr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgRxPacksErr.setStatus('current')
fgTxPacksOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgTxPacksOverflow.setStatus('current')
fgRxPacksOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgRxPacksOverflow.setStatus('current')
fgTxBytesOK = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgTxBytesOK.setStatus('current')
fgRxBytesOK = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgRxBytesOK.setStatus('current')
fgLastCallTxBytesOK = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLastCallTxBytesOK.setStatus('current')
fgLastCallRxBytesOK = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLastCallRxBytesOK.setStatus('current')
fgTxPacksDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgTxPacksDrop.setStatus('current')
fgRxPacksDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgRxPacksDrop.setStatus('current')
fgSessInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5), )
if mibBuilder.loadTexts: fgSessInfoTable.setStatus('current')
fgSessInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgLteSessEntIndex"))
if mibBuilder.loadTexts: fgSessInfoEntry.setStatus('current')
fgLteSessEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgLteSessEntIndex.setStatus('current')
fgSessMdmEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 2), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSessMdmEntIndex.setStatus('current')
fdLteIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteIfName.setStatus('current')
fdLteSessConnStat = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("disconnected", 1), ("connected", 2), ("suspended", 3), ("authenticating", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteSessConnStat.setStatus('current')
fdLteProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteProfId.setStatus('current')
fdLteProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteProfName.setStatus('current')
fdLteProfType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("lpt3gpp", 0), ("lpt3gpp2", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteProfType.setStatus('current')
fdLtePdpType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ipv4", 0), ("ppp", 1), ("ipv6", 2), ("ipv4v6", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLtePdpType.setStatus('current')
fdLteProfApn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteProfApn.setStatus('current')
fdLteProfIpFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 8))).clone(namedValues=NamedValues(("ipv4", 4), ("ipv6", 6), ("unspecified", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteProfIpFamily.setStatus('current')
fdLteIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteIpv4Addr.setStatus('current')
fdLteIpv4GwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteIpv4GwAddr.setStatus('current')
fdLteIpv4NetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteIpv4NetMask.setStatus('current')
fdLteIpv4PriDns = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteIpv4PriDns.setStatus('current')
fdLteIpv4SecDns = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteIpv4SecDns.setStatus('current')
fdLteIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 16), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteIpv6Addr.setStatus('current')
fdLteIpv6PrefLen = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteIpv6PrefLen.setStatus('current')
fdLteIpv6GwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 18), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteIpv6GwAddr.setStatus('current')
fdLteIpv6GwPrefLen = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteIpv6GwPrefLen.setStatus('current')
fdLteIpv6PriDns = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 20), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteIpv6PriDns.setStatus('current')
fdLteIpv6SecDns = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 21), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteIpv6SecDns.setStatus('current')
fdLteMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteMtu.setStatus('current')
fdLteAutoConn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("paused", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteAutoConn.setStatus('current')
fdLteNetType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("unknown", -1), ("cdma1x", 1), ("evdo", 2), ("gsm", 3), ("umts", 4), ("evdoReva", 5), ("edge", 6), ("hsdpa", 7), ("hsupa", 8), ("hsdpaHsupa", 9), ("lte", 10), ("ehrpd", 11), ("hsdpaPlus", 12), ("hsdpaPlusHsupa", 13), ("dchsdpaPlus", 14), ("dchspdaPlusHsupa", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteNetType.setStatus('current')
fdLteNetTypeLas = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("unknown", -1), ("cdma1x", 1), ("evdo", 2), ("gsm", 3), ("umts", 4), ("evdoReva", 5), ("edge", 6), ("hsdpa", 7), ("hsupa", 8), ("hsdpaHsupa", 9), ("lte", 10), ("ehrpd", 11), ("hsdpaPlus", 12), ("hsdpaPlusHsupa", 13), ("dchsdpaPlus", 14), ("dchspdaPlusHsupa", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteNetTypeLas.setStatus('current')
fdLteLinkProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 5, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("ieee8023", 1), ("rawIp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdLteLinkProto.setStatus('current')
fgGpsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 19, 6), )
if mibBuilder.loadTexts: fgGpsInfoTable.setStatus('current')
fgGpsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 19, 6, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgGpsMdmEntIndex"))
if mibBuilder.loadTexts: fgGpsInfoEntry.setStatus('current')
fgGpsMdmEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 6, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgGpsMdmEntIndex.setStatus('current')
fgGpsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgGpsEnabled.setStatus('current')
fgLatitude = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLatitude.setStatus('current')
fgLongitude = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLongitude.setStatus('current')
fgUtcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUtcTime.setStatus('current')
fgLocalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLocalTime.setStatus('current')
fgDatausageInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 19, 7), )
if mibBuilder.loadTexts: fgDatausageInfoTable.setStatus('current')
fgDatausageInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 19, 7, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgDatausageMdmEntIndex"))
if mibBuilder.loadTexts: fgDatausageInfoEntry.setStatus('current')
fgDatausageMdmEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 7, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgDatausageMdmEntIndex.setStatus('current')
fgDatausageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDatausageEnabled.setStatus('current')
fgDataOut = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDataOut.setStatus('current')
fgDataIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 19, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDataIn.setStatus('current')
fgNPU = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 20))
class FgNPUIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

fgNPUInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 20, 1))
fgNPUNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgNPUNumber.setStatus('current')
fgNPUName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 20, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgNPUName.setStatus('current')
fgNPUDrvDriftSum = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgNPUDrvDriftSum.setStatus('current')
fgNPUTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 20, 2))
fgNPUTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 20, 2, 1), )
if mibBuilder.loadTexts: fgNPUTable.setStatus('current')
fgNPUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 20, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgNPUEntIndex"))
if mibBuilder.loadTexts: fgNPUEntry.setStatus('current')
fgNPUEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 20, 2, 1, 1, 1), FgNPUIndex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: fgNPUEntIndex.setStatus('current')
fgNPUSessionTblSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 20, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgNPUSessionTblSize.setStatus('current')
fgNPUSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 20, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgNPUSessionCount.setStatus('current')
fgNPUDrvDrift = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 20, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgNPUDrvDrift.setStatus('current')
fgLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 21))
class FgLogDeviceIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

fgLogInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 21, 1))
fgLogDeviceNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLogDeviceNumber.setStatus('current')
fgLogDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 21, 2))
fgLogDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 21, 2, 1), )
if mibBuilder.loadTexts: fgLogDeviceTable.setStatus('current')
fgLogDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 21, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgLogDeviceEntryIndex"))
if mibBuilder.loadTexts: fgLogDeviceEntry.setStatus('current')
fgLogDeviceEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 21, 2, 1, 1, 1), FgLogDeviceIndex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: fgLogDeviceEntryIndex.setStatus('current')
fgLogDeviceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 21, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: fgLogDeviceEnabled.setStatus('current')
fgLogDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 21, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLogDeviceName.setStatus('current')
fgLogDeviceSentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 21, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLogDeviceSentCount.setStatus('current')
fgLogDeviceRelayedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 21, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLogDeviceRelayedCount.setStatus('current')
fgLogDeviceCachedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 21, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLogDeviceCachedCount.setStatus('current')
fgLogDeviceFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 21, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLogDeviceFailedCount.setStatus('current')
fgLogDeviceDroppedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 21, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLogDeviceDroppedCount.setStatus('current')
fgConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 22))
fgConfigStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 22, 1))
fgConfigSerial = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 22, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgConfigSerial.setStatus('current')
fgConfigChecksum = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 22, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgConfigChecksum.setStatus('current')
fgConfigLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 22, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgConfigLastChangeTime.setStatus('current')
fgDhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 23))
fgDhcpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 23, 1))
fgDhcpServerNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDhcpServerNumber.setStatus('current')
fgDhcpTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 23, 2))
fgDhcpTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 23, 2, 1), )
if mibBuilder.loadTexts: fgDhcpTable.setStatus('current')
fgDhcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 23, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgDhcpEntry.setStatus('current')
fgDhcpLeaseUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 23, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgDhcpLeaseUsage.setStatus('current')
fgDhcpTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 23, 3))
fgDhcpTrapType = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 23, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("runOutOfIPPool", 1), ("conflictIP", 2), ("receivedNAK", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgDhcpTrapType.setStatus('current')
fgDhcpTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 23, 3, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgDhcpTrapMessage.setStatus('current')
fgDhcpServerId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 23, 3, 3), FnIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgDhcpServerId.setStatus('current')
fgSw = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 24))
fgSwDeviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 24, 1))
fgSwDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 24, 1, 1), )
if mibBuilder.loadTexts: fgSwDeviceTable.setStatus('current')
fgSwDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 24, 1, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgSwDevicePlatform"), (0, "FORTINET-FORTIGATE-MIB", "fgSwDeviceId"))
if mibBuilder.loadTexts: fgSwDeviceEntry.setStatus('current')
fgSwDevicePlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 1, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgSwDevicePlatform.setStatus('current')
fgSwDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 1, 1, 1, 2), FnIndex())
if mibBuilder.loadTexts: fgSwDeviceId.setStatus('current')
fgSwDeviceSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwDeviceSerialNum.setStatus('current')
fgSwDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwDeviceName.setStatus('current')
fgSwDeviceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwDeviceVersion.setStatus('current')
fgSwDeviceAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("discovered", 0), ("disabled", 1), ("authorized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwDeviceAuthorized.setStatus('current')
fgSwDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwDeviceStatus.setStatus('current')
fgSwDeviceJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 1, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwDeviceJoinTime.setStatus('current')
fgSwDeviceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 1, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwDeviceIp.setStatus('current')
fgSwDeviceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwDeviceFlag.setStatus('current')
fgSwCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwCpu.setStatus('current')
fgSwMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwMemory.setStatus('current')
fgSwDeviceIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 1, 1, 1, 13), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwDeviceIpv6.setStatus('current')
fgSwPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 24, 2))
fgSwPortTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 24, 2, 1), )
if mibBuilder.loadTexts: fgSwPortTable.setStatus('current')
fgSwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 24, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgSwPortSwitchPlatform"), (0, "FORTINET-FORTIGATE-MIB", "fgSwPortSwitchId"), (0, "FORTINET-FORTIGATE-MIB", "fgSwPortNum"))
if mibBuilder.loadTexts: fgSwPortEntry.setStatus('current')
fgSwPortSwitchPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 2, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgSwPortSwitchPlatform.setStatus('current')
fgSwPortSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 2, 1, 1, 2), FnIndex())
if mibBuilder.loadTexts: fgSwPortSwitchId.setStatus('current')
fgSwPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 2, 1, 1, 3), FnIndex())
if mibBuilder.loadTexts: fgSwPortNum.setStatus('current')
fgSwPortSwitchSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwPortSwitchSerialNum.setStatus('current')
fgSwPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwPortName.setStatus('current')
fgSwPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwPortStatus.setStatus('current')
fgSwPortSpeedDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwPortSpeedDuplex.setStatus('current')
fgSwPortNativeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwPortNativeVlan.setStatus('current')
fgSwPortAllowedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwPortAllowedVlan.setStatus('current')
fgSwPortUntaggedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwPortUntaggedVlan.setStatus('current')
fgSwPortPOE = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notcapable", 0), ("capable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwPortPOE.setStatus('current')
fgSwPortPOEStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwPortPOEStatus.setStatus('current')
fgSwPortPOEState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 2, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwPortPOEState.setStatus('current')
fgSwPortPOEPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 24, 2, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSwPortPOEPower.setStatus('current')
fgChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 25))
fgChassisInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 25, 1))
fgChassisVersion = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 25, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgChassisVersion.setStatus('current')
fgChassisTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 25, 2))
fgChassisSlotId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 25, 2, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgChassisSlotId.setStatus('current')
fgChassisTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 25, 2, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgChassisTrapMessage.setStatus('current')
fgServiceGroupWorkerBlades = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 26))
fgSgWbTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1))
fgSgWorkerBladeTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1), )
if mibBuilder.loadTexts: fgSgWorkerBladeTable.setStatus('current')
fgSgWorkerBladeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgSgWbEntIndex"))
if mibBuilder.loadTexts: fgSgWorkerBladeEntry.setStatus('current')
fgSgWbEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1, 1, 1), FgSgWorkerBladeIndex())
if mibBuilder.loadTexts: fgSgWbEntIndex.setStatus('current')
fgSgWbServiceGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSgWbServiceGroupID.setStatus('current')
fgSgWbChassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSgWbChassisID.setStatus('current')
fgSgWbSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSgWbSlotID.setStatus('current')
fgSgWbState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1, 1, 5), FgSgWorkerBladeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSgWbState.setStatus('current')
fgSgWbStatusMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSgWbStatusMsg.setStatus('current')
fgSgWbMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSgWbMaster.setStatus('current')
fgSgWbSysVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSgWbSysVersion.setStatus('current')
fgSgWbSysSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSgWbSysSerial.setStatus('current')
fgSgWbSysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSgWbSysUpTime.setStatus('current')
fgSgWbSysCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSgWbSysCpuUsage.setStatus('current')
fgSgWbSysMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSgWbSysMemUsage.setStatus('current')
fgSgWbBaseLink = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSgWbBaseLink.setStatus('current')
fgSgWbFabricLink = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSgWbFabricLink.setStatus('current')
fgSgWbDataHb = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSgWbDataHb.setStatus('current')
fgSgWbMgmtHb = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 26, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSgWbMgmtHb.setStatus('current')
fgMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 100))
fgTrapVpnTunUp = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 301)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapLocalGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapRemoteGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapPhase1Name"))
if mibBuilder.loadTexts: fgTrapVpnTunUp.setStatus('current')
fgTrapVpnTunDown = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 302)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapLocalGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapRemoteGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapPhase1Name"))
if mibBuilder.loadTexts: fgTrapVpnTunDown.setStatus('current')
fgTrapHaSwitch = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 401)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapHaSwitch.setStatus('current')
fgTrapHaStateChange = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 402)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgTrapHaStateChange.setStatus('deprecated')
fgTrapHaHBFail = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 403)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgTrapHaHBFail.setStatus('current')
fgTrapHaMemberDown = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 404)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgTrapHaMemberDown.setStatus('current')
fgTrapHaMemberUp = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 405)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgTrapHaMemberUp.setStatus('current')
fgTrapIpsSignature = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 503)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigId"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSrcIp"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigMsg"))
if mibBuilder.loadTexts: fgTrapIpsSignature.setStatus('current')
fgTrapIpsAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 504)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigId"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSrcIp"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigMsg"))
if mibBuilder.loadTexts: fgTrapIpsAnomaly.setStatus('current')
fgTrapIpsPkgUpdate = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 505)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapIpsPkgUpdate.setStatus('current')
fgTrapIpsFailOpen = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 506)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapIpsFailOpen.setStatus('current')
fgTrapAvVirus = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 601)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgAvTrapVirName"))
if mibBuilder.loadTexts: fgTrapAvVirus.setStatus('current')
fgTrapAvOversize = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 602)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvOversize.setStatus('current')
fgTrapAvPattern = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 603)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvPattern.setStatus('current')
fgTrapAvFragmented = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 604)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvFragmented.setStatus('current')
fgTrapAvEnterConserve = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 605)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvEnterConserve.setStatus('current')
fgTrapAvBypass = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 606)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvBypass.setStatus('current')
fgTrapAvOversizePass = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 607)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvOversizePass.setStatus('current')
fgTrapAvOversizeBlock = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 608)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvOversizeBlock.setStatus('current')
fgTrapFazDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 701)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgTrapFazDisconnect.setStatus('current')
fgTrapFaz = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 702)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgFazTrapType"))
if mibBuilder.loadTexts: fgTrapFaz.setStatus('current')
fgTrapWcApUp = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 801)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgWcApVdom"), ("FORTINET-FORTIGATE-MIB", "fgWcApSerial"), ("FORTINET-FORTIGATE-MIB", "fgWcApName"))
if mibBuilder.loadTexts: fgTrapWcApUp.setStatus('current')
fgTrapWcApDown = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 802)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgWcApVdom"), ("FORTINET-FORTIGATE-MIB", "fgWcApSerial"), ("FORTINET-FORTIGATE-MIB", "fgWcApName"))
if mibBuilder.loadTexts: fgTrapWcApDown.setStatus('current')
fgTrapFcSwUp = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 901)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgFcSwVdom"), ("FORTINET-FORTIGATE-MIB", "fgFcSwSerial"), ("FORTINET-FORTIGATE-MIB", "fgFcSwName"))
if mibBuilder.loadTexts: fgTrapFcSwUp.setStatus('current')
fgTrapFcSwDown = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 902)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgFcSwVdom"), ("FORTINET-FORTIGATE-MIB", "fgFcSwSerial"), ("FORTINET-FORTIGATE-MIB", "fgFcSwName"))
if mibBuilder.loadTexts: fgTrapFcSwDown.setStatus('current')
fgFmTrapDeployComplete = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 6, 0, 1000)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgFmTrapDeployComplete.setStatus('current')
fgFmTrapDeployInProgress = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 6, 0, 1002)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgFmTrapDeployInProgress.setStatus('current')
fgFmTrapConfChange = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 6, 0, 1003)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgFmTrapConfChange.setStatus('current')
fgFmTrapIfChange = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 6, 0, 1004)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("IF-MIB", "ifName"), ("FORTINET-FORTIGATE-MIB", "fgManIfIp"), ("FORTINET-FORTIGATE-MIB", "fgManIfMask"), ("FORTINET-FORTIGATE-MIB", "fgManIfIp6"))
if mibBuilder.loadTexts: fgFmTrapIfChange.setStatus('current')
fgTrapServerLoadBalanceRealServerDown = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 1101)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgServerLoadBalanceRealServerAddress"), ("FORTINET-FORTIGATE-MIB", "fgServerLoadBalanceVirtualServerName"), ("FORTINET-FORTIGATE-MIB", "fgServerLoadBalanceRealServerAddress6"))
if mibBuilder.loadTexts: fgTrapServerLoadBalanceRealServerDown.setStatus('current')
fgTrapPerCpuHigh = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 1102)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgPerCpuHighDetails"))
if mibBuilder.loadTexts: fgTrapPerCpuHigh.setStatus('current')
fgTrapDeviceNew = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 1201)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("IF-MIB", "ifIndex"), ("FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), ("FORTINET-FORTIGATE-MIB", "fgDeviceCreated"), ("FORTINET-FORTIGATE-MIB", "fgDeviceLastSeen"), ("FORTINET-FORTIGATE-MIB", "fgDeviceMacAddress"))
if mibBuilder.loadTexts: fgTrapDeviceNew.setStatus('current')
fgTrapDhcp = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 1301)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("IF-MIB", "ifName"), ("FORTINET-FORTIGATE-MIB", "fgVdEntName"), ("FORTINET-FORTIGATE-MIB", "fgDhcpServerId"), ("FORTINET-FORTIGATE-MIB", "fgDhcpTrapType"), ("FORTINET-FORTIGATE-MIB", "fgDhcpTrapMessage"))
if mibBuilder.loadTexts: fgTrapDhcp.setStatus('current')
fgTrapPoolUsage = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 1401)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgFwIppTrapType"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsName"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsGroupName"), ("FORTINET-FORTIGATE-MIB", "fgFwTrapPoolUtilization"), ("FORTINET-FORTIGATE-MIB", "fgFwIppTrapPoolProto"))
if mibBuilder.loadTexts: fgTrapPoolUsage.setStatus('current')
fgTrapSlbc = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 1501)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgChassisSlotId"), ("FORTINET-FORTIGATE-MIB", "fgChassisTrapMessage"))
if mibBuilder.loadTexts: fgTrapSlbc.setStatus('current')
fgFmTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 1)).setObjects(("FORTINET-FORTIGATE-MIB", "fgFmTrapDeployComplete"), ("FORTINET-FORTIGATE-MIB", "fgFmTrapDeployInProgress"), ("FORTINET-FORTIGATE-MIB", "fgFmTrapConfChange"), ("FORTINET-FORTIGATE-MIB", "fgFmTrapIfChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgFmTrapGroup = fgFmTrapGroup.setStatus('current')
fgFmTrapObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 2)).setObjects(("FORTINET-FORTIGATE-MIB", "fgManIfIp"), ("FORTINET-FORTIGATE-MIB", "fgManIfMask"), ("FORTINET-FORTIGATE-MIB", "fgManIfIp6"), ("FORTINET-FORTIGATE-MIB", "fgFazTrapType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgFmTrapObjectGroup = fgFmTrapObjectGroup.setStatus('current')
fgAdminObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 3)).setObjects(("FORTINET-FORTIGATE-MIB", "fgAdminIdleTimeout"), ("FORTINET-FORTIGATE-MIB", "fgAdminLcdProtection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgAdminObjectGroup = fgAdminObjectGroup.setStatus('current')
fgSystemObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 4)).setObjects(("FORTINET-FORTIGATE-MIB", "fgSysVersion"), ("FORTINET-FORTIGATE-MIB", "fgSysCpuUsage"), ("FORTINET-FORTIGATE-MIB", "fgSysMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgSysMemCapacity"), ("FORTINET-FORTIGATE-MIB", "fgSysDiskUsage"), ("FORTINET-FORTIGATE-MIB", "fgSysDiskCapacity"), ("FORTINET-FORTIGATE-MIB", "fgSysSesCount"), ("FORTINET-FORTIGATE-MIB", "fgSysLowMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgSysLowMemCapacity"), ("FORTINET-FORTIGATE-MIB", "fgSysSesRate1"), ("FORTINET-FORTIGATE-MIB", "fgSysSesRate10"), ("FORTINET-FORTIGATE-MIB", "fgSysSesRate30"), ("FORTINET-FORTIGATE-MIB", "fgSysSesRate60"), ("FORTINET-FORTIGATE-MIB", "fgSysSes6Count"), ("FORTINET-FORTIGATE-MIB", "fgSysSes6Rate1"), ("FORTINET-FORTIGATE-MIB", "fgSysSes6Rate10"), ("FORTINET-FORTIGATE-MIB", "fgSysSes6Rate30"), ("FORTINET-FORTIGATE-MIB", "fgSysSes6Rate60"), ("FORTINET-FORTIGATE-MIB", "fgSysUpTime"), ("FORTINET-FORTIGATE-MIB", "fgSysNeedLogPartitionScan"), ("FORTINET-FORTIGATE-MIB", "fgSysUpTimeDetail"), ("FORTINET-FORTIGATE-MIB", "fgSysNpuSesCount"), ("FORTINET-FORTIGATE-MIB", "fgSysNpuSesRate1"), ("FORTINET-FORTIGATE-MIB", "fgSysNpuSesRate10"), ("FORTINET-FORTIGATE-MIB", "fgSysNpuSesRate30"), ("FORTINET-FORTIGATE-MIB", "fgSysNpuSesRate60"), ("FORTINET-FORTIGATE-MIB", "fgSysNpuSes6Count"), ("FORTINET-FORTIGATE-MIB", "fgSysNpuSes6Rate1"), ("FORTINET-FORTIGATE-MIB", "fgSysNpuSes6Rate10"), ("FORTINET-FORTIGATE-MIB", "fgSysNpuSes6Rate30"), ("FORTINET-FORTIGATE-MIB", "fgSysNpuSes6Rate60"), ("FORTINET-FORTIGATE-MIB", "fgSysNeedLogPartitionScan"), ("FORTINET-FORTIGATE-MIB", "fgSysUpTimeDetail"), ("FORTINET-FORTIGATE-MIB", "fgSysRebootReason"), ("FORTINET-FORTIGATE-MIB", "fgDataCpuUsage"), ("FORTINET-FORTIGATE-MIB", "fgDataMemUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgSystemObjectGroup = fgSystemObjectGroup.setStatus('current')
fgSoftwareObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 5)).setObjects(("FORTINET-FORTIGATE-MIB", "fgSysVersionAv"), ("FORTINET-FORTIGATE-MIB", "fgSysVersionIps"), ("FORTINET-FORTIGATE-MIB", "fgSysVersionAvEt"), ("FORTINET-FORTIGATE-MIB", "fgSysVersionIpsEt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgSoftwareObjectGroup = fgSoftwareObjectGroup.setStatus('current')
fgHwSensorsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 6)).setObjects(("FORTINET-FORTIGATE-MIB", "fgHwSensorCount"), ("FORTINET-FORTIGATE-MIB", "fgHwSensorEntName"), ("FORTINET-FORTIGATE-MIB", "fgHwSensorEntValue"), ("FORTINET-FORTIGATE-MIB", "fgHwSensorEntAlarmStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgHwSensorsObjectGroup = fgHwSensorsObjectGroup.setStatus('current')
fgHighAvailabilityObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 7)).setObjects(("FORTINET-FORTIGATE-MIB", "fgHaSystemMode"), ("FORTINET-FORTIGATE-MIB", "fgHaGroupId"), ("FORTINET-FORTIGATE-MIB", "fgHaPriority"), ("FORTINET-FORTIGATE-MIB", "fgHaOverride"), ("FORTINET-FORTIGATE-MIB", "fgHaAutoSync"), ("FORTINET-FORTIGATE-MIB", "fgHaSchedule"), ("FORTINET-FORTIGATE-MIB", "fgHaGroupName"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsSerial"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsCpuUsage"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsNetUsage"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsSesCount"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsPktCount"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsByteCount"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsIdsCount"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsAvCount"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsHostname"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsSyncStatus"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsSyncDatimeSucc"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsSyncDatimeUnsucc"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsGlobalChecksum"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsPrimarySerial"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsAllChecksum"), ("FORTINET-FORTIGATE-MIB", "fgHaTrapMemberSerial"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgHighAvailabilityObjectGroup = fgHighAvailabilityObjectGroup.setStatus('current')
fgVpnObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 8)).setObjects(("FORTINET-FORTIGATE-MIB", "fgVpnDialupGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupLifetime"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupTimeout"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupSrcBegin"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupSrcEnd"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupDstAddr"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupVdom"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupInOctets"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupOutOctets"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntPhase1Name"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntPhase2Name"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntRemGwyIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntRemGwyPort"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntLocGwyIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntLocGwyPort"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorSrcBeginIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorSrcEndIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorSrcPort"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorDstBeginIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorDstEndIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorDstPort"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorProto"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntLifeSecs"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntLifeBytes"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntTimeout"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntInOctets"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntOutOctets"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntStatus"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntVdom"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslState"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsLoginUsers"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsMaxUsers"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsActiveWebSessions"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsMaxWebSessions"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsActiveTunnels"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsMaxTunnels"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelVdom"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelUserName"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelSrcIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelUpTime"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelBytesIn"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelBytesOut"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapLocalGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapRemoteGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapPhase1Name"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunnelUpCount"), ("FORTINET-FORTIGATE-MIB", "fgVpn2DialupGatewayType"), ("FORTINET-FORTIGATE-MIB", "fgVpn2DialupGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpn2DialupLifetime"), ("FORTINET-FORTIGATE-MIB", "fgVpn2DialupTimeout"), ("FORTINET-FORTIGATE-MIB", "fgVpn2DialupSrcBeginType"), ("FORTINET-FORTIGATE-MIB", "fgVpn2DialupSrcBegin"), ("FORTINET-FORTIGATE-MIB", "fgVpn2DialupSrcEndType"), ("FORTINET-FORTIGATE-MIB", "fgVpn2DialupSrcEnd"), ("FORTINET-FORTIGATE-MIB", "fgVpn2DialupDstBeginType"), ("FORTINET-FORTIGATE-MIB", "fgVpn2DialupDstBegin"), ("FORTINET-FORTIGATE-MIB", "fgVpn2DialupDstEndType"), ("FORTINET-FORTIGATE-MIB", "fgVpn2DialupDstEnd"), ("FORTINET-FORTIGATE-MIB", "fgVpn2DialupInOctets"), ("FORTINET-FORTIGATE-MIB", "fgVpn2DialupOutOctets"), ("FORTINET-FORTIGATE-MIB", "fgVpn2DialupPhase1Name"), ("FORTINET-FORTIGATE-MIB", "fgVpn2DialupVdom"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunPhase1Name"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunPhase2Name"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunRemGwyIpType"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunRemGwyIp"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunRemGwyPort"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunLocGwyIpType"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunLocGwyIp"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunLocGwyPort"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunSelSrcBeginIpType"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunSelSrcBeginIp"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunSelSrcEndIpType"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunSelSrcEndIp"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunSelDstBeginIpType"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunSelDstBeginIp"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunSelDstEndIpType"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunSelDstEndIp"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunSelSrcPort"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunSelDstPort"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunSelProto"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunLifeSecs"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunLifeBytes"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunTimeout"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunInOctets"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunOutOctets"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunStatus"), ("FORTINET-FORTIGATE-MIB", "fgVpn2TunVdom"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgVpnObjectGroup = fgVpnObjectGroup.setStatus('current')
fgFirewallObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 9)).setObjects(("FORTINET-FORTIGATE-MIB", "fgFwPolPktCount"), ("FORTINET-FORTIGATE-MIB", "fgFwPolByteCount"), ("FORTINET-FORTIGATE-MIB", "fgFwUserNumber"), ("FORTINET-FORTIGATE-MIB", "fgFwPolPktCountHc"), ("FORTINET-FORTIGATE-MIB", "fgFwPolByteCountHc"), ("FORTINET-FORTIGATE-MIB", "fgFwUserAuthTimeout"), ("FORTINET-FORTIGATE-MIB", "fgFwUserName"), ("FORTINET-FORTIGATE-MIB", "fgFwUserAuth"), ("FORTINET-FORTIGATE-MIB", "fgFwUserState"), ("FORTINET-FORTIGATE-MIB", "fgFwUserVdom"), ("FORTINET-FORTIGATE-MIB", "fgIpSessProto"), ("FORTINET-FORTIGATE-MIB", "fgIpSessFromAddr"), ("FORTINET-FORTIGATE-MIB", "fgIpSessFromPort"), ("FORTINET-FORTIGATE-MIB", "fgIpSessToAddr"), ("FORTINET-FORTIGATE-MIB", "fgIpSessToPort"), ("FORTINET-FORTIGATE-MIB", "fgIpSessExp"), ("FORTINET-FORTIGATE-MIB", "fgIpSessVdom"), ("FORTINET-FORTIGATE-MIB", "fgIpSessNumber"), ("FORTINET-FORTIGATE-MIB", "fgIp6SessNumber"), ("FORTINET-FORTIGATE-MIB", "fgFwPolLastUsed"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsName"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsType"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsTotalSessions"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsTcpSessions"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsUdpSessions"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsOtherSessions"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsTotalPBAs"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsInusePBAs"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsExpiringPBAs"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsFreePBAs"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsFlags"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsGroupName"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsBlockSize"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsPortStart"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsPortEnd"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsStartClientIP"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsEndClientIP"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsRscTCP"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsRscUDP"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsUsedRscTCP"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsUsedRscUDP"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsPercentageTCP"), ("FORTINET-FORTIGATE-MIB", "fgFwIppStatsPercentageUDP"), ("FORTINET-FORTIGATE-MIB", "fgFwIppTrapType"), ("FORTINET-FORTIGATE-MIB", "fgFwIppTrapPoolProto"), ("FORTINET-FORTIGATE-MIB", "fgFwTrapPoolUtilization"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsRequest"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsEchoRequest"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsTunnel"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsTunnelV0"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsPath"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsBearer"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsFteid"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsProfile"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsImsi"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsApn"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsApnShaper"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsTunnelLimiter"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsAdvPolicies"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsIeRemovePolicies"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsIpPolicy"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsNoipPolicy"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsIeWlEntry"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsClash"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpStatsDrop"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCForwarded"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCRejected"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped0"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped1"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped2"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped3"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped4"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped5"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped6"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped7"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped8"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped9"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped10"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped11"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped12"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped13"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped14"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped15"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped16"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped17"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped18"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped19"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped20"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped21"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped22"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsCDropped23"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsDForwarded"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsDDroppedSanity"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsDDroppedMalMsg"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsDDroppedNoState"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsDDroppedMalIe"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsDDroppedGtpInGtp"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsDDroppedSpoof"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsDDroppedIpPol"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsDDroppedMsgFilter"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsDDroppedMsgRateLimit"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsDDroppedUnknownVersion"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsBForwarded"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsBDroppedSanity"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsBDroppedMalMsg"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsBDroppedMalIe"), ("FORTINET-FORTIGATE-MIB", "fgFwGtpRtStatsBDroppedMsgFilter"), ("FORTINET-FORTIGATE-MIB", "fgFwAddrDynEmsName"), ("FORTINET-FORTIGATE-MIB", "fgFwAddrDynEmsAddresses"), ("FORTINET-FORTIGATE-MIB", "fgFwAuthIpv4UserNumber"), ("FORTINET-FORTIGATE-MIB", "fgFwAuthIpv6UserNumber"), ("FORTINET-FORTIGATE-MIB", "fgFwAuthIpv4UserVdom"), ("FORTINET-FORTIGATE-MIB", "fgFwAuthIpv4UserName"), ("FORTINET-FORTIGATE-MIB", "fgFwAuthIpv4UserType"), ("FORTINET-FORTIGATE-MIB", "fgFwAuthIpv4UserAddr"), ("FORTINET-FORTIGATE-MIB", "fgFwAuthIpv6UserVdom"), ("FORTINET-FORTIGATE-MIB", "fgFwAuthIpv6UserName"), ("FORTINET-FORTIGATE-MIB", "fgFwAuthIpv6UserType"), ("FORTINET-FORTIGATE-MIB", "fgFwAuthIpv6UserAddr"), ("FORTINET-FORTIGATE-MIB", "fgFwHsPolPktCount"), ("FORTINET-FORTIGATE-MIB", "fgFwHsPolByteCount"), ("FORTINET-FORTIGATE-MIB", "fgFwHsPolLastUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgFirewallObjectGroup = fgFirewallObjectGroup.setStatus('current')
fgAppServicesObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 10)).setObjects(("FORTINET-FORTIGATE-MIB", "fgApHTTPReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPSpamDetected"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3ReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3SpamDetected"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPSpamDetected"), ("FORTINET-FORTIGATE-MIB", "fgApNNTPReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApIMUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApIMMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApIMReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApSIPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApSIPMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApSIPClientReg"), ("FORTINET-FORTIGATE-MIB", "fgApSIPCallHandling"), ("FORTINET-FORTIGATE-MIB", "fgApSIPServices"), ("FORTINET-FORTIGATE-MIB", "fgApSIPOtherReq"), ("FORTINET-FORTIGATE-MIB", "fgAppSuNumber"), ("FORTINET-FORTIGATE-MIB", "fgAppSuFileScanned"), ("FORTINET-FORTIGATE-MIB", "fgAppVoIPConn"), ("FORTINET-FORTIGATE-MIB", "fgAppVoIPCallBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAppP2PConnBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAppP2PProtEntBytes"), ("FORTINET-FORTIGATE-MIB", "fgAppP2PProtoEntLastReset"), ("FORTINET-FORTIGATE-MIB", "fgAppIMMessages"), ("FORTINET-FORTIGATE-MIB", "fgAppIMFileTransfered"), ("FORTINET-FORTIGATE-MIB", "fgAppIMFileTxBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAppIMConnBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAppFnbamStatsTotalAuthReqs"), ("FORTINET-FORTIGATE-MIB", "fgAppFnbamStatsTotalEagainErrs"), ("FORTINET-FORTIGATE-MIB", "fgAppFnbamStatsTotalLdapFails"), ("FORTINET-FORTIGATE-MIB", "fgApFTPReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApHTTPConnections"), ("FORTINET-FORTIGATE-MIB", "fgApFTPConnections"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPConnections"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3Connections"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPConnections"), ("FORTINET-FORTIGATE-MIB", "fgApNNTPConnections"), ("FORTINET-FORTIGATE-MIB", "fgApHTTPMaxConnections"), ("FORTINET-FORTIGATE-MIB", "fgApFTPMaxConnections"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPMaxConnections"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3MaxConnections"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPMaxConnections"), ("FORTINET-FORTIGATE-MIB", "fgApNNTPMaxConnections"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgAppServicesObjectGroup = fgAppServicesObjectGroup.setStatus('current')
fgAntivirusObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 11)).setObjects(("FORTINET-FORTIGATE-MIB", "fgAvVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvHTTPVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvHTTPVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvSMTPVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvSMTPVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvPOP3VirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvPOP3VirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvIMAPVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvIMAPVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvFTPVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvFTPVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvIMVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvIMVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvNNTPVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvNNTPVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvOversizedDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvOversizedBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvMAPIVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvMAPIVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvSMBVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvSMBVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvTrapVirName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgAntivirusObjectGroup = fgAntivirusObjectGroup.setStatus('current')
fgIntrusionPrevtObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 12)).setObjects(("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigId"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSrcIp"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigMsg"), ("FORTINET-FORTIGATE-MIB", "fgIpsIntrusionsDetected"), ("FORTINET-FORTIGATE-MIB", "fgIpsIntrusionsBlocked"), ("FORTINET-FORTIGATE-MIB", "fgIpsCritSevDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsHighSevDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsMedSevDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsLowSevDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsInfoSevDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsSignatureDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsAnomalyDetections"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgIntrusionPrevtObjectGroup = fgIntrusionPrevtObjectGroup.setStatus('current')
fgWebFilterObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 13)).setObjects(("FORTINET-FORTIGATE-MIB", "fgWfHTTPBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfHTTPSBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfHTTPURLBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfHTTPSURLBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfActiveXBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfCookieBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfAppletBlocked"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPExamined"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPSExamined"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPAllowed"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPSAllowed"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPBlocked"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPSBlocked"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPLogged"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPSLogged"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPOverridden"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPSOverridden"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgWebFilterObjectGroup = fgWebFilterObjectGroup.setStatus('current')
fgVirtualDomainObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 14)).setObjects(("FORTINET-FORTIGATE-MIB", "fgVdNumber"), ("FORTINET-FORTIGATE-MIB", "fgVdMaxVdoms"), ("FORTINET-FORTIGATE-MIB", "fgVdEnabled"), ("FORTINET-FORTIGATE-MIB", "fgVdEntName"), ("FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), ("FORTINET-FORTIGATE-MIB", "fgVdEntOpMode"), ("FORTINET-FORTIGATE-MIB", "fgVdTpMgmtAddrType"), ("FORTINET-FORTIGATE-MIB", "fgVdTpMgmtAddr"), ("FORTINET-FORTIGATE-MIB", "fgVdEntCpuUsage"), ("FORTINET-FORTIGATE-MIB", "fgVdEntMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgVdEntSesCount"), ("FORTINET-FORTIGATE-MIB", "fgVdEntSesRate"), ("FORTINET-FORTIGATE-MIB", "fgVdTpMgmtMask"), ("FORTINET-FORTIGATE-MIB", "fgVdEntHaState"), ("FORTINET-FORTIGATE-MIB", "fgVdEntChecksum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgVirtualDomainObjectGroup = fgVirtualDomainObjectGroup.setStatus('current')
fgAdministrationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 15)).setObjects(("FORTINET-FORTIGATE-MIB", "fgAdminVdom"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgAdministrationObjectGroup = fgAdministrationObjectGroup.setStatus('current')
fgIntfObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 16)).setObjects(("FORTINET-FORTIGATE-MIB", "fgIntfEntVdom"), ("FORTINET-FORTIGATE-MIB", "fgIntfEntEstUpBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfEntEstDownBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfEntMeaUpBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfEntMeaDownBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfVlanName"), ("FORTINET-FORTIGATE-MIB", "fgIntfVlanID"), ("FORTINET-FORTIGATE-MIB", "fgIntfVlanPhyName"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpCount"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntVrId"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntGrpId"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntIfName"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntState"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntVrIp"), ("FORTINET-FORTIGATE-MIB", "fgIntfVlanHbCount"), ("FORTINET-FORTIGATE-MIB", "fgIntfVlanHbEntIfName"), ("FORTINET-FORTIGATE-MIB", "fgIntfVlanHbEntSerial"), ("FORTINET-FORTIGATE-MIB", "fgIntfVlanHbEntState"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgIfName"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgIfEgressSProfile"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgIfIngressSProfile"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgIfEstUpBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgIfEstDownBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgIfInBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgIfOutBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgSproName"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgSproType"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgSproDefaultClassId"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgSproClassNum"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgSentClassName"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgSentGuaranteedBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgSentMaxBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgSpolSrcaddr"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgSpolDstaddr"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgSpolSvr"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgSpolComment"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCfgSpolClassName"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcAllocatedBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcGuaranteedBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcMaxBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcCurrentBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcBytes"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcDrops"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcInAllocatedBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcInGuaranteedBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcInMaxBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcInCurrentBandwidth"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcInBytes"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcInDrops"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcQPackets"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcQBytes"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcQPDrops"), ("FORTINET-FORTIGATE-MIB", "fgIntfBcQBDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgIntfObjectGroup = fgIntfObjectGroup.setStatus('current')
fgProcessorsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 17)).setObjects(("FORTINET-FORTIGATE-MIB", "fgProcessorCount"), ("FORTINET-FORTIGATE-MIB", "fgProcessorUsage"), ("FORTINET-FORTIGATE-MIB", "fgProcessorUsage5sec"), ("FORTINET-FORTIGATE-MIB", "fgProcessorType"), ("FORTINET-FORTIGATE-MIB", "fgProcessorContainedIn"), ("FORTINET-FORTIGATE-MIB", "fgProcessorPktRxCount"), ("FORTINET-FORTIGATE-MIB", "fgProcessorPktTxCount"), ("FORTINET-FORTIGATE-MIB", "fgProcessorPktDroppedCount"), ("FORTINET-FORTIGATE-MIB", "fgProcessorUserUsage"), ("FORTINET-FORTIGATE-MIB", "fgProcessorSysUsage"), ("FORTINET-FORTIGATE-MIB", "fgProcessorPktTxDroppedCount"), ("FORTINET-FORTIGATE-MIB", "fgProcessorModuleCount"), ("FORTINET-FORTIGATE-MIB", "fgProcModType"), ("FORTINET-FORTIGATE-MIB", "fgProcModName"), ("FORTINET-FORTIGATE-MIB", "fgProcModDescr"), ("FORTINET-FORTIGATE-MIB", "fgProcModProcessorCount"), ("FORTINET-FORTIGATE-MIB", "fgProcModMemCapacity"), ("FORTINET-FORTIGATE-MIB", "fgProcModMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgPerCpuHighDetails"), ("FORTINET-FORTIGATE-MIB", "fgProcModSessionCount"), ("FORTINET-FORTIGATE-MIB", "fgProcModSACount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgProcessorsObjectGroup = fgProcessorsObjectGroup.setStatus('current')
fgNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 18)).setObjects(("FORTINET-FORTIGATE-MIB", "fgTrapVpnTunUp"), ("FORTINET-FORTIGATE-MIB", "fgTrapVpnTunDown"), ("FORTINET-FORTIGATE-MIB", "fgTrapHaSwitch"), ("FORTINET-FORTIGATE-MIB", "fgTrapHaHBFail"), ("FORTINET-FORTIGATE-MIB", "fgTrapHaMemberDown"), ("FORTINET-FORTIGATE-MIB", "fgTrapHaMemberUp"), ("FORTINET-FORTIGATE-MIB", "fgTrapIpsSignature"), ("FORTINET-FORTIGATE-MIB", "fgTrapIpsAnomaly"), ("FORTINET-FORTIGATE-MIB", "fgTrapIpsPkgUpdate"), ("FORTINET-FORTIGATE-MIB", "fgTrapIpsFailOpen"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvVirus"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvOversize"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvPattern"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvFragmented"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvEnterConserve"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvBypass"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvOversizePass"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvOversizeBlock"), ("FORTINET-FORTIGATE-MIB", "fgTrapFazDisconnect"), ("FORTINET-FORTIGATE-MIB", "fgTrapFaz"), ("FORTINET-FORTIGATE-MIB", "fgTrapWcApUp"), ("FORTINET-FORTIGATE-MIB", "fgTrapWcApDown"), ("FORTINET-FORTIGATE-MIB", "fgTrapDeviceNew"), ("FORTINET-FORTIGATE-MIB", "fgTrapPerCpuHigh"), ("FORTINET-FORTIGATE-MIB", "fgTrapDhcp"), ("FORTINET-FORTIGATE-MIB", "fgTrapPoolUsage"), ("FORTINET-FORTIGATE-MIB", "fgTrapFcSwUp"), ("FORTINET-FORTIGATE-MIB", "fgTrapFcSwDown"), ("FORTINET-FORTIGATE-MIB", "fgTrapServerLoadBalanceRealServerDown"), ("FORTINET-FORTIGATE-MIB", "fgTrapSlbc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgNotificationGroup = fgNotificationGroup.setStatus('current')
fgObsoleteNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 19)).setObjects(("FORTINET-FORTIGATE-MIB", "fgTrapHaStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgObsoleteNotificationsGroup = fgObsoleteNotificationsGroup.setStatus('deprecated')
fgExplicitProxyObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 20)).setObjects(("FORTINET-FORTIGATE-MIB", "fgExplicitProxyUpTime"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyRequests"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyUsers"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxySessions"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyVirus"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyBannedWords"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyPolicy"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyOversized"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchNest"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchSize"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchEncrypted"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchMultiPart"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchUnsupported"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchBomb"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchCorrupt"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredApplets"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredActiveX"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredJScript"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredJS"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredVBS"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredOthScript"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyBlockedDLP"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyBlockedConType"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyExaminedURLs"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyAllowedURLs"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyBlockedURLs"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyLoggedURLs"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyOverriddenURLs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgExplicitProxyObjectGroup = fgExplicitProxyObjectGroup.setStatus('current')
fgWebCacheObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 21)).setObjects(("FORTINET-FORTIGATE-MIB", "fgWebCacheUpTime"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheRAMLimit"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheRAMUsage"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheRAMHits"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheRAMMisses"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheRequests"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheBypass"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheDiskLimit"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheDiskUsage"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheDiskHits"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheDiskMisses"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheDiskFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgWebCacheObjectGroup = fgWebCacheObjectGroup.setStatus('current')
fgWanOptObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 22)).setObjects(("FORTINET-FORTIGATE-MIB", "fgMemCacheLimit"), ("FORTINET-FORTIGATE-MIB", "fgMemCacheUsage"), ("FORTINET-FORTIGATE-MIB", "fgMemCacheHits"), ("FORTINET-FORTIGATE-MIB", "fgMemCacheMisses"), ("FORTINET-FORTIGATE-MIB", "fgByteCacheRAMLimit"), ("FORTINET-FORTIGATE-MIB", "fgByteCacheRAMUsage"), ("FORTINET-FORTIGATE-MIB", "fgWanOptUpTime"), ("FORTINET-FORTIGATE-MIB", "fgWanOptReductionRate"), ("FORTINET-FORTIGATE-MIB", "fgWanOptLanTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptWanTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptLanInTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptLanOutTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptWanInTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptWanOutTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptTunnels"), ("FORTINET-FORTIGATE-MIB", "fgWanOptLANBytesIn"), ("FORTINET-FORTIGATE-MIB", "fgWanOptLANBytesOut"), ("FORTINET-FORTIGATE-MIB", "fgWanOptWANBytesIn"), ("FORTINET-FORTIGATE-MIB", "fgWanOptWANBytesOut"), ("FORTINET-FORTIGATE-MIB", "fgWanOptDiskLimit"), ("FORTINET-FORTIGATE-MIB", "fgWanOptDiskUsage"), ("FORTINET-FORTIGATE-MIB", "fgWanOptDiskHits"), ("FORTINET-FORTIGATE-MIB", "fgWanOptDiskMisses"), ("FORTINET-FORTIGATE-MIB", "fgWanOptDiskFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgWanOptObjectGroup = fgWanOptObjectGroup.setStatus('current')
fgObsoleteAppServicesObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 23)).setObjects(("FORTINET-FORTIGATE-MIB", "fgApHTTPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApHTTPMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3UpTime"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3MemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApNNTPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApNNTPMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApFTPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApFTPMemUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgObsoleteAppServicesObjectGroup = fgObsoleteAppServicesObjectGroup.setStatus('deprecated')
fgSystemAdvancedObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 24)).setObjects(("FORTINET-FORTIGATE-MIB", "fgSIAdvMemPageCache"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemCacheActive"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemCacheInactive"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemBuffer"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemEnterKerConsThrsh"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemLeaveKerConsThrsh"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemEnterProxyConsThrsh"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemLeaveProxyConsThrsh"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesEphemeralCount"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesEphemeralLimit"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesClashCount"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesExpCount"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesSyncQFCount"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesAcceptQFCount"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesNoListenerCount"), ("FORTINET-FORTIGATE-MIB", "fgLicContractCount"), ("FORTINET-FORTIGATE-MIB", "fgLicVersionCount"), ("FORTINET-FORTIGATE-MIB", "fgLicContractDesc"), ("FORTINET-FORTIGATE-MIB", "fgLicContractExpiry"), ("FORTINET-FORTIGATE-MIB", "fgLicVersionDesc"), ("FORTINET-FORTIGATE-MIB", "fgLicVersionExpiry"), ("FORTINET-FORTIGATE-MIB", "fgLicVersionNumber"), ("FORTINET-FORTIGATE-MIB", "fgLicVersionUpdTime"), ("FORTINET-FORTIGATE-MIB", "fgLicVersionUpdMethod"), ("FORTINET-FORTIGATE-MIB", "fgLicVersionTryTime"), ("FORTINET-FORTIGATE-MIB", "fgLicVersionTryResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgSystemAdvancedObjectGroup = fgSystemAdvancedObjectGroup.setStatus('current')
fgWcObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 25)).setObjects(("FORTINET-FORTIGATE-MIB", "fgWcApVdom"), ("FORTINET-FORTIGATE-MIB", "fgWcApSerial"), ("FORTINET-FORTIGATE-MIB", "fgWcApName"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoName"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoLocation"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoWtpCapacity"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoWtpManaged"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoWtpSessions"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoStationCapacity"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoStationCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanSsid"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanBroadcastSsid"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanSecurity"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanEncryption"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanAuthentication"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanRadiusServer"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanUserGroup"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanLocalBridging"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanVlanId"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanMeshBackhaul"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanStationCapacity"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanStationCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfilePlatform"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileDataChannelDtlsPolicy"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileCountryString"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioMode"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioApScan"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioWidsProfile"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioDarrp"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioFrequencyHandoff"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioApHandoff"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioBeaconInterval"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioDtimPeriod"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioBand"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioChannelBonding"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioChannel"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioAutoTxPowerControl"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioAutoTxPowerLow"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioAutoTxPowerHigh"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioTxPowerLevel"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioVaps"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioStationCapacity"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioChannelWidth"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigWtpAdmin"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigWtpName"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigWtpLocation"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigWtpProfile"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioEnable"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioAutoTxPowerControl"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioAutoTxPowerLow"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioAutoTxPowerHigh"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioTxPowerLevel"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioBand"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioApScan"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigVapAll"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigVaps"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpIpAddressType"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpIpAddress"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpLocalIpAddressType"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpLocalIpAddress"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpBaseMacAddress"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionConnectionState"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpUpTime"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpDaemonUpTime"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpSessionUpTime"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpProfileName"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpModelNumber"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpHwVersion"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpSwVersion"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpBootVersion"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpRegionCode"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpStationCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpByteRxCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpByteTxCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpCpuUsage"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpMemoryUsage"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpMemoryCapacity"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioMode"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioBaseBssid"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioCountryString"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioCountryCode"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioOperatingChannel"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioOperatingPower"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioStationCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapSsid"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapStationCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapByteRxCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapByteTxCount"), ("FORTINET-FORTIGATE-MIB", "fgWcStaWlan"), ("FORTINET-FORTIGATE-MIB", "fgWcStaWtpId"), ("FORTINET-FORTIGATE-MIB", "fgWcStaRadioId"), ("FORTINET-FORTIGATE-MIB", "fgWcStaVlanId"), ("FORTINET-FORTIGATE-MIB", "fgWcStaIpAddressType"), ("FORTINET-FORTIGATE-MIB", "fgWcStaIpAddress"), ("FORTINET-FORTIGATE-MIB", "fgWcStaVci"), ("FORTINET-FORTIGATE-MIB", "fgWcStaHost"), ("FORTINET-FORTIGATE-MIB", "fgWcStaUser"), ("FORTINET-FORTIGATE-MIB", "fgWcStaGroup"), ("FORTINET-FORTIGATE-MIB", "fgWcStaSignal"), ("FORTINET-FORTIGATE-MIB", "fgWcStaNoise"), ("FORTINET-FORTIGATE-MIB", "fgWcStaIdle"), ("FORTINET-FORTIGATE-MIB", "fgWcStaBandwidthTx"), ("FORTINET-FORTIGATE-MIB", "fgWcStaBandwidthRx"), ("FORTINET-FORTIGATE-MIB", "fgWcStaChannel"), ("FORTINET-FORTIGATE-MIB", "fgWcStaRadioType"), ("FORTINET-FORTIGATE-MIB", "fgWcStaSecurity"), ("FORTINET-FORTIGATE-MIB", "fgWcStaEncrypt"), ("FORTINET-FORTIGATE-MIB", "fgWcStaOnline"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgWcObjectGroup = fgWcObjectGroup.setStatus('current')
fgFcObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 26)).setObjects(("FORTINET-FORTIGATE-MIB", "fgFcSwVdom"), ("FORTINET-FORTIGATE-MIB", "fgFcSwSerial"), ("FORTINET-FORTIGATE-MIB", "fgFcSwName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgFcObjectGroup = fgFcObjectGroup.setStatus('current')
fgServerLoadBalanceObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 27)).setObjects(("FORTINET-FORTIGATE-MIB", "fgServerLoadBalanceRealServerAddress"), ("FORTINET-FORTIGATE-MIB", "fgServerLoadBalanceVirtualServerName"), ("FORTINET-FORTIGATE-MIB", "fgServerLoadBalanceRealServerAddress6"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgServerLoadBalanceObjectGroup = fgServerLoadBalanceObjectGroup.setStatus('current')
fgUsbportsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 28)).setObjects(("FORTINET-FORTIGATE-MIB", "fgUsbportCount"), ("FORTINET-FORTIGATE-MIB", "fgUsbportPlugged"), ("FORTINET-FORTIGATE-MIB", "fgUsbportVersion"), ("FORTINET-FORTIGATE-MIB", "fgUsbportClass"), ("FORTINET-FORTIGATE-MIB", "fgUsbportVendId"), ("FORTINET-FORTIGATE-MIB", "fgUsbportProdId"), ("FORTINET-FORTIGATE-MIB", "fgUsbportRevision"), ("FORTINET-FORTIGATE-MIB", "fgUsbportManufacturer"), ("FORTINET-FORTIGATE-MIB", "fgUsbportProduct"), ("FORTINET-FORTIGATE-MIB", "fgUsbportSerial"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgUsbportsObjectGroup = fgUsbportsObjectGroup.setStatus('current')
fgUsbModemInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 29)).setObjects(("FORTINET-FORTIGATE-MIB", "fgUsbModemSignalStrength"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemStatus"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemSimState"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemVendor"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemProduct"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemNetwork"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemId"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemSimId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgUsbModemInfoGroup = fgUsbModemInfoGroup.setStatus('current')
fgDeviceObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 30)).setObjects(("FORTINET-FORTIGATE-MIB", "fgDeviceMacAddress"), ("FORTINET-FORTIGATE-MIB", "fgDeviceCreated"), ("FORTINET-FORTIGATE-MIB", "fgDeviceLastSeen"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgDeviceObjectGroup = fgDeviceObjectGroup.setStatus('current')
fgLinkMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 31)).setObjects(("FORTINET-FORTIGATE-MIB", "fgLinkMonitorNumber"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorName"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorState"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorLatency"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorJitter"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorPacketSend"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorPacketRecv"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorPacketLoss"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorVdom"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorBandwidthIn"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorBandwidthOut"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorBandwidthBi"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorOutofSeq"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorServer"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgLinkMonitorGroup = fgLinkMonitorGroup.setStatus('current')
fgInternalModemInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 32)).setObjects(("FORTINET-FORTIGATE-MIB", "fgMdmDetected"), ("FORTINET-FORTIGATE-MIB", "fgMdmVendor"), ("FORTINET-FORTIGATE-MIB", "fgMdmModel"), ("FORTINET-FORTIGATE-MIB", "fgMdmRevision"), ("FORTINET-FORTIGATE-MIB", "fgMdmMsisdn"), ("FORTINET-FORTIGATE-MIB", "fgMdmEsn"), ("FORTINET-FORTIGATE-MIB", "fgMdmImei"), ("FORTINET-FORTIGATE-MIB", "fgMdmHwRevision"), ("FORTINET-FORTIGATE-MIB", "fgMdmMeid"), ("FORTINET-FORTIGATE-MIB", "fgMdmSwRev"), ("FORTINET-FORTIGATE-MIB", "fgMdmSku"), ("FORTINET-FORTIGATE-MIB", "fgMdmFsn"), ("FORTINET-FORTIGATE-MIB", "fgMdmPrlVer"), ("FORTINET-FORTIGATE-MIB", "fgMdmFwVer"), ("FORTINET-FORTIGATE-MIB", "fgMdmPriFwVer"), ("FORTINET-FORTIGATE-MIB", "fgMdmCarrierAbbr"), ("FORTINET-FORTIGATE-MIB", "fgMdmActState"), ("FORTINET-FORTIGATE-MIB", "fgMdmOpMode"), ("FORTINET-FORTIGATE-MIB", "fgMdmLacTac"), ("FORTINET-FORTIGATE-MIB", "fgMdmActBand"), ("FORTINET-FORTIGATE-MIB", "fgMdmCellId"), ("FORTINET-FORTIGATE-MIB", "fgMdmRssi"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgInternalModemInfoGroup = fgInternalModemInfoGroup.setStatus('current')
fgInternalModemSIMInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 33)).setObjects(("FORTINET-FORTIGATE-MIB", "fgSimMdmEntIndex"), ("FORTINET-FORTIGATE-MIB", "fgSimState"), ("FORTINET-FORTIGATE-MIB", "fgSimIccid"), ("FORTINET-FORTIGATE-MIB", "fgSimImsi"), ("FORTINET-FORTIGATE-MIB", "fgSimCountry"), ("FORTINET-FORTIGATE-MIB", "fgSimNetwork"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgInternalModemSIMInfoGroup = fgInternalModemSIMInfoGroup.setStatus('current')
fgInternalModemSigInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 34)).setObjects(("FORTINET-FORTIGATE-MIB", "fgCdmaRssi"), ("FORTINET-FORTIGATE-MIB", "fgCdmaEcio"), ("FORTINET-FORTIGATE-MIB", "fgHdrRssi"), ("FORTINET-FORTIGATE-MIB", "fgHdrEcio"), ("FORTINET-FORTIGATE-MIB", "fgHdrSinr"), ("FORTINET-FORTIGATE-MIB", "fgHdrIo"), ("FORTINET-FORTIGATE-MIB", "fgGsm"), ("FORTINET-FORTIGATE-MIB", "fgWcdmaRssi"), ("FORTINET-FORTIGATE-MIB", "fgWcdmaEcio"), ("FORTINET-FORTIGATE-MIB", "fgLteRssi"), ("FORTINET-FORTIGATE-MIB", "fgLteRsrq"), ("FORTINET-FORTIGATE-MIB", "fgLteRsrp"), ("FORTINET-FORTIGATE-MIB", "fgLteSnr"), ("FORTINET-FORTIGATE-MIB", "fgTdma"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgInternalModemSigInfoGroup = fgInternalModemSigInfoGroup.setStatus('current')
fgInternalModemTrafficInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 35)).setObjects(("FORTINET-FORTIGATE-MIB", "fgTxPacksOK"), ("FORTINET-FORTIGATE-MIB", "fgRxPacksOK"), ("FORTINET-FORTIGATE-MIB", "fgTxPacksErr"), ("FORTINET-FORTIGATE-MIB", "fgRxPacksErr"), ("FORTINET-FORTIGATE-MIB", "fgTxPacksOverflow"), ("FORTINET-FORTIGATE-MIB", "fgRxPacksOverflow"), ("FORTINET-FORTIGATE-MIB", "fgTxBytesOK"), ("FORTINET-FORTIGATE-MIB", "fgRxBytesOK"), ("FORTINET-FORTIGATE-MIB", "fgLastCallTxBytesOK"), ("FORTINET-FORTIGATE-MIB", "fgLastCallRxBytesOK"), ("FORTINET-FORTIGATE-MIB", "fgTxPacksDrop"), ("FORTINET-FORTIGATE-MIB", "fgRxPacksDrop"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgInternalModemTrafficInfoGroup = fgInternalModemTrafficInfoGroup.setStatus('current')
fgInternalModemSessInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 36)).setObjects(("FORTINET-FORTIGATE-MIB", "fgSessMdmEntIndex"), ("FORTINET-FORTIGATE-MIB", "fdLteIfName"), ("FORTINET-FORTIGATE-MIB", "fdLteSessConnStat"), ("FORTINET-FORTIGATE-MIB", "fdLteProfId"), ("FORTINET-FORTIGATE-MIB", "fdLteProfName"), ("FORTINET-FORTIGATE-MIB", "fdLteProfType"), ("FORTINET-FORTIGATE-MIB", "fdLtePdpType"), ("FORTINET-FORTIGATE-MIB", "fdLteProfApn"), ("FORTINET-FORTIGATE-MIB", "fdLteProfIpFamily"), ("FORTINET-FORTIGATE-MIB", "fdLteIpv4Addr"), ("FORTINET-FORTIGATE-MIB", "fdLteIpv4GwAddr"), ("FORTINET-FORTIGATE-MIB", "fdLteIpv4NetMask"), ("FORTINET-FORTIGATE-MIB", "fdLteIpv4PriDns"), ("FORTINET-FORTIGATE-MIB", "fdLteIpv4SecDns"), ("FORTINET-FORTIGATE-MIB", "fdLteIpv6Addr"), ("FORTINET-FORTIGATE-MIB", "fdLteIpv6PrefLen"), ("FORTINET-FORTIGATE-MIB", "fdLteIpv6GwAddr"), ("FORTINET-FORTIGATE-MIB", "fdLteIpv6GwPrefLen"), ("FORTINET-FORTIGATE-MIB", "fdLteIpv6PriDns"), ("FORTINET-FORTIGATE-MIB", "fdLteIpv6SecDns"), ("FORTINET-FORTIGATE-MIB", "fdLteMtu"), ("FORTINET-FORTIGATE-MIB", "fdLteAutoConn"), ("FORTINET-FORTIGATE-MIB", "fdLteNetType"), ("FORTINET-FORTIGATE-MIB", "fdLteNetTypeLas"), ("FORTINET-FORTIGATE-MIB", "fdLteLinkProto"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgInternalModemSessInfoGroup = fgInternalModemSessInfoGroup.setStatus('current')
fgInternalModemGpsInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 37)).setObjects(("FORTINET-FORTIGATE-MIB", "fgGpsEnabled"), ("FORTINET-FORTIGATE-MIB", "fgLatitude"), ("FORTINET-FORTIGATE-MIB", "fgLongitude"), ("FORTINET-FORTIGATE-MIB", "fgUtcTime"), ("FORTINET-FORTIGATE-MIB", "fgLocalTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgInternalModemGpsInfoGroup = fgInternalModemGpsInfoGroup.setStatus('current')
fgInternalModemDatausageInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 38)).setObjects(("FORTINET-FORTIGATE-MIB", "fgDatausageEnabled"), ("FORTINET-FORTIGATE-MIB", "fgDataOut"), ("FORTINET-FORTIGATE-MIB", "fgDataIn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgInternalModemDatausageInfoGroup = fgInternalModemDatausageInfoGroup.setStatus('current')
fgVWLHealthCheckLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 39)).setObjects(("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkNumber"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkName"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkSeq"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkState"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkLatency"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkJitter"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkPacketSend"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkPacketRecv"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkPacketLoss"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkVdom"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkBandwidthIn"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkBandwidthOut"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkBandwidthBi"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkIfName"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkUsedBandwidthIn"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkUsedBandwidthOut"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkUsedBandwidthBi"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkMOSCodec"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkMOS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgVWLHealthCheckLinkGroup = fgVWLHealthCheckLinkGroup.setStatus('current')
fgDisksObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 40)).setObjects(("FORTINET-FORTIGATE-MIB", "fgDiskCount"), ("FORTINET-FORTIGATE-MIB", "fgDiskName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgDisksObjectGroup = fgDisksObjectGroup.setStatus('current')
fgNPUGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 41)).setObjects(("FORTINET-FORTIGATE-MIB", "fgNPUNumber"), ("FORTINET-FORTIGATE-MIB", "fgNPUName"), ("FORTINET-FORTIGATE-MIB", "fgNPUDrvDriftSum"), ("FORTINET-FORTIGATE-MIB", "fgNPUSessionTblSize"), ("FORTINET-FORTIGATE-MIB", "fgNPUSessionCount"), ("FORTINET-FORTIGATE-MIB", "fgNPUDrvDrift"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgNPUGroup = fgNPUGroup.setStatus('current')
fgSlaProbeClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 42)).setObjects(("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientNumber"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientIP"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientState"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientAvgLatency"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientAvgLatencySD"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientAvgLatencyDS"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientMinLatency"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientMinLatencySD"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientMinLatencyDS"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientMaxLatency"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientMaxLatencySD"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientMaxLatencyDS"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientAvgJitter"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientAvgJitterSD"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientAvgJitterDS"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientMinJitter"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientMinJitterSD"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientMinJitterDS"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientMaxJitter"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientMaxJitterSD"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientMaxJitterDS"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientPktloss"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientPktlossSD"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientPktlossDS"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientOutofSeq"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientOutofSeqSD"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientOutofSeqDS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgSlaProbeClientGroup = fgSlaProbeClientGroup.setStatus('current')
fgDNSProxyObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 43)).setObjects(("FORTINET-FORTIGATE-MIB", "fgDNSProxyStatsUdpCacheHit"), ("FORTINET-FORTIGATE-MIB", "fgDNSProxyStatsUdpRatingCacheHit"), ("FORTINET-FORTIGATE-MIB", "fgDNSProxyStatsUdpReq"), ("FORTINET-FORTIGATE-MIB", "fgDNSProxyStatsUdpRes"), ("FORTINET-FORTIGATE-MIB", "fgDNSProxyStatsUdpFwd"), ("FORTINET-FORTIGATE-MIB", "fgDNSProxyStatsUdpRetrans"), ("FORTINET-FORTIGATE-MIB", "fgDNSProxyStatsUdpTo"), ("FORTINET-FORTIGATE-MIB", "fgDNSProxyStatsUdpFtgRes"), ("FORTINET-FORTIGATE-MIB", "fgDNSProxyStatsUdpFtgFwd"), ("FORTINET-FORTIGATE-MIB", "fgDNSProxyStatsUdpFtgRetrans"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgDNSProxyObjectGroup = fgDNSProxyObjectGroup.setStatus('current')
fgLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 44)).setObjects(("FORTINET-FORTIGATE-MIB", "fgLogDeviceNumber"), ("FORTINET-FORTIGATE-MIB", "fgLogDeviceName"), ("FORTINET-FORTIGATE-MIB", "fgLogDeviceSentCount"), ("FORTINET-FORTIGATE-MIB", "fgLogDeviceRelayedCount"), ("FORTINET-FORTIGATE-MIB", "fgLogDeviceCachedCount"), ("FORTINET-FORTIGATE-MIB", "fgLogDeviceFailedCount"), ("FORTINET-FORTIGATE-MIB", "fgLogDeviceDroppedCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgLogGroup = fgLogGroup.setStatus('current')
fgConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 45)).setObjects(("FORTINET-FORTIGATE-MIB", "fgConfigSerial"), ("FORTINET-FORTIGATE-MIB", "fgConfigChecksum"), ("FORTINET-FORTIGATE-MIB", "fgConfigLastChangeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgConfigGroup = fgConfigGroup.setStatus('current')
fgDhcpObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 46)).setObjects(("FORTINET-FORTIGATE-MIB", "fgDhcpServerNumber"), ("FORTINET-FORTIGATE-MIB", "fgDhcpLeaseUsage"), ("FORTINET-FORTIGATE-MIB", "fgDhcpServerId"), ("FORTINET-FORTIGATE-MIB", "fgDhcpTrapType"), ("FORTINET-FORTIGATE-MIB", "fgDhcpTrapMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgDhcpObjectGroup = fgDhcpObjectGroup.setStatus('current')
fgDpdkEngsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 47)).setObjects(("FORTINET-FORTIGATE-MIB", "fgDpdkEngCount"), ("FORTINET-FORTIGATE-MIB", "fgDpdkEngRxUsage"), ("FORTINET-FORTIGATE-MIB", "fgDpdkEngVnpUsage"), ("FORTINET-FORTIGATE-MIB", "fgDpdkEngIpsUsage"), ("FORTINET-FORTIGATE-MIB", "fgDpdkEngTxUsage"), ("FORTINET-FORTIGATE-MIB", "fgDpdkEngIdle"), ("FORTINET-FORTIGATE-MIB", "fgDpdkEngToCpu"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgDpdkEngsObjectGroup = fgDpdkEngsObjectGroup.setStatus('current')
fgSwitchDeviceObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 48)).setObjects(("FORTINET-FORTIGATE-MIB", "fgSwDeviceSerialNum"), ("FORTINET-FORTIGATE-MIB", "fgSwDeviceName"), ("FORTINET-FORTIGATE-MIB", "fgSwDeviceVersion"), ("FORTINET-FORTIGATE-MIB", "fgSwDeviceAuthorized"), ("FORTINET-FORTIGATE-MIB", "fgSwDeviceStatus"), ("FORTINET-FORTIGATE-MIB", "fgSwDeviceJoinTime"), ("FORTINET-FORTIGATE-MIB", "fgSwDeviceIp"), ("FORTINET-FORTIGATE-MIB", "fgSwDeviceFlag"), ("FORTINET-FORTIGATE-MIB", "fgSwCpu"), ("FORTINET-FORTIGATE-MIB", "fgSwMemory"), ("FORTINET-FORTIGATE-MIB", "fgSwDeviceIpv6"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgSwitchDeviceObjectGroup = fgSwitchDeviceObjectGroup.setStatus('current')
fgSwitchPortObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 49)).setObjects(("FORTINET-FORTIGATE-MIB", "fgSwPortSwitchSerialNum"), ("FORTINET-FORTIGATE-MIB", "fgSwPortName"), ("FORTINET-FORTIGATE-MIB", "fgSwPortStatus"), ("FORTINET-FORTIGATE-MIB", "fgSwPortSpeedDuplex"), ("FORTINET-FORTIGATE-MIB", "fgSwPortNativeVlan"), ("FORTINET-FORTIGATE-MIB", "fgSwPortAllowedVlan"), ("FORTINET-FORTIGATE-MIB", "fgSwPortUntaggedVlan"), ("FORTINET-FORTIGATE-MIB", "fgSwPortPOE"), ("FORTINET-FORTIGATE-MIB", "fgSwPortPOEStatus"), ("FORTINET-FORTIGATE-MIB", "fgSwPortPOEState"), ("FORTINET-FORTIGATE-MIB", "fgSwPortPOEPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgSwitchPortObjectGroup = fgSwitchPortObjectGroup.setStatus('current')
fgChassisObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 50)).setObjects(("FORTINET-FORTIGATE-MIB", "fgChassisVersion"), ("FORTINET-FORTIGATE-MIB", "fgChassisSlotId"), ("FORTINET-FORTIGATE-MIB", "fgChassisTrapMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgChassisObjectGroup = fgChassisObjectGroup.setStatus('current')
fgServiceGroupWorkerBladesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 51)).setObjects(("FORTINET-FORTIGATE-MIB", "fgSgWbServiceGroupID"), ("FORTINET-FORTIGATE-MIB", "fgSgWbChassisID"), ("FORTINET-FORTIGATE-MIB", "fgSgWbSlotID"), ("FORTINET-FORTIGATE-MIB", "fgSgWbState"), ("FORTINET-FORTIGATE-MIB", "fgSgWbStatusMsg"), ("FORTINET-FORTIGATE-MIB", "fgSgWbMaster"), ("FORTINET-FORTIGATE-MIB", "fgSgWbSysVersion"), ("FORTINET-FORTIGATE-MIB", "fgSgWbSysSerial"), ("FORTINET-FORTIGATE-MIB", "fgSgWbSysUpTime"), ("FORTINET-FORTIGATE-MIB", "fgSgWbSysCpuUsage"), ("FORTINET-FORTIGATE-MIB", "fgSgWbSysMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgSgWbBaseLink"), ("FORTINET-FORTIGATE-MIB", "fgSgWbFabricLink"), ("FORTINET-FORTIGATE-MIB", "fgSgWbDataHb"), ("FORTINET-FORTIGATE-MIB", "fgSgWbMgmtHb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgServiceGroupWorkerBladesGroup = fgServiceGroupWorkerBladesGroup.setStatus('current')
fgMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12356, 101, 100, 100)).setObjects(("FORTINET-FORTIGATE-MIB", "fgFmTrapGroup"), ("FORTINET-FORTIGATE-MIB", "fgNotificationGroup"), ("FORTINET-FORTIGATE-MIB", "fgFmTrapObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgAdminObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgSystemObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgSoftwareObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgHwSensorsObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgHighAvailabilityObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgVpnObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgFirewallObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgAppServicesObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgAntivirusObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgIntrusionPrevtObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgWebFilterObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgVirtualDomainObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgAdministrationObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgIntfObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgProcessorsObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgWanOptObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgSystemAdvancedObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgWcObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgFcObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgServerLoadBalanceObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgUsbportsObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemInfoGroup"), ("FORTINET-FORTIGATE-MIB", "fgDeviceObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorGroup"), ("FORTINET-FORTIGATE-MIB", "fgInternalModemInfoGroup"), ("FORTINET-FORTIGATE-MIB", "fgInternalModemSIMInfoGroup"), ("FORTINET-FORTIGATE-MIB", "fgInternalModemSigInfoGroup"), ("FORTINET-FORTIGATE-MIB", "fgInternalModemTrafficInfoGroup"), ("FORTINET-FORTIGATE-MIB", "fgInternalModemSessInfoGroup"), ("FORTINET-FORTIGATE-MIB", "fgInternalModemGpsInfoGroup"), ("FORTINET-FORTIGATE-MIB", "fgInternalModemDatausageInfoGroup"), ("FORTINET-FORTIGATE-MIB", "fgVWLHealthCheckLinkGroup"), ("FORTINET-FORTIGATE-MIB", "fgDisksObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgNPUGroup"), ("FORTINET-FORTIGATE-MIB", "fgSlaProbeClientGroup"), ("FORTINET-FORTIGATE-MIB", "fgDNSProxyObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgLogGroup"), ("FORTINET-FORTIGATE-MIB", "fgConfigGroup"), ("FORTINET-FORTIGATE-MIB", "fgDhcpObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgDpdkEngsObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgSwitchDeviceObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgSwitchPortObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgChassisObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgServiceGroupWorkerBladesGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgMIBCompliance = fgMIBCompliance.setStatus('current')
fg300MibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12356, 101, 100, 101)).setObjects(("FORTINET-FORTIGATE-MIB", "fgObsoleteNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fg300MibCompliance = fg300MibCompliance.setStatus('deprecated')
fgObsolteMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12356, 101, 100, 102)).setObjects(("FORTINET-FORTIGATE-MIB", "fgObsoleteAppServicesObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgObsolteMIBCompliance = fgObsolteMIBCompliance.setStatus('deprecated')
mibBuilder.exportSymbols("FORTINET-FORTIGATE-MIB", fgAppWebCache=fgAppWebCache, fgTxPacksOK=fgTxPacksOK, FgLogDeviceIndex=FgLogDeviceIndex, fgt51E=fgt51E, fgAvVirusBlocked=fgAvVirusBlocked, fgWcWtpSessionVapByteTxCount=fgWcWtpSessionVapByteTxCount, fgApSMTPMemUsage=fgApSMTPMemUsage, fgFwIppTables=fgFwIppTables, fgt300E=fgt300E, fgSgWbMaster=fgSgWbMaster, FgNPUIndex=FgNPUIndex, fgDiskIndex=fgDiskIndex, fgIntfBcCfgSproDefaultClassId=fgIntfBcCfgSproDefaultClassId, fgLicVersionUpdTime=fgLicVersionUpdTime, fgFwGtpRtStatsCDropped22=fgFwGtpRtStatsCDropped22, fgMdmDetected=fgMdmDetected, fgt1800F=fgt1800F, fgLinkMonitorVdom=fgLinkMonitorVdom, fgIpSessToAddr=fgIpSessToAddr, fgt80CM=fgt80CM, fgUsbModemProduct=fgUsbModemProduct, fgSgWbMgmtHb=fgSgWbMgmtHb, fgApNNTPReqProcessed=fgApNNTPReqProcessed, fgt400F=fgt400F, fgFwGtpStatsDrop=fgFwGtpStatsDrop, fgHaStatsPktCount=fgHaStatsPktCount, fgFwIppStatsBlockSize=fgFwIppStatsBlockSize, fgVpn2TunSelSrcEndIpType=fgVpn2TunSelSrcEndIpType, fgSysDiskUsage=fgSysDiskUsage, fgRxPacksOverflow=fgRxPacksOverflow, fgt20C=fgt20C, fgTrapPerCpuHigh=fgTrapPerCpuHigh, fgAppFnbam=fgAppFnbam, fgVpnSslTunnelSrcIp=fgVpnSslTunnelSrcIp, fgVdTpMgmtAddrType=fgVdTpMgmtAddrType, fgWcWtpSessionVapSsid=fgWcWtpSessionVapSsid, fgFwAuthIpv4UserName=fgFwAuthIpv4UserName, fgFwAddrDynEmsAddresses=fgFwAddrDynEmsAddresses, fgIntfBcCfgIfInBandwidth=fgIntfBcCfgIfInBandwidth, fgIntfBcCfgSentGuaranteedBandwidth=fgIntfBcCfgSentGuaranteedBandwidth, fgApplications=fgApplications, fgvm04=fgvm04, fgExplicitProxyFilteredVBS=fgExplicitProxyFilteredVBS, fgWcWtpSessionVapRadioId=fgWcWtpSessionVapRadioId, fgWcWtpSessionWtpId=fgWcWtpSessionWtpId, fgSysNpuSesRate60=fgSysNpuSesRate60, fgVpn2TunLocGwyPort=fgVpn2TunLocGwyPort, fgApNNTPMemUsage=fgApNNTPMemUsage, fgt500E=fgt500E, fgFwIppTrapType=fgFwIppTrapType, fgExplicitProxyScanStatsDisp=fgExplicitProxyScanStatsDisp, fgWfCookieBlocked=fgWfCookieBlocked, fgSlaProbeClientState=fgSlaProbeClientState, fgFwGtpStatsRequest=fgFwGtpStatsRequest, fgt3960E=fgt3960E, fgvmsb=fgvmsb, fgVpnTunEntSelectorDstEndIp=fgVpnTunEntSelectorDstEndIp, fgSgWorkerBladeEntry=fgSgWorkerBladeEntry, fdLteNetTypeLas=fdLteNetTypeLas, fgDNSProxyStatsUdpFwd=fgDNSProxyStatsUdpFwd, fgFwGtpRtStatsCDropped16=fgFwGtpRtStatsCDropped16, fgIntfBcCfgSentTable=fgIntfBcCfgSentTable, fgUsbModemNetwork=fgUsbModemNetwork, fgWcInfoWtpSessions=fgWcInfoWtpSessions, fgIpsLowSevDetections=fgIpsLowSevDetections, fgProcessorModuleTable=fgProcessorModuleTable, fgFwIppStatsUsedRscUDP=fgFwIppStatsUsedRscUDP, fgTxPacksErr=fgTxPacksErr, fgIntfEntMeaDownBandwidth=fgIntfEntMeaDownBandwidth, fgt100EF=fgt100EF, fgVpnSslTunnelBytesIn=fgVpnSslTunnelBytesIn, fgt2601F=fgt2601F, fdLteMtu=fdLteMtu, fgInternalModemDatausageInfoGroup=fgInternalModemDatausageInfoGroup, fgtVM64FGCKVM=fgtVM64FGCKVM, fgExplicitProxyVirus=fgExplicitProxyVirus, fgConfigGroup=fgConfigGroup, fgt30DPOE=fgt30DPOE, ffw3980E=ffw3980E, fgSwPortPOE=fgSwPortPOE, fgIpsCritSevDetections=fgIpsCritSevDetections, fgtARM64XEN=fgtARM64XEN, fgt140P=fgt140P, fgDpdkEngTxUsage=fgDpdkEngTxUsage, fgvm1v=fgvm1v, fgWcWtpConfigRadioAutoTxPowerHigh=fgWcWtpConfigRadioAutoTxPowerHigh, fgFwIppStatsStartClientIP=fgFwIppStatsStartClientIP, FgAdminPermLevel=FgAdminPermLevel, fgLogDeviceEntry=fgLogDeviceEntry, fgAppP2PProtoEntry=fgAppP2PProtoEntry, fgAvTables=fgAvTables, fgTrapAvOversize=fgTrapAvOversize, fgt5101C=fgt5101C, fgDhcpServerNumber=fgDhcpServerNumber, fgSoftwareObjectGroup=fgSoftwareObjectGroup, fgAppFnbamStatsTotalEagainErrs=fgAppFnbamStatsTotalEagainErrs, fgFwGtpRtStatsBDroppedMalIe=fgFwGtpRtStatsBDroppedMalIe, fgSignalInfoTable=fgSignalInfoTable, fgSwPortSpeedDuplex=fgSwPortSpeedDuplex, fgVpn2TunPhase2Name=fgVpn2TunPhase2Name, fgtARM64AZURE=fgtARM64AZURE, fgApNNTPMaxConnections=fgApNNTPMaxConnections, fgApSMTPUpTime=fgApSMTPUpTime, fgFwGtpStatsAdvPolicies=fgFwGtpStatsAdvPolicies, fgt140D=fgt140D, fgMibConformance=fgMibConformance, fgVirtualDomainObjectGroup=fgVirtualDomainObjectGroup, FgWanOptProtocols=FgWanOptProtocols, fwf60C=fwf60C, fgApSMTPReqProcessed=fgApSMTPReqProcessed, fgTrapVpnTunUp=fgTrapVpnTunUp, fgVdEntOpMode=fgVdEntOpMode, fgApFTPConnections=fgApFTPConnections, fgvmsl=fgvmsl, fgSysRebootReason=fgSysRebootReason, fgIntfBcInGuaranteedBandwidth=fgIntfBcInGuaranteedBandwidth, fgUtcTime=fgUtcTime, fgSystem=fgSystem, fgHwSensorEntName=fgHwSensorEntName, fgFwGtpRtStatsCDropped12=fgFwGtpRtStatsCDropped12, fgSysSesRate10=fgSysSesRate10, fgIntfBcInAllocatedBandwidth=fgIntfBcInAllocatedBandwidth, fgWcWtpSessionWtpUpTime=fgWcWtpSessionWtpUpTime, fgAvMAPIVirusBlocked=fgAvMAPIVirusBlocked, fgWcApName=fgWcApName, fgChassis=fgChassis, fgFwHsPolID=fgFwHsPolID, fw30EN=fw30EN, fgHaStatsTable=fgHaStatsTable, fgExplicitProxyArchCorrupt=fgExplicitProxyArchCorrupt, fwf90D=fwf90D, fgHaTables=fgHaTables, fgApPOP3MemUsage=fgApPOP3MemUsage, fgVpnTunEntIndex=fgVpnTunEntIndex, fgUsbportCount=fgUsbportCount, fgManIfMask=fgManIfMask, fgFwGtpStatsTunnelV0=fgFwGtpStatsTunnelV0, fgExplicitProxyOversized=fgExplicitProxyOversized, fgWcTrapObjects=fgWcTrapObjects, fgSgWbSysSerial=fgSgWbSysSerial, fgVpn2TunPhase2Index=fgVpn2TunPhase2Index, fgLicVersionCount=fgLicVersionCount, fgVpn=fgVpn, fgHaStatsGlobalChecksum=fgHaStatsGlobalChecksum, fgApSMTPMaxConnections=fgApSMTPMaxConnections, fgWcWtpProfileRadioChannelWidth=fgWcWtpProfileRadioChannelWidth, fgDNSProxyStatsUdpFtgFwd=fgDNSProxyStatsUdpFtgFwd, fgDhcp=fgDhcp, fgVpnSslStatsActiveWebSessions=fgVpnSslStatsActiveWebSessions, fgWcWtpSessionWtpIpAddress=fgWcWtpSessionWtpIpAddress, fgt600C=fgt600C, fgMemCacheUsage=fgMemCacheUsage, fgt300A=fgt300A, fgDeviceTrapObjects=fgDeviceTrapObjects, fgFwIppStatsEndClientIP=fgFwIppStatsEndClientIP, fgSysSes6Rate10=fgSysSes6Rate10, fgWcWlanSecurity=fgWcWlanSecurity, fwf60E=fwf60E, fgProcessorType=fgProcessorType, fgAppVoIPCallBlocked=fgAppVoIPCallBlocked, fgWcWtpSessionVapTable=fgWcWtpSessionVapTable, fgt2000E=fgt2000E, fgVWLHealthCheckLinkPacketLoss=fgVWLHealthCheckLinkPacketLoss, fgHaStatsSyncDatimeUnsucc=fgHaStatsSyncDatimeUnsucc, fgVpnTunEntSelectorSrcEndIp=fgVpnTunEntSelectorSrcEndIp, fgVpnTunEntInOctets=fgVpnTunEntInOctets, fgIntfBcCfgSproEntry=fgIntfBcCfgSproEntry, fgVpnDialupInOctets=fgVpnDialupInOctets, fgWcWtpSessionRadioTable=fgWcWtpSessionRadioTable, fgIntfBcDrops=fgIntfBcDrops, fgLogDeviceDroppedCount=fgLogDeviceDroppedCount, fgMIBCompliance=fgMIBCompliance, fgFwIppStatsTcpSessions=fgFwIppStatsTcpSessions, fgWcWlanRadiusServer=fgWcWlanRadiusServer, fgLicVersionExpiry=fgLicVersionExpiry, fgHaStatsHostname=fgHaStatsHostname, fgIntfVlanHbEntIfName=fgIntfVlanHbEntIfName, fgSwMemory=fgSwMemory, fg60EC=fg60EC, fgLogDeviceCachedCount=fgLogDeviceCachedCount, fgFwGtpRtStatsCDropped1=fgFwGtpRtStatsCDropped1, fgtVM64AZURE=fgtVM64AZURE, fgt5001A=fgt5001A, fgProcModName=fgProcModName, fgTrapIpsFailOpen=fgTrapIpsFailOpen, fgSysSesCount=fgSysSesCount, fgFwGtpRtStatsDDroppedSanity=fgFwGtpRtStatsDDroppedSanity, fgNPUEntry=fgNPUEntry, fgWcWlanSsid=fgWcWlanSsid, fgAppWanOpt=fgAppWanOpt, fgChassisObjectGroup=fgChassisObjectGroup, fgVpn2TunRemGwyIp=fgVpn2TunRemGwyIp, fgTrapVpnTunDown=fgTrapVpnTunDown, fgvmpg=fgvmpg, fgFwGtpStatsApnShaper=fgFwGtpStatsApnShaper, fgVpn2DialupOutOctets=fgVpn2DialupOutOctets, fgWebCacheDiskUsage=fgWebCacheDiskUsage, fgWanOptDisk=fgWanOptDisk, fgVpnDialupEntry=fgVpnDialupEntry, fwf51E=fwf51E, fgFwIppStatsRscUDP=fgFwIppStatsRscUDP, fgWcInfo=fgWcInfo, fgNPUSessionCount=fgNPUSessionCount, fw81FP=fw81FP, fgLinkMonitorID=fgLinkMonitorID, FgWcWtpRadioType=FgWcWtpRadioType, fgUsbModemId=fgUsbModemId, fgIntfBcInBytes=fgIntfBcInBytes, fgApPOP3ReqProcessed=fgApPOP3ReqProcessed, fgSwDeviceVersion=fgSwDeviceVersion, fgVWLHealthCheckLinkUsedBandwidthIn=fgVWLHealthCheckLinkUsedBandwidthIn, fgIntfBcQTable=fgIntfBcQTable, fgt3810D=fgt3810D, fgFmTrapGroup=fgFmTrapGroup, ffw4400F=ffw4400F, fgt101F=fgt101F, fgProcessorModuleTypes=fgProcessorModuleTypes, fgWcStaBandwidthRx=fgWcStaBandwidthRx, fgt100E=fgt100E, fgWanOptWANBytesOut=fgWanOptWANBytesOut, fgHaStatsAvCount=fgHaStatsAvCount, fgApFTPMemUsage=fgApFTPMemUsage, fgSlaProbeClientIP=fgSlaProbeClientIP, fgChassisVersion=fgChassisVersion, fwf60D=fwf60D, fgNPUTable=fgNPUTable, fgFwAddrTables=fgFwAddrTables, fgIntfEntry=fgIntfEntry, FgWanOptHistPeriods=FgWanOptHistPeriods, fgHaTrapMemberSerial=fgHaTrapMemberSerial, fgIpSessExp=fgIpSessExp, fgMdmSwRev=fgMdmSwRev, fgWcWtpSessionWtpBootVersion=fgWcWtpSessionWtpBootVersion, fgSwDeviceJoinTime=fgSwDeviceJoinTime, fgSimState=fgSimState, fgHaStatsPrimarySerial=fgHaStatsPrimarySerial, fgDataCpuUsage=fgDataCpuUsage, fgt60C=fgt60C, fgIntfVrrpCount=fgIntfVrrpCount, fgWcWtpProfileRadioMode=fgWcWtpProfileRadioMode, fgLicVersionTable=fgLicVersionTable, fosVM64HV=fosVM64HV, fgIntfBcInDrops=fgIntfBcInDrops, fgWcInfoWtpManaged=fgWcInfoWtpManaged, fgDhcpTrapType=fgDhcpTrapType, fgIntfTable=fgIntfTable, fgtVM64AZUREONDEMAND=fgtVM64AZUREONDEMAND, fg30EN=fg30EN, fgDNSProxyStatsInfo=fgDNSProxyStatsInfo, fgExplicitProxyRequests=fgExplicitProxyRequests, fgIntfVlanEntry=fgIntfVlanEntry, fgWanOptUpTime=fgWanOptUpTime, fgWebCacheInfo=fgWebCacheInfo, fgSwPortSwitchSerialNum=fgSwPortSwitchSerialNum)
mibBuilder.exportSymbols("FORTINET-FORTIGATE-MIB", fgWanOptDiskHits=fgWanOptDiskHits, fgProcessorsTrapObjects=fgProcessorsTrapObjects, fgSlaProbeClientOutofSeq=fgSlaProbeClientOutofSeq, fgConfig=fgConfig, fgExplicitProxyExaminedURLs=fgExplicitProxyExaminedURLs, fgWebCacheDiskFailure=fgWebCacheDiskFailure, fgvmxx=fgvmxx, fgSgWbSlotID=fgSgWbSlotID, fgtVM64RAXONDEMAND=fgtVM64RAXONDEMAND, fgApIMAPUpTime=fgApIMAPUpTime, fgSysNpuSes6Count=fgSysNpuSes6Count, fgApIMAPStatsTable=fgApIMAPStatsTable, fgHdrIo=fgHdrIo, fgDpdkEngEntry=fgDpdkEngEntry, fgt40F=fgt40F, fgDNSProxyStatsUdpCacheHit=fgDNSProxyStatsUdpCacheHit, fgUsbportVersion=fgUsbportVersion, fgSlaProbeClientMinJitter=fgSlaProbeClientMinJitter, fgSysInfoAdvSessions=fgSysInfoAdvSessions, fgVpn2DialupSrcBegin=fgVpn2DialupSrcBegin, fgSwPortPOEState=fgSwPortPOEState, FgFwAuthUserType=FgFwAuthUserType, fgIntfBcCfgSpolSvr=fgIntfBcCfgSpolSvr, fgAppVoIPConn=fgAppVoIPConn, fgt2500E=fgt2500E, fgWanOptTrafficStatsTable=fgWanOptTrafficStatsTable, fgAppSuStatsTable=fgAppSuStatsTable, fgExplicitProxyBlockedConType=fgExplicitProxyBlockedConType, fgProcessorAMD=fgProcessorAMD, fgLog=fgLog, fgWcWtpProfileRadioDarrp=fgWcWtpProfileRadioDarrp, fgProcessorUserUsage=fgProcessorUserUsage, fgHaTrapObjects=fgHaTrapObjects, fgAppVoIP=fgAppVoIP, fgLogDevices=fgLogDevices, fgMdmActBand=fgMdmActBand, fgIntfBcQBytes=fgIntfBcQBytes, fgt3501F=fgt3501F, fgWebCacheRAMHits=fgWebCacheRAMHits, fgVpn2TunSelDstPort=fgVpn2TunSelDstPort, fgAvStatsEntry=fgAvStatsEntry, fwf60B=fwf60B, fgt4400F=fgt4400F, fgr35D=fgr35D, fgWcWtpConfigEntry=fgWcWtpConfigEntry, fgSysDiskCapacity=fgSysDiskCapacity, fgIntfBcCfgSproName=fgIntfBcCfgSproName, fgFgWfHTTPSOverridden=fgFgWfHTTPSOverridden, fw60CM=fw60CM, fgVdInfo=fgVdInfo, fgAppProxyPOP3=fgAppProxyPOP3, fgExplicitProxyScanStatsTable=fgExplicitProxyScanStatsTable, fgVdEntSesCount=fgVdEntSesCount, fgt5001E1=fgt5001E1, fgFwGtpStats=fgFwGtpStats, fgWanOptLanInTraffic=fgWanOptLanInTraffic, fgUsbports=fgUsbports, fgExplicitProxyMemUsage=fgExplicitProxyMemUsage, fgSlaProbeClientID=fgSlaProbeClientID, fgVpn2TunStatus=fgVpn2TunStatus, fgSlaProbeClientOutofSeqDS=fgSlaProbeClientOutofSeqDS, fw30EI=fw30EI, fgWanOptDiskLimit=fgWanOptDiskLimit, fgAppP2PProtEntBytes=fgAppP2PProtEntBytes, fgWcStaHost=fgWcStaHost, fgWanOptLanTraffic=fgWanOptLanTraffic, fgCdmaEcio=fgCdmaEcio, fgNPUNumber=fgNPUNumber, fgIntfVlanHbTable=fgIntfVlanHbTable, fgWcWtpSessionWtpMemoryCapacity=fgWcWtpSessionWtpMemoryCapacity, fgManIfIp=fgManIfIp, fgSimEntIndex=fgSimEntIndex, fgt60EJ=fgt60EJ, fgFwAuthIpv4UserType=fgFwAuthIpv4UserType, fdLtePdpType=fdLtePdpType, fgFwGtpRtStatsCDropped9=fgFwGtpRtStatsCDropped9, fgDatausageMdmEntIndex=fgDatausageMdmEntIndex, fgt111C=fgt111C, fgAppP2P=fgAppP2P, fgt92D=fgt92D, fgFwGtpRtStatsBForwarded=fgFwGtpRtStatsBForwarded, fgInternalModemGpsInfoGroup=fgInternalModemGpsInfoGroup, fosVM64=fosVM64, fgProcessorUsage5sec=fgProcessorUsage5sec, fgt3016B=fgt3016B, fgFwUserAuth=fgFwUserAuth, fgDNSProxyObjectGroup=fgDNSProxyObjectGroup, fgSwPortSwitchPlatform=fgSwPortSwitchPlatform, fgVpn2DialupDstBeginType=fgVpn2DialupDstBeginType, fgDhcpServerId=fgDhcpServerId, fgSysSes6Count=fgSysSes6Count, fgt2600F=fgt2600F, fgApPOP3StatsEntry=fgApPOP3StatsEntry, fgVpn2DialupIndex=fgVpn2DialupIndex, fgSIAdvMemBuffer=fgSIAdvMemBuffer, fgFwIppStatsUsedRscTCP=fgFwIppStatsUsedRscTCP, fgAvIMVirusDetected=fgAvIMVirusDetected, fdLteIpv4GwAddr=fdLteIpv4GwAddr, fgWebCacheDiskMisses=fgWebCacheDiskMisses, fgWcStaTable=fgWcStaTable, fgLteRssi=fgLteRssi, fgFwAuthUserInfoTable=fgFwAuthUserInfoTable, fgSysNpuSes6Rate30=fgSysNpuSes6Rate30, fgApHTTPStatsTable=fgApHTTPStatsTable, fgWcWtpProfileEntry=fgWcWtpProfileEntry, fgFwGtpStatsIeRemovePolicies=fgFwGtpStatsIeRemovePolicies, fgAvStatsTable=fgAvStatsTable, fgt80E=fgt80E, fgVpnSslTunnelBytesOut=fgVpnSslTunnelBytesOut, fgVpn2DialupVdom=fgVpn2DialupVdom, fgVpnTrapObjects=fgVpnTrapObjects, fgt3401E=fgt3401E, fgtVM64HV=fgtVM64HV, fgApPOP3Connections=fgApPOP3Connections, fgt2200E=fgt2200E, fgVdEntSesRate=fgVdEntSesRate, fgSwPortTable=fgSwPortTable, fgUsbModemSignalStrength=fgUsbModemSignalStrength, fgSysNpuSesRate1=fgSysNpuSesRate1, fgFwGtpRtStatsDDroppedUnknownVersion=fgFwGtpRtStatsDDroppedUnknownVersion, fgSysLowMemCapacity=fgSysLowMemCapacity, fgIpSessFromAddr=fgIpSessFromAddr, fgApSIPStatsEntry=fgApSIPStatsEntry, fgTrafMdmEntIndex=fgTrafMdmEntIndex, fgHdrSinr=fgHdrSinr, fgSlaProbeClientMaxLatencySD=fgSlaProbeClientMaxLatencySD, fgWcWtpProfileTable=fgWcWtpProfileTable, fgvm2v=fgvm2v, fgApSMTPConnections=fgApSMTPConnections, fgTrafficInfoTable=fgTrafficInfoTable, fgHaStatsMemUsage=fgHaStatsMemUsage, FgHaLBSchedule=FgHaLBSchedule, fgMemCacheLimit=fgMemCacheLimit, fgProcessorOther=fgProcessorOther, fgWcWtpProfileRadioApHandoff=fgWcWtpProfileRadioApHandoff, fgt601F=fgt601F, fgSgWbSysUpTime=fgSgWbSysUpTime, fgFmTrapIfChange=fgFmTrapIfChange, fgWfHTTPURLBlocked=fgWfHTTPURLBlocked, fgVpn2TunSelSrcPort=fgVpn2TunSelSrcPort, fgLicVersionDesc=fgLicVersionDesc, fwf60AM=fwf60AM, fgUsbModemSimId=fgUsbModemSimId, fgAppP2PStatsEntry=fgAppP2PStatsEntry, fgExplicitProxyUpTime=fgExplicitProxyUpTime, fwf80CM=fwf80CM, fgTraps=fgTraps, fgt3000F=fgt3000F, fwf41F=fwf41F, fgWc=fgWc, fgExplicitProxyOverriddenURLs=fgExplicitProxyOverriddenURLs, FgWcWtpRadioBandType=FgWcWtpRadioBandType, fgt90DPOE=fgt90DPOE, fgWcWlanStationCount=fgWcWlanStationCount, fgUsbModemVendor=fgUsbModemVendor, fgApIMReqProcessed=fgApIMReqProcessed, fgFwGtpRtStats=fgFwGtpRtStats, fgFwIppools=fgFwIppools, fgServerLoadBalanceVirtualServerName=fgServerLoadBalanceVirtualServerName, fgDatausageEnabled=fgDatausageEnabled, fgFwGtpRtStatsCDropped23=fgFwGtpRtStatsCDropped23, fgExplicitProxyPolicy=fgExplicitProxyPolicy, fgFwGtpRtStatsCDropped2=fgFwGtpRtStatsCDropped2, fgVpnTunEntTimeout=fgVpnTunEntTimeout, fgSwDeviceIpv6=fgSwDeviceIpv6, fgVpnTrapRemoteGateway=fgVpnTrapRemoteGateway, fgIntfBcCfgIfName=fgIntfBcCfgIfName, fgIntfBcCfgSpolDstaddr=fgIntfBcCfgSpolDstaddr, fgVpn2TunEntry=fgVpn2TunEntry, fgLinkMonitorPacketLoss=fgLinkMonitorPacketLoss, fgWebCacheRAMMisses=fgWebCacheRAMMisses, ffvmev=ffvmev, fgWcWtpSessionVapEntry=fgWcWtpSessionVapEntry, fgIntfVrrpTable=fgIntfVrrpTable, fgWcWlanUserGroup=fgWcWlanUserGroup, fgt110C=fgt110C, fgAvFTPVirusBlocked=fgAvFTPVirusBlocked, FgWcWlanEncryptionType=FgWcWlanEncryptionType, fgLicContractEntry=fgLicContractEntry, fgFcSwSerial=fgFcSwSerial, fgFwPolID=fgFwPolID, fgt3001F=fgt3001F, fgApFTPStatsTable=fgApFTPStatsTable, fgDpdkEngIpsUsage=fgDpdkEngIpsUsage, fgt621B=fgt621B, fgFwGtpRtStatsCDropped17=fgFwGtpRtStatsCDropped17, fgIntfBcCurrentBandwidth=fgIntfBcCurrentBandwidth, fgProcessorTable=fgProcessorTable, fgProcessors=fgProcessors, fgFwAuthIpv6UserEntry=fgFwAuthIpv6UserEntry, fgSIAdvMemPageCache=fgSIAdvMemPageCache, fgVpn2TunRemGwyIpType=fgVpn2TunRemGwyIpType, fgt280D=fgt280D, fgFwGtpRtStatsCDropped20=fgFwGtpRtStatsCDropped20, fgVpn2DialupGateway=fgVpn2DialupGateway, fgt140T=fgt140T, fgExplicitProxyLoggedURLs=fgExplicitProxyLoggedURLs, fgMdmEsn=fgMdmEsn, fgFwIppStatsOtherSessions=fgFwIppStatsOtherSessions, fgLteRsrq=fgLteRsrq, fgt5001B=fgt5001B, fgAppP2PProtoEntLastReset=fgAppP2PProtoEntLastReset, fgWebCacheRAMLimit=fgWebCacheRAMLimit, fgFwIppStatsPortStart=fgFwIppStatsPortStart, fgProcessorModules=fgProcessorModules, fgt60EV=fgt60EV, fgVdMaxVdoms=fgVdMaxVdoms, fgSysVersion=fgSysVersion, fgServerLoadBalanceTrapObjects=fgServerLoadBalanceTrapObjects, FgSgWorkerBladeIndex=FgSgWorkerBladeIndex, fwf50B=fwf50B, fgIntfBcCfgSpolEntry=fgIntfBcCfgSpolEntry, fgVdTpTable=fgVdTpTable, fgSysVersionAvEt=fgSysVersionAvEt, fgIntfVrrpEntIfName=fgIntfVrrpEntIfName, fgMgmtTrapObjects=fgMgmtTrapObjects, fgWanOptLANBytesIn=fgWanOptLANBytesIn, fgIntfVlanHbs=fgIntfVlanHbs, fgVpnObjectGroup=fgVpnObjectGroup, fgt1101E=fgt1101E, fgt400E=fgt400E, fgAppFnbamStatsTotalAuthReqs=fgAppFnbamStatsTotalAuthReqs, fgIpSessTable=fgIpSessTable, fgProcModMemUsage=fgProcModMemUsage, fgt800F=fgt800F, fgFwTrapPoolUtilization=fgFwTrapPoolUtilization, fgHaStatsAllChecksum=fgHaStatsAllChecksum, fgFwGtpRtStatsCDropped18=fgFwGtpRtStatsCDropped18, fgHdrEcio=fgHdrEcio, fgAntivirus=fgAntivirus, fgFgWfHTTPOverridden=fgFgWfHTTPOverridden, fgUsbportClass=fgUsbportClass, fgWcWlanStationCapacity=fgWcWlanStationCapacity, fgFwAuthIpv4UserNumber=fgFwAuthIpv4UserNumber, fgHwSensors=fgHwSensors, fdLteIpv4PriDns=fdLteIpv4PriDns, fgApIMStatsEntry=fgApIMStatsEntry, fgSwDeviceIp=fgSwDeviceIp, fgApHTTPStatsEntry=fgApHTTPStatsEntry, fgWcWtpSessionRadioBaseBssid=fgWcWtpSessionRadioBaseBssid, fgFwUserTable=fgFwUserTable, fgWcStaNoise=fgWcStaNoise, fgAppExplicitProxy=fgAppExplicitProxy, fgSlaProbeClientMinJitterDS=fgSlaProbeClientMinJitterDS, fgVpn2Tables=fgVpn2Tables, fgtVM64=fgtVM64, fgWcWlanAuthentication=fgWcWlanAuthentication, fgExplicitProxyArchSize=fgExplicitProxyArchSize, fgAppP2PStatsTable=fgAppP2PStatsTable, fgSimInfoTable=fgSimInfoTable, fgvulv=fgvulv, fgt4201F=fgt4201F, fgConfigStatus=fgConfigStatus, fgUsbModemInfo=fgUsbModemInfo)
mibBuilder.exportSymbols("FORTINET-FORTIGATE-MIB", fgDiskTable=fgDiskTable, fgFwGtpRtStatsCDropped5=fgFwGtpRtStatsCDropped5, fgVpnDialupVdom=fgVpnDialupVdom, fwf40F=fwf40F, fgIntfBcCfgSpolTable=fgIntfBcCfgSpolTable, fgtVM64ALIONDEMAND=fgtVM64ALIONDEMAND, fgFwUserNumber=fgFwUserNumber, fgDNSProxyStatsUdpTo=fgDNSProxyStatsUdpTo, fgWebFilterObjectGroup=fgWebFilterObjectGroup, fgHaStatsIndex=fgHaStatsIndex, fgFwAuthUserInfoEntry=fgFwAuthUserInfoEntry, fgWebCacheObjectGroup=fgWebCacheObjectGroup, fgDatausageInfoEntry=fgDatausageInfoEntry, fgUsbportsObjectGroup=fgUsbportsObjectGroup, fgLinkMonitorBandwidthIn=fgLinkMonitorBandwidthIn, fgIntfVlanTable=fgIntfVlanTable, fgSwDeviceAuthorized=fgSwDeviceAuthorized, fgFwIppStatsFlags=fgFwIppStatsFlags, fgIntfBcQEntry=fgIntfBcQEntry, fgIntfBcCfgIfIngressSProfile=fgIntfBcCfgIfIngressSProfile, fgFazTrapType=fgFazTrapType, fgAdminOptions=fgAdminOptions, fgInetProtoInfo=fgInetProtoInfo, fgNPUDrvDrift=fgNPUDrvDrift, fgDiskName=fgDiskName, fgTrapHaMemberUp=fgTrapHaMemberUp, fgMdmRevision=fgMdmRevision, fgt3700D=fgt3700D, fgWcInfoWtpCapacity=fgWcInfoWtpCapacity, fgt80FPOE=fgt80FPOE, fgLogDeviceEnabled=fgLogDeviceEnabled, fgProcessorPktTxDroppedCount=fgProcessorPktTxDroppedCount, fgFwGtpRtStatsCDropped4=fgFwGtpRtStatsCDropped4, fgDisks=fgDisks, fgVpn2DialupSrcBeginType=fgVpn2DialupSrcBeginType, fgAppIM=fgAppIM, fgt3950B=fgt3950B, fgHaGroupId=fgHaGroupId, fgDhcpEntry=fgDhcpEntry, fgHaOverride=fgHaOverride, fgTrapAvEnterConserve=fgTrapAvEnterConserve, fgIntfVrrpEntry=fgIntfVrrpEntry, fgWcWtpProfileRadioApScan=fgWcWtpProfileRadioApScan, fgSigMdmEntIndex=fgSigMdmEntIndex, fgt41F=fgt41F, fgWebCacheDisk=fgWebCacheDisk, fgt140E=fgt140E, fdLteProfName=fdLteProfName, fgt3600C=fgt3600C, fgIntfTables=fgIntfTables, fgLinkMonitorProtocol=fgLinkMonitorProtocol, fgWcWtpSessionWtpByteTxCount=fgWcWtpSessionWtpByteTxCount, fr30DA=fr30DA, fgLicContractExpiry=fgLicContractExpiry, fgWanOptReductionRate=fgWanOptReductionRate, fgWanOptDiskUsage=fgWanOptDiskUsage, fgIpsTrapSrcIp=fgIpsTrapSrcIp, fgNPUGroup=fgNPUGroup, fgProcessorPktRxCount=fgProcessorPktRxCount, fgInternalModemSIMInfoGroup=fgInternalModemSIMInfoGroup, fgIpSessNumber=fgIpSessNumber, fgSwPortNum=fgSwPortNum, fgVpnTunEntOutOctets=fgVpnTunEntOutOctets, fgFwGtpStatsPath=fgFwGtpStatsPath, fr70FB=fr70FB, fgAdminIdleTimeout=fgAdminIdleTimeout, fgInternalModemInfoGroup=fgInternalModemInfoGroup, fgt94DPOE=fgt94DPOE, fgtVM64AWS=fgtVM64AWS, fgt200=fgt200, fgWcWtpSessionWtpRegionCode=fgWcWtpSessionWtpRegionCode, fgv32v=fgv32v, fgWcWtpSessionWtpByteRxCount=fgWcWtpSessionWtpByteRxCount, fgAvFTPVirusDetected=fgAvFTPVirusDetected, ffw4200F=ffw4200F, fgAppProxySMTP=fgAppProxySMTP, fgWcStaSecurity=fgWcStaSecurity, fw40FI=fw40FI, fosVM64XEN=fosVM64XEN, fgHaStatsCpuUsage=fgHaStatsCpuUsage, fgIpsMedSevDetections=fgIpsMedSevDetections, fgDhcpInfo=fgDhcpInfo, fgSysNeedLogPartitionScan=fgSysNeedLogPartitionScan, fgWcWtpSessionWtpBaseMacAddress=fgWcWtpSessionWtpBaseMacAddress, fgVpnTrapLocalGateway=fgVpnTrapLocalGateway, fgLatitude=fgLatitude, fgWcWtpProfileRadioFrequencyHandoff=fgWcWtpProfileRadioFrequencyHandoff, fgTrapAvVirus=fgTrapAvVirus, fgSlaProbeClientPktlossDS=fgSlaProbeClientPktlossDS, fgLinkMonitor=fgLinkMonitor, fgSIAdvMemCacheActive=fgSIAdvMemCacheActive, fgFwGtpRtStatsBDroppedSanity=fgFwGtpRtStatsBDroppedSanity, fgWcWtpProfileName=fgWcWtpProfileName, fgVdTable=fgVdTable, fgt5001D=fgt5001D, fgVpnInfo=fgVpnInfo, fgFwAuthUserTables=fgFwAuthUserTables, fgWcWtpSessionWtpMemoryUsage=fgWcWtpSessionWtpMemoryUsage, fgWcWtpConfigVaps=fgWcWtpConfigVaps, fgt400D=fgt400D, fgVWLHealthCheckLinkState=fgVWLHealthCheckLinkState, fgAppServicesObjectGroup=fgAppServicesObjectGroup, fgUsbModemInfoObjects=fgUsbModemInfoObjects, fgSgWbEntIndex=fgSgWbEntIndex, fgWcWtpSessionWtpStationCount=fgWcWtpSessionWtpStationCount, fgWcStaVci=fgWcStaVci, fdLteSessConnStat=fdLteSessConnStat, fgt300D=fgt300D, fgVpnTunEntStatus=fgVpnTunEntStatus, fgUsbportProdId=fgUsbportProdId, fgApNNTPStatsEntry=fgApNNTPStatsEntry, fgFwUserAuthTimeout=fgFwUserAuthTimeout, fgProcModIntegratedNPU=fgProcModIntegratedNPU, fgWcWtpSessionRadioRadioId=fgWcWtpSessionRadioRadioId, fgWcWlanEncryption=fgWcWlanEncryption, fosVM64KVM=fosVM64KVM, fgWcWtpProfilePlatform=fgWcWtpProfilePlatform, fgProcessorsObjectGroup=fgProcessorsObjectGroup, fgIntfBcCfgSproID=fgIntfBcCfgSproID, fgIpsSignatureDetections=fgIpsSignatureDetections, fgLteSnr=fgLteSnr, fgApIMMemUsage=fgApIMMemUsage, fgvm01=fgvm01, fgFcSwName=fgFcSwName, fgIntfVrrpEntGrpId=fgIntfVrrpEntGrpId, fgDhcpObjectGroup=fgDhcpObjectGroup, fgSlaProbeClientTable=fgSlaProbeClientTable, fgExplicitProxyBlockedDLP=fgExplicitProxyBlockedDLP, fgSwPortSwitchId=fgSwPortSwitchId, fgExplicitProxyObjectGroup=fgExplicitProxyObjectGroup, fgvmel=fgvmel, fgAppProxyFTP=fgAppProxyFTP, fgSgWbSysMemUsage=fgSgWbSysMemUsage, fgAppFnbamStatsInfo=fgAppFnbamStatsInfo, fgFcObjectGroup=fgFcObjectGroup, fgt240D=fgt240D, fg30EI=fg30EI, fgFwGtpStatsIpPolicy=fgFwGtpStatsIpPolicy, fgCdmaRssi=fgCdmaRssi, fgWcdmaRssi=fgWcdmaRssi, fgvmml=fgvmml, fgChassisInfo=fgChassisInfo, fgLteSessEntIndex=fgLteSessEntIndex, fgSwDeviceStatus=fgSwDeviceStatus, fgObsoleteAppServicesObjectGroup=fgObsoleteAppServicesObjectGroup, fgDataOut=fgDataOut, fgAdministrationObjectGroup=fgAdministrationObjectGroup, fgFcSwVdom=fgFcSwVdom, fgProcessorUsage=fgProcessorUsage, fgSwPortPOEPower=fgSwPortPOEPower, fgTrapHaStateChange=fgTrapHaStateChange, fgWebfilterStatsTable=fgWebfilterStatsTable, fgIntfVrrpEntState=fgIntfVrrpEntState, fwf92D=fwf92D, fgVpnTables=fgVpnTables, fgTrapAvOversizeBlock=fgTrapAvOversizeBlock, fgFwPolInfo=fgFwPolInfo, fgAvSMTPVirusBlocked=fgAvSMTPVirusBlocked, fgWcWtpProfileRadioProfileName=fgWcWtpProfileRadioProfileName, fgIntfVrrpEntVrId=fgIntfVrrpEntVrId, fgProcessorFnSoc=fgProcessorFnSoc, fgFwUserInfo=fgFwUserInfo, fwf60=fwf60, fgVdEntIndex=fgVdEntIndex, fgFwIppStatsPercentageUDP=fgFwIppStatsPercentageUDP, fgSysSesRate30=fgSysSesRate30, fgLicVersionUpdMethod=fgLicVersionUpdMethod, fg40FI=fg40FI, fgLicContractTable=fgLicContractTable, fgFwGtpStatsImsi=fgFwGtpStatsImsi, fgLogDeviceRelayedCount=fgLogDeviceRelayedCount, fgVpnDialupTimeout=fgVpnDialupTimeout, fgHaStatsSesCount=fgHaStatsSesCount, fgWanOptDiskFailure=fgWanOptDiskFailure, fgNPU=fgNPU, fgVpn2TunSelDstBeginIpType=fgVpn2TunSelDstBeginIpType, fgVpnTunEntPhase1Name=fgVpnTunEntPhase1Name, fgFwAddrDynEmsName=fgFwAddrDynEmsName, fgHwSensorEntry=fgHwSensorEntry, fgAppSuStatsEntry=fgAppSuStatsEntry, fgt3140B=fgt3140B, fgt3951B=fgt3951B, fgSIAdvSesNoListenerCount=fgSIAdvSesNoListenerCount, fgWcWtpSessionWtpLocalIpAddressType=fgWcWtpSessionWtpLocalIpAddressType, fgConfigChecksum=fgConfigChecksum, fgWcWtpProfileRadioAutoTxPowerControl=fgWcWtpProfileRadioAutoTxPowerControl, fgWcStaIpAddressType=fgWcStaIpAddressType, fgApHTTPUpTime=fgApHTTPUpTime, fgt3815D=fgt3815D, fgAvTrapVirName=fgAvTrapVirName, fgFwHsPolLastUsed=fgFwHsPolLastUsed, fgIntfBcCfgIfEntry=fgIntfBcCfgIfEntry, fgTrapDhcp=fgTrapDhcp, fgSysNpuSes6Rate10=fgSysNpuSes6Rate10, fgt50E=fgt50E, fgFgWfHTTPBlocked=fgFgWfHTTPBlocked, fgIntfBcInTable=fgIntfBcInTable, fgFwGtpRtStatsBDroppedMsgFilter=fgFwGtpRtStatsBDroppedMsgFilter, fgWcInfoName=fgWcInfoName, fgFwAddrDynEmsID=fgFwAddrDynEmsID, fgApFTPReqProcessed=fgApFTPReqProcessed, fgMdmMeid=fgMdmMeid, fwf81F=fwf81F, fgIpsIntrusionsDetected=fgIpsIntrusionsDetected, fgtARM64GCP=fgtARM64GCP, fgHaStatsEntry=fgHaStatsEntry, fgt80EPOE=fgt80EPOE, fgDiskEntry=fgDiskEntry, fwf30D=fwf30D, fgt600D=fgt600D, fgIntfBcInCurrentBandwidth=fgIntfBcInCurrentBandwidth, fgHwSensorTable=fgHwSensorTable, fgt3800D=fgt3800D, fgUsbportEntry=fgUsbportEntry, fgSIAdvMemEnterKerConsThrsh=fgSIAdvMemEnterKerConsThrsh, fgUsbportSerial=fgUsbportSerial, fgLocalTime=fgLocalTime, fgLicContracts=fgLicContracts, FgVdIndex=FgVdIndex, fgUsbModemSimState=fgUsbModemSimState, fgIntfBcCfgSentClassID=fgIntfBcCfgSentClassID, fgt7000E=fgt7000E, fgAvNNTPVirusDetected=fgAvNNTPVirusDetected, fgWcInfoLocation=fgWcInfoLocation, fdLteIpv4SecDns=fdLteIpv4SecDns, fgProcessorPktTxCount=fgProcessorPktTxCount, fgIntfBcQPackets=fgIntfBcQPackets, fgSysUpTimeDetail=fgSysUpTimeDetail, fgt80FBP=fgt80FBP, fgProcModIntegrated=fgProcModIntegrated, fgExplicitProxyBlockedURLs=fgExplicitProxyBlockedURLs, fgAppVoIPStatsEntry=fgAppVoIPStatsEntry, fgVpnTunEntRemGwyPort=fgVpnTunEntRemGwyPort, fgFwGtpRtStatsCDropped3=fgFwGtpRtStatsCDropped3, fgWcWtpSessionTable=fgWcWtpSessionTable, fdLteAutoConn=fdLteAutoConn, fgt81E=fgt81E, fgWcWtpSessionWtpSwVersion=fgWcWtpSessionWtpSwVersion, fgVpnSslTunnelTable=fgVpnSslTunnelTable, fgSimImsi=fgSimImsi, fgFwGtpRtStatsDDroppedSpoof=fgFwGtpRtStatsDDroppedSpoof, fgWcWtpSessionWtpHwVersion=fgWcWtpSessionWtpHwVersion, fgVpn2TunLifeBytes=fgVpn2TunLifeBytes, fgWcWtpProfileRadioEntry=fgWcWtpProfileRadioEntry, fgt3601E=fgt3601E, fgSysSes6Rate30=fgSysSes6Rate30, fgMdmPriFwVer=fgMdmPriFwVer, fgGpsEnabled=fgGpsEnabled, fgVdTpEntry=fgVdTpEntry, fgSwDeviceTable=fgSwDeviceTable, fgHwSensorsObjectGroup=fgHwSensorsObjectGroup, fgDNSProxyStatsUdpFtgRes=fgDNSProxyStatsUdpFtgRes, fgFwGtpStatsClash=fgFwGtpStatsClash, fgMdmFwVer=fgMdmFwVer)
mibBuilder.exportSymbols("FORTINET-FORTIGATE-MIB", fgDevice=fgDevice, fgt200D=fgt200D, fgWcWtpProfileRadioAutoTxPowerHigh=fgWcWtpProfileRadioAutoTxPowerHigh, fgTxPacksOverflow=fgTxPacksOverflow, fgIntfBcMaxBandwidth=fgIntfBcMaxBandwidth, fgLicVersionTryResult=fgLicVersionTryResult, fgWanOptHistoryStatsEntry=fgWanOptHistoryStatsEntry, fgAppIMFileTransfered=fgAppIMFileTransfered, fgSgWbSysCpuUsage=fgSgWbSysCpuUsage, fgIpSessEntry=fgIpSessEntry, fgWcWtpSessionVapByteRxCount=fgWcWtpSessionVapByteRxCount, fgByteCacheRAMUsage=fgByteCacheRAMUsage, fw30EG=fw30EG, fgWanOptStatsEntry=fgWanOptStatsEntry, fgMdmRssi=fgMdmRssi, fgWcWtpProfileRadioTable=fgWcWtpProfileRadioTable, fgVdEntry=fgVdEntry, fgHaGroupName=fgHaGroupName, fgt60EPOE=fgt60EPOE, fgWcWtpProfileRadioVaps=fgWcWtpProfileRadioVaps, fgIntfInfo=fgIntfInfo, fgIntfBcCfgSpolID=fgIntfBcCfgSpolID, fgFwGtpRtStatsCDropped19=fgFwGtpRtStatsCDropped19, fgFwAuthIpv4UserAddr=fgFwAuthIpv4UserAddr, fgTrapWcApDown=fgTrapWcApDown, fgSIAdvSesSyncQFCount=fgSIAdvSesSyncQFCount, fwf60EV=fwf60EV, fgt240DP=fgt240DP, fgTrapServerLoadBalanceRealServerDown=fgTrapServerLoadBalanceRealServerDown, fgVpn2TunTimeout=fgVpn2TunTimeout, fgFortiGuardStatsTable=fgFortiGuardStatsTable, fgFortiGuardStatsEntry=fgFortiGuardStatsEntry, fgSwitchDeviceObjectGroup=fgSwitchDeviceObjectGroup, fgDeviceCreated=fgDeviceCreated, fgSwPortInfo=fgSwPortInfo, fgvmul=fgvmul, fgt1000=fgt1000, fgSlaProbeClientMinLatency=fgSlaProbeClientMinLatency, fgt60=fgt60, fgWanOptInfo=fgWanOptInfo, fgWcApVdom=fgWcApVdom, fgWcWtpConfigTable=fgWcWtpConfigTable, fgFwGtpRtStatsDDroppedMalIe=fgFwGtpRtStatsDDroppedMalIe, fgServiceGroupWorkerBlades=fgServiceGroupWorkerBlades, fg41FI=fg41FI, fw60DP=fw60DP, fgFwIppStatsStartIp=fgFwIppStatsStartIp, fgSwPortUntaggedVlan=fgSwPortUntaggedVlan, fgNPUInfo=fgNPUInfo, fdLteIpv6SecDns=fdLteIpv6SecDns, fgTrapAvPattern=fgTrapAvPattern, fgt5001E=fgt5001E, fgFwPolPktCountHc=fgFwPolPktCountHc, fgt3040B=fgt3040B, fgVpnTrapPhase1Name=fgVpnTrapPhase1Name, fgt100F=fgt100F, fgHaSchedule=fgHaSchedule, fgFwGtpRtStatsDDroppedMsgFilter=fgFwGtpRtStatsDDroppedMsgFilter, fgVpn2TunSelProto=fgVpn2TunSelProto, fgLinkMonitorEntry=fgLinkMonitorEntry, fgSlaProbeClientMaxLatency=fgSlaProbeClientMaxLatency, FgSessProto=FgSessProto, fgProcessorFnNP6=fgProcessorFnNP6, fgt4401F=fgt4401F, fgFwGtpRtStatsCDropped13=fgFwGtpRtStatsCDropped13, fgVpnTunEntSelectorProto=fgVpnTunEntSelectorProto, fgVpn2DialupLifetime=fgVpn2DialupLifetime, fgAdminVdom=fgAdminVdom, fgIntfBcCfgSentMaxBandwidth=fgIntfBcCfgSentMaxBandwidth, fgVpn2TunSelDstEndIpType=fgVpn2TunSelDstEndIpType, fgApSIPStatsTable=fgApSIPStatsTable, fgt620B=fgt620B, fgSysNpuSesCount=fgSysNpuSesCount, fgSimIccid=fgSimIccid, fgProcModDescr=fgProcModDescr, fgVpnDialupTable=fgVpnDialupTable, fgt600E=fgt600E, fgWebCacheDiskHits=fgWebCacheDiskHits, fgFwAddrDynEmsEntry=fgFwAddrDynEmsEntry, fgAppSuNumber=fgAppSuNumber, fgUsbportManufacturer=fgUsbportManufacturer, fgIntfVrrpEntIndex=fgIntfVrrpEntIndex, fgt60ADSL=fgt60ADSL, fgWcWtpSessionWtpLocalIpAddress=fgWcWtpSessionWtpLocalIpAddress, fgWanOptHistoryStatsTable=fgWanOptHistoryStatsTable, fgFmTrapDeployComplete=fgFmTrapDeployComplete, fgt3500F=fgt3500F, fgWcStaEncrypt=fgWcStaEncrypt, fgSwDeviceInfo=fgSwDeviceInfo, fgt40C=fgt40C, fgWanOptWanTraffic=fgWanOptWanTraffic, fgVdEntChecksum=fgVdEntChecksum, fgIntfBcBytes=fgIntfBcBytes, fgVpn2TunVdom=fgVpn2TunVdom, fwf30B=fwf30B, fgVdTpMgmtAddr=fgVdTpMgmtAddr, fgApIMStatsTable=fgApIMStatsTable, fgDpdkEngIdle=fgDpdkEngIdle, fgAdminTable=fgAdminTable, fgUsbportVendId=fgUsbportVendId, fgApFTPStatsEntry=fgApFTPStatsEntry, fgWcInfoStationCount=fgWcInfoStationCount, fgIntfEntMeaUpBandwidth=fgIntfEntMeaUpBandwidth, fgSgWbBaseLink=fgSgWbBaseLink, fgWcObjectGroup=fgWcObjectGroup, fgFwGtpRtStatsDPkts=fgFwGtpRtStatsDPkts, fgDNSProxyStatsUdpRes=fgDNSProxyStatsUdpRes, fgt1000AFA2=fgt1000AFA2, fgSimNetwork=fgSimNetwork, FgP2PProto=FgP2PProto, fgVpnTunEntLifeBytes=fgVpnTunEntLifeBytes, fgWcWtpProfileCountryString=fgWcWtpProfileCountryString, fgObsoleteNotificationsGroup=fgObsoleteNotificationsGroup, fgMdmCarrierAbbr=fgMdmCarrierAbbr, fgt30EG=fgt30EG, fwf61E=fwf61E, fgt3240C=fgt3240C, fgDpdkEngs=fgDpdkEngs, fgLogDeviceEntryIndex=fgLogDeviceEntryIndex, fgSgWbState=fgSgWbState, fgIntfVrrpEntVrIp=fgIntfVrrpEntVrIp, fgProcessorFnNP6XLITE=fgProcessorFnNP6XLITE, fgSIAdvMemLeaveProxyConsThrsh=fgSIAdvMemLeaveProxyConsThrsh, fgVpn2DialupEntry=fgVpn2DialupEntry, fgt3200D=fgt3200D, fgHaStatsByteCount=fgHaStatsByteCount, fgServerLoadBalance=fgServerLoadBalance, fgVdEnabled=fgVdEnabled, fgFwGtpStatsTunnelLimiter=fgFwGtpStatsTunnelLimiter, fgVpnTunEntry=fgVpnTunEntry, fgVpn2DialupSrcEndType=fgVpn2DialupSrcEndType, fgWcWtpConfigWtpLocation=fgWcWtpConfigWtpLocation, fgHaStatsSyncStatus=fgHaStatsSyncStatus, fgSgWbStatusMsg=fgSgWbStatusMsg, fgFmTrapPrefix=fgFmTrapPrefix, fgFwGtpRtStatsDDroppedIpPol=fgFwGtpRtStatsDDroppedIpPol, fgWcWtpSessionRadioCountryString=fgWcWtpSessionRadioCountryString, fgSimMdmEntIndex=fgSimMdmEntIndex, fgWcWtpConfigRadioBand=fgWcWtpConfigRadioBand, fgt201E=fgt201E, fgt3400E=fgt3400E, fgFwIppStatsEndIp=fgFwIppStatsEndIp, fgt5001C=fgt5001C, fgAvOversizedBlocked=fgAvOversizedBlocked, fgLteRsrp=fgLteRsrp, FgWcCountryString=FgWcCountryString, fgVdTables=fgVdTables, fgTrapIpsPkgUpdate=fgTrapIpsPkgUpdate, fgWcWtpProfileRadioChannelBonding=fgWcWtpProfileRadioChannelBonding, fgt80C=fgt80C, fgServerLoadBalanceRealServerAddress=fgServerLoadBalanceRealServerAddress, fgIpsTrapObjects=fgIpsTrapObjects, fgt7000F=fgt7000F, fgDhcpTrapObjects=fgDhcpTrapObjects, fgWcStaChannel=fgWcStaChannel, fgTrapIpsAnomaly=fgTrapIpsAnomaly, fgWcWtpSessionWtpCpuUsage=fgWcWtpSessionWtpCpuUsage, fgAppIMMessages=fgAppIMMessages, fgExplicitProxyScriptStatsTable=fgExplicitProxyScriptStatsTable, fgDataIn=fgDataIn, fgVWLHealthCheckLinkLatency=fgVWLHealthCheckLinkLatency, fgt500D=fgt500D, fgFwPolStatsTable=fgFwPolStatsTable, fgFwUserIndex=fgFwUserIndex, fgWcWlanLocalBridging=fgWcWlanLocalBridging, fgDataMemUsage=fgDataMemUsage, fgExplicitProxyArchUnsupported=fgExplicitProxyArchUnsupported, fgVdEntHaState=fgVdEntHaState, fwf20C=fwf20C, fgNotificationGroup=fgNotificationGroup, fgVpnSslStatsActiveTunnels=fgVpnSslStatsActiveTunnels, fgWcWtpSessionEntry=fgWcWtpSessionEntry, fgConfigSerial=fgConfigSerial, fgt400A=fgt400A, fgAppSuIndex=fgAppSuIndex, fgSwDevicePlatform=fgSwDevicePlatform, fgSysInfoAdvMem=fgSysInfoAdvMem, fgUsbModemInfoGroup=fgUsbModemInfoGroup, fwf30E=fwf30E, fgWcStaGroup=fgWcStaGroup, fgSIAdvSesExpCount=fgSIAdvSesExpCount, fgt81F=fgt81F, fgApIMAPMemUsage=fgApIMAPMemUsage, fgFwGtp=fgFwGtp, fgVpn2TunSelDstEndIp=fgVpn2TunSelDstEndIp, fgProcessorFnNP4=fgProcessorFnNP4, fgWcWtpProfileRadioChannel=fgWcWtpProfileRadioChannel, fgIntfObjectGroup=fgIntfObjectGroup, fgExplicitProxyBannedWords=fgExplicitProxyBannedWords, fgAppIMStatsTable=fgAppIMStatsTable, fgSysNpuSesRate30=fgSysNpuSesRate30, fgVpnDialupLifetime=fgVpnDialupLifetime, fw6XMB=fw6XMB, fwf40C=fwf40C, fgt60D=fgt60D, fgVWLHealthCheckLinkTable=fgVWLHealthCheckLinkTable, fgVpnDialupSrcBegin=fgVpnDialupSrcBegin, fgVpn2DialupDstEnd=fgVpn2DialupDstEnd, fgHaStatsSyncDatimeSucc=fgHaStatsSyncDatimeSucc, fgIntfBcCfgIfEstDownBandwidth=fgIntfBcCfgIfEstDownBandwidth, fgvmev=fgvmev, fgt30B=fgt30B, fgWanOptWanOutTraffic=fgWanOptWanOutTraffic, fgt1000D=fgt1000D, fgIntfBcCfgSpolClassName=fgIntfBcCfgSpolClassName, fgLinkMonitorLatency=fgLinkMonitorLatency, fgFwUserTables=fgFwUserTables, FgFwUserAuthType=FgFwUserAuthType, fdLteProfIpFamily=fdLteProfIpFamily, fgAvHTTPVirusDetected=fgAvHTTPVirusDetected, fgTxBytesOK=fgTxBytesOK, fgConfigLastChangeTime=fgConfigLastChangeTime, fgFwPolByteCount=fgFwPolByteCount, fgWcWtpSessionWtpSessionUpTime=fgWcWtpSessionWtpSessionUpTime, fgDpdkEngVnpUsage=fgDpdkEngVnpUsage, fgWcWtpSessionRadioWtpId=fgWcWtpSessionRadioWtpId, fgFwGtpRtStatsCPkts=fgFwGtpRtStatsCPkts, fgWanOptDiskStatsTable=fgWanOptDiskStatsTable, fgWcWtpConfigWtpName=fgWcWtpConfigWtpName, fgAdminTables=fgAdminTables, fgUsbportProduct=fgUsbportProduct, fgIntfBcCfgSproTable=fgIntfBcCfgSproTable, fgAntivirusObjectGroup=fgAntivirusObjectGroup, fgProcessorSysUsage=fgProcessorSysUsage, fgWcWtpProfileRadioTxPowerLevel=fgWcWtpProfileRadioTxPowerLevel, fgWcWtpProfileRadioBeaconInterval=fgWcWtpProfileRadioBeaconInterval, fgMdmFsn=fgMdmFsn, fgt81EPOE=fgt81EPOE, fgMdmInfoEntry=fgMdmInfoEntry, fgIntfVlanHbEntState=fgIntfVlanHbEntState, fgIntfBcCfgSpolComment=fgIntfBcCfgSpolComment, fgWcWlanMeshBackhaul=fgWcWlanMeshBackhaul, fgVpnTunEntRemGwyIp=fgVpnTunEntRemGwyIp, fgProcessorTypes=fgProcessorTypes, fgt100D=fgt100D, fw81FD=fw81FD, fgApSIPOtherReq=fgApSIPOtherReq, fgMdmHwRevision=fgMdmHwRevision, fgWanOptHistPeriod=fgWanOptHistPeriod, fgWanOptObjectGroup=fgWanOptObjectGroup, fgtARM64OCI=fgtARM64OCI, fgLinkMonitorBandwidthOut=fgLinkMonitorBandwidthOut, fgFwGtpRtStatsCDropped11=fgFwGtpRtStatsCDropped11, fgSlaProbeClientEntry=fgSlaProbeClientEntry, fgTrapPoolUsage=fgTrapPoolUsage, fgIntfEntEstUpBandwidth=fgIntfEntEstUpBandwidth, fgFwGtpRtStatsCDropped6=fgFwGtpRtStatsCDropped6, fgVpn2DialupDstEndType=fgVpn2DialupDstEndType, fgWebCacheDiskStatsEntry=fgWebCacheDiskStatsEntry, fgVpnTunEntLifeSecs=fgVpnTunEntLifeSecs, fgWcWlanBroadcastSsid=fgWcWlanBroadcastSsid, fgSwPortAllowedVlan=fgSwPortAllowedVlan, fgVWLHealthCheckLinkPacketSend=fgVWLHealthCheckLinkPacketSend, fgIntfBcCfgIfOutBandwidth=fgIntfBcCfgIfOutBandwidth)
mibBuilder.exportSymbols("FORTINET-FORTIGATE-MIB", fgSlaProbeClientGroup=fgSlaProbeClientGroup, fgNPUSessionTblSize=fgNPUSessionTblSize, fdLteIpv6Addr=fdLteIpv6Addr, fgFwGtpRtStatsDDroppedGtpInGtp=fgFwGtpRtStatsDDroppedGtpInGtp, fgt3HD=fgt3HD, fgExplicitProxyArchEncrypted=fgExplicitProxyArchEncrypted, fgt300=fgt300, fgt60M=fgt60M, fgFwAuthIpv6UserTable=fgFwAuthIpv6UserTable, fgIntfEntVdom=fgIntfEntVdom, fgSIAdvMemLeaveKerConsThrsh=fgSIAdvMemLeaveKerConsThrsh, fdLteProfType=fdLteProfType, fgIntfEntEstDownBandwidth=fgIntfEntEstDownBandwidth, fgt30E=fgt30E, fgLongitude=fgLongitude, fgSystemInfo=fgSystemInfo, fgInetProto=fgInetProto, fgExplicitProxyFilterStatsTable=fgExplicitProxyFilterStatsTable, fgt140EP=fgt140EP, fgWfActiveXBlocked=fgWfActiveXBlocked, fgWcStaRadioId=fgWcStaRadioId, fgFwGtpRtStatsDDroppedMsgRateLimit=fgFwGtpRtStatsDDroppedMsgRateLimit, fgVpnTunnelUpCount=fgVpnTunnelUpCount, fgFwUserEntry=fgFwUserEntry, fgGsm=fgGsm, fgFwPolLastUsed=fgFwPolLastUsed, fgHdrRssi=fgHdrRssi, fgSwPortPOEStatus=fgSwPortPOEStatus, fgt90E=fgt90E, fgVWLHealthCheckLinkMOS=fgVWLHealthCheckLinkMOS, fgVpn2TunLocGwyIp=fgVpn2TunLocGwyIp, fgSgWbTables=fgSgWbTables, fgFwIppStatsTotalSessions=fgFwIppStatsTotalSessions, fgFwAuthIpv6UserVdom=fgFwAuthIpv6UserVdom, fgSIAdvSesClashCount=fgSIAdvSesClashCount, fgvm16=fgvm16, fgr60F=fgr60F, fgVpn2TunInOctets=fgVpn2TunInOctets, fgWanOptWanInTraffic=fgWanOptWanInTraffic, fg900D=fg900D, fgTrapFazDisconnect=fgTrapFazDisconnect, fnFortiGateMib=fnFortiGateMib, fgGpsInfoTable=fgGpsInfoTable, fgSessMdmEntIndex=fgSessMdmEntIndex, fgFwAuthIpv6UserNumber=fgFwAuthIpv6UserNumber, fgSw=fgSw, fgLinkMonitorName=fgLinkMonitorName, fgDNSProxyStatsUdpRetrans=fgDNSProxyStatsUdpRetrans, fgTrapHaMemberDown=fgTrapHaMemberDown, fgFwGtpStatsIeWlEntry=fgFwGtpStatsIeWlEntry, fgIntfVlanPhyName=fgIntfVlanPhyName, fgWcStaBandwidthTx=fgWcStaBandwidthTx, fgAdminObjectGroup=fgAdminObjectGroup, fgFwIppStatsTotalPBAs=fgFwIppStatsTotalPBAs, fgIpsTables=fgIpsTables, fgWanOptTrafficStatsEntry=fgWanOptTrafficStatsEntry, fgUsbportRevision=fgUsbportRevision, fgAppDNSProxy=fgAppDNSProxy, fgIntfBcTable=fgIntfBcTable, fgtVM64VMX=fgtVM64VMX, fgVWLHealthCheckLinkUsedBandwidthOut=fgVWLHealthCheckLinkUsedBandwidthOut, fgVWLHealthCheckLinkVdom=fgVWLHealthCheckLinkVdom, fgLinkMonitorPacketRecv=fgLinkMonitorPacketRecv, fgVdEntMemUsage=fgVdEntMemUsage, fdLteIpv6GwAddr=fdLteIpv6GwAddr, fgApFTPMaxConnections=fgApFTPMaxConnections, fgWcWtpConfigRadioAutoTxPowerLow=fgWcWtpConfigRadioAutoTxPowerLow, fgVpnDialupDstAddr=fgVpnDialupDstAddr, fgVpn2DialupTable=fgVpn2DialupTable, fgIntfVlanHbEntSerial=fgIntfVlanHbEntSerial, fgVdEntName=fgVdEntName, fgr90D=fgr90D, fgtVM64SVM=fgtVM64SVM, fwf60EJ=fwf60EJ, fgProcessorCount=fgProcessorCount, fgt401E=fgt401E, fg300MibCompliance=fg300MibCompliance, fdLteIpv4NetMask=fdLteIpv4NetMask, fgDeviceMacAddress=fgDeviceMacAddress, fgt200DP=fgt200DP, fgAppProxyHTTP=fgAppProxyHTTP, fgFwGtpStatsProfile=fgFwGtpStatsProfile, fgFwIppStatsRscTCP=fgFwIppStatsRscTCP, fgWcStaVlanId=fgWcStaVlanId, fgExplicitProxyArchBomb=fgExplicitProxyArchBomb, fgApIMAPStatsEntry=fgApIMAPStatsEntry, fgt6000F=fgt6000F, fgVWLHealthCheckLinkMOSCodec=fgVWLHealthCheckLinkMOSCodec, fgt61F=fgt61F, fgModel=fgModel, fgHighAvailabilityObjectGroup=fgHighAvailabilityObjectGroup, fgDisksObjectGroup=fgDisksObjectGroup, fgTrapAvFragmented=fgTrapAvFragmented, fgt61E=fgt61E, fgWcWtpSessionWtpDaemonUpTime=fgWcWtpSessionWtpDaemonUpTime, fgFwGtpRtStatsCDropped15=fgFwGtpRtStatsCDropped15, fgWcWtpSessionWtpModelNumber=fgWcWtpSessionWtpModelNumber, fgSlaProbeClientMaxJitterDS=fgSlaProbeClientMaxJitterDS, fgIntfBcQBDrops=fgIntfBcQBDrops, fgWcStaIdle=fgWcStaIdle, fgSysUpTime=fgSysUpTime, fgFwGtpStatsEchoRequest=fgFwGtpStatsEchoRequest, fgIntfVlanHbCount=fgIntfVlanHbCount, fgVpnSslStatsEntry=fgVpnSslStatsEntry, fgVpnSslState=fgVpnSslState, fgMdmCellId=fgMdmCellId, ffwVM64=ffwVM64, fgSwDeviceId=fgSwDeviceId, fgFwPolByteCountHc=fgFwPolByteCountHc, fgIpSessStatsEntry=fgIpSessStatsEntry, fg20CA=fg20CA, fgProcessorModuleCount=fgProcessorModuleCount, fgAvPOP3VirusDetected=fgAvPOP3VirusDetected, fgLicVersionNumber=fgLicVersionNumber, fgSlaProbeClientAvgJitter=fgSlaProbeClientAvgJitter, fgFwGtpRtStatsCDropped0=fgFwGtpRtStatsCDropped0, fgDpdkEngTable=fgDpdkEngTable, fgWcStaMacAddress=fgWcStaMacAddress, fgt60E=fgt60E, fgt101E=fgt101E, fgIp6SessStatsTable=fgIp6SessStatsTable, fgSlaProbeClientMinJitterSD=fgSlaProbeClientMinJitterSD, fgLinkMonitorOutofSeq=fgLinkMonitorOutofSeq, ffvmbb=ffvmbb, fgSlaProbeClientMinLatencySD=fgSlaProbeClientMinLatencySD, FgWcWlanAuthenticationType=FgWcWlanAuthenticationType, fgWcWtpSessionVapWtpId=fgWcWtpSessionVapWtpId, fgSwDeviceFlag=fgSwDeviceFlag, fgExplicitProxyUsers=fgExplicitProxyUsers, fg60EI=fg60EI, fgt200F=fgt200F, fgWfHTTPSBlocked=fgWfHTTPSBlocked, fgVpnSslTunnelEntry=fgVpnSslTunnelEntry, fgDatausageInfoTable=fgDatausageInfoTable, fgWcWlanTable=fgWcWlanTable, fgFmTrapConfChange=fgFmTrapConfChange, fgFwIppStatsType=fgFwIppStatsType, fgSwPortName=fgSwPortName, fgWcWtpProfileRadioRadioId=fgWcWtpProfileRadioRadioId, fgDhcpTrapMessage=fgDhcpTrapMessage, fgSwPortStatus=fgSwPortStatus, fgIpsAnomalyDetections=fgIpsAnomalyDetections, fgAppProxyIMAP=fgAppProxyIMAP, fgDpdkEngToCpu=fgDpdkEngToCpu, fgFwIppStatsPortEnd=fgFwIppStatsPortEnd, fgAppScanUnit=fgAppScanUnit, fgVpnTunEntLocGwyPort=fgVpnTunEntLocGwyPort, fgFwUserName=fgFwUserName, fgt1000A=fgt1000A, fgWcWtpSessionRadioMode=fgWcWtpSessionRadioMode, fgFc=fgFc, fgVpn2DialupGatewayType=fgVpn2DialupGatewayType, fgWcWtpProfileRadioDtimPeriod=fgWcWtpProfileRadioDtimPeriod, fgApSIPClientReg=fgApSIPClientReg, fgr30D=fgr30D, fgt1000ALENC=fgt1000ALENC, fgt3980E=fgt3980E, fgChassisTrapMessage=fgChassisTrapMessage, fgt80F=fgt80F, fgLinkMonitorGroup=fgLinkMonitorGroup, fgt3600E=fgt3600E, fgtVM64ALI=fgtVM64ALI, fgIntf=fgIntf, fgApSIPServices=fgApSIPServices, fgFwGtpRtStatsCDropped8=fgFwGtpRtStatsCDropped8, fgt224B=fgt224B, fgMdmImei=fgMdmImei, fgSystemObjectGroup=fgSystemObjectGroup, fgVpnSslTunnelIp=fgVpnSslTunnelIp, fgApSIPMemUsage=fgApSIPMemUsage, fgProcModSACount=fgProcModSACount, fgFwIppStatsUdpSessions=fgFwIppStatsUdpSessions, fgt3810A=fgt3810A, fgVpn2DialupTimeout=fgVpn2DialupTimeout, fgLicContractDesc=fgLicContractDesc, fgIpsTrapSigMsg=fgIpsTrapSigMsg, fgProcModType=fgProcModType, fgAppIMConnBlocked=fgAppIMConnBlocked, fgApIMAPSpamDetected=fgApIMAPSpamDetected, fgLinkMonitorJitter=fgLinkMonitorJitter, fgIpsStatsEntry=fgIpsStatsEntry, ffwVM64KVm=ffwVM64KVm, fgSimCountry=fgSimCountry, fgWanOptDiskStatsEntry=fgWanOptDiskStatsEntry, fgExplicitProxyAllowedURLs=fgExplicitProxyAllowedURLs, fgFwGtpRtStatsCDropped14=fgFwGtpRtStatsCDropped14, fgWanOptLANBytesOut=fgWanOptLANBytesOut, fgHaPriority=fgHaPriority, fgSIAdvSesAcceptQFCount=fgSIAdvSesAcceptQFCount, fgLogGroup=fgLogGroup, fgApSMTPStatsEntry=fgApSMTPStatsEntry, fgMdmSku=fgMdmSku, fgMdmMsisdn=fgMdmMsisdn, fgWebCacheRAMUsage=fgWebCacheRAMUsage, fgProcModProcessorCount=fgProcModProcessorCount, fgFwIppTrapPoolProto=fgFwIppTrapPoolProto, fgt80D=fgt80D, fgVWLHealthCheckLinkGroup=fgVWLHealthCheckLinkGroup, fgExplicitProxyScriptStatsEntry=fgExplicitProxyScriptStatsEntry, fgApSMTPSpamDetected=fgApSMTPSpamDetected, fgMdmPrlVer=fgMdmPrlVer, fgApNNTPUpTime=fgApNNTPUpTime, fgFwIppStatsExpiringPBAs=fgFwIppStatsExpiringPBAs, fgVWLHealthCheckLinkBandwidthOut=fgVWLHealthCheckLinkBandwidthOut, fgVpnSslTunnelVdom=fgVpnSslTunnelVdom, fgTxPacksDrop=fgTxPacksDrop, fgHighAvailability=fgHighAvailability, fgFwGtpRtStatsCRejected=fgFwGtpRtStatsCRejected, fgRxPacksErr=fgRxPacksErr, fgIpSessProto=fgIpSessProto, fgIntfVlanID=fgIntfVlanID, fgWebCacheDiskLimit=fgWebCacheDiskLimit, fgVWLHealthCheckLinkNumber=fgVWLHealthCheckLinkNumber, fgApHTTPConnections=fgApHTTPConnections, fgt300C=fgt300C, FgSgWorkerBladeState=FgSgWorkerBladeState, fgFwAuthIpv4UserTable=fgFwAuthIpv4UserTable, fgt601E=fgt601E, fgFwGtpRtStatsDForwarded=fgFwGtpRtStatsDForwarded, fgFgWfHTTPSAllowed=fgFgWfHTTPSAllowed, fgFgWfHTTPExamined=fgFgWfHTTPExamined, fgMdmActState=fgMdmActState, FgHaStatsSyncStatusType=FgHaStatsSyncStatusType, fgGpsInfoEntry=fgGpsInfoEntry, fgApSIPCallHandling=fgApSIPCallHandling, fgDhcpTables=fgDhcpTables, fgWcInfoStationCapacity=fgWcInfoStationCapacity, fdLteProfApn=fdLteProfApn, fgUsbModemStatus=fgUsbModemStatus, fgVpnDialupIndex=fgVpnDialupIndex, fgFwHsPolByteCount=fgFwHsPolByteCount, fgt200E=fgt200E, fgIntfBcCfgSentClassName=fgIntfBcCfgSentClassName, fgApNNTPStatsTable=fgApNNTPStatsTable, fgt52E=fgt52E, fgt600F=fgt600F, fgvm4v=fgvm4v, fgSysSesRate60=fgSysSesRate60, fgAdmin=fgAdmin, fw20CA=fw20CA, fgTrapFcSwDown=fgTrapFcSwDown, fgVpnDialupSrcEnd=fgVpnDialupSrcEnd, fgAvNNTPVirusBlocked=fgAvNNTPVirusBlocked, fgExplicitProxyScanStatsEntry=fgExplicitProxyScanStatsEntry, fgt800=fgt800, fgFwPolStatsEntry=fgFwPolStatsEntry, fgvm00=fgvm00, fgFwGtpStatsBearer=fgFwGtpStatsBearer, fgIpSessFromPort=fgIpSessFromPort, fgVpn2DialupPhase1Name=fgVpn2DialupPhase1Name, fgSysNpuSesRate10=fgSysNpuSesRate10, fgtsoc3=fgtsoc3, fgWebfilter=fgWebfilter, fgSysVersionIpsEt=fgSysVersionIpsEt)
mibBuilder.exportSymbols("FORTINET-FORTIGATE-MIB", fgFwGtpRtStatsBPkts=fgFwGtpRtStatsBPkts, fgVpn2TunLocGwyIpType=fgVpn2TunLocGwyIpType, fgt310B=fgt310B, fgVpn2TunTable=fgVpn2TunTable, fgVpnTunEntSelectorSrcBeginIp=fgVpnTunEntSelectorSrcBeginIp, fgMdmVendor=fgMdmVendor, fgIp6SessNumber=fgIp6SessNumber, fgAppFnbamStatsTotalLdapFails=fgAppFnbamStatsTotalLdapFails, fgt70F=fgt70F, fgVdEntCpuUsage=fgVdEntCpuUsage, fgProcModOther=fgProcModOther, fgWcWtpConfigRadioApScan=fgWcWtpConfigRadioApScan, fgSignalInfoEntry=fgSignalInfoEntry, fgProcessorFnNP7=fgProcessorFnNP7, fgtVM64GCPONDEMAND=fgtVM64GCPONDEMAND, fgIpsInfo=fgIpsInfo, FgWcWtpRadioMode=FgWcWtpRadioMode, fgExplicitProxyStatsTable=fgExplicitProxyStatsTable, fgHaInfo=fgHaInfo, fgVWLHealthCheckLinkSeq=fgVWLHealthCheckLinkSeq, fgSIAdvLicenseDetails=fgSIAdvLicenseDetails, fgt98DPOE=fgt98DPOE, fgMemCacheMisses=fgMemCacheMisses, fgExplicitProxyStatsEntry=fgExplicitProxyStatsEntry, fgtVM64KVm=fgtVM64KVm, fgVpnDialupGateway=fgVpnDialupGateway, fgt3301E=fgt3301E, fgr60FI=fgr60FI, fgFwAuthIpv6UserType=fgFwAuthIpv6UserType, fgSessInfoEntry=fgSessInfoEntry, fgWebCacheUpTime=fgWebCacheUpTime, fgtVM64XEN=fgtVM64XEN, fgDpdkEngEntIndex=fgDpdkEngEntIndex, fgApPOP3StatsTable=fgApPOP3StatsTable, fgLastCallRxBytesOK=fgLastCallRxBytesOK, fgVpn2TunLifeSecs=fgVpn2TunLifeSecs, fgFwIppStatsFreePBAs=fgFwIppStatsFreePBAs, fgUsbportTable=fgUsbportTable, fgt1801F=fgt1801F, fwf90DPOE=fwf90DPOE, fgMdmModel=fgMdmModel, fgTrapSlbc=fgTrapSlbc, fgIntfBcCfgSentEntry=fgIntfBcCfgSentEntry, fgTrapIpsSignature=fgTrapIpsSignature, fwf81CM=fwf81CM, fgtvmx=fgtvmx, fgProcessorEntry=fgProcessorEntry, fgFwGtpStatsFteid=fgFwGtpStatsFteid, fgIp6SessStatsEntry=fgIp6SessStatsEntry, fgIpsHighSevDetections=fgIpsHighSevDetections, fgIntfBcCfgSpolSrcaddr=fgIntfBcCfgSpolSrcaddr, fgAppIMStatsEntry=fgAppIMStatsEntry, fgWcWtpProfileRadioWidsProfile=fgWcWtpProfileRadioWidsProfile, fgWanOptWANBytesIn=fgWanOptWANBytesIn, fgt5001FA2=fgt5001FA2, fgWcWtpSessionConnectionState=fgWcWtpSessionConnectionState, fgAppSuFileScanned=fgAppSuFileScanned, fgAvOversizedDetected=fgAvOversizedDetected, fgvm8v=fgvm8v, fgVWLHealthCheckLinkName=fgVWLHealthCheckLinkName, fgSysLowMemUsage=fgSysLowMemUsage, fgFwAddrDynEmsTable=fgFwAddrDynEmsTable, fgFwUserVdom=fgFwUserVdom, fgAvSMBVirusBlocked=fgAvSMBVirusBlocked, fgWcStaIpAddress=fgWcStaIpAddress, fgSwitchPortObjectGroup=fgSwitchPortObjectGroup, fgWanOptDiskMisses=fgWanOptDiskMisses, fgLogDeviceTable=fgLogDeviceTable, fgFcTrapObjects=fgFcTrapObjects, fgWcWtpProfileDataChannelDtlsPolicy=fgWcWtpProfileDataChannelDtlsPolicy, fgExplicitProxyInfo=fgExplicitProxyInfo, fgWcWtpProfileRadioBand=fgWcWtpProfileRadioBand, fgvm02=fgvm02, fgHaStatsIdsCount=fgHaStatsIdsCount, fgSysMgmtVdom=fgSysMgmtVdom, fgFwHsPolStatsEntry=fgFwHsPolStatsEntry, fgWcStaWlan=fgWcStaWlan, fgt201F=fgt201F, fgSoftware=fgSoftware, fgt82C=fgt82C, fgSysCpuUsage=fgSysCpuUsage, fgFwAuthIpv4UserVdom=fgFwAuthIpv4UserVdom, fgVpn2TunIndex=fgVpn2TunIndex, fgLicVersions=fgLicVersions, fgWcApSerial=fgWcApSerial, FgOpMode=FgOpMode, fgVWLHealthCheckLinkUsedBandwidthBi=fgVWLHealthCheckLinkUsedBandwidthBi, fgIps=fgIps, fgLogDeviceNumber=fgLogDeviceNumber, fgt1200D=fgt1200D, fgApIMAPReqProcessed=fgApIMAPReqProcessed, fgv16v=fgv16v, fgt1000C=fgt1000C, fgSysNpuSes6Rate60=fgSysNpuSes6Rate60, fgFwAuthIpv4UserIndex=fgFwAuthIpv4UserIndex, fgFwGtpRtStatsCForwarded=fgFwGtpRtStatsCForwarded, fgt501E=fgt501E, fgTrafficInfoEntry=fgTrafficInfoEntry, fgVpnSslTunnelUserName=fgVpnSslTunnelUserName, FgWcWtpRadioChannelNumber=FgWcWtpRadioChannelNumber, fgt51B=fgt51B, fgFwIppStatsGroupName=fgFwIppStatsGroupName, fgApIMAPConnections=fgApIMAPConnections, fgWebCacheDiskStatsTable=fgWebCacheDiskStatsTable, fgNPUTables=fgNPUTables, fgt1500DT=fgt1500DT, fgWcStaEntry=fgWcStaEntry, fgFwAuthUserInfoVdom=fgFwAuthUserInfoVdom, fgTrapWcApUp=fgTrapWcApUp, fgt5001=fgt5001, fdLteIfName=fdLteIfName, fgTrapAvOversizePass=fgTrapAvOversizePass, fgApHTTPMaxConnections=fgApHTTPMaxConnections, fgWcWtpSessionVapStationCount=fgWcWtpSessionVapStationCount, fgTrapFaz=fgTrapFaz, fdLteIpv6PriDns=fdLteIpv6PriDns, fgSlaProbeClientPktloss=fgSlaProbeClientPktloss, fgt5002FB2=fgt5002FB2, fgVpn2DialupDstBegin=fgVpn2DialupDstBegin, fgVpnTunEntSelectorDstPort=fgVpnTunEntSelectorDstPort, fgApIMUpTime=fgApIMUpTime, fgIpSessStatsTable=fgIpSessStatsTable, fgAvPOP3VirusBlocked=fgAvPOP3VirusBlocked, fgVpn2TunRemGwyPort=fgVpn2TunRemGwyPort, fgTrapHaSwitch=fgTrapHaSwitch, fgIntfVrrps=fgIntfVrrps, fgSysVersionAv=fgSysVersionAv, fgProcModSessionCount=fgProcModSessionCount, fgPerCpuHighDetails=fgPerCpuHighDetails, fgt81FPOE=fgt81FPOE, fgVpn2TunOutOctets=fgVpn2TunOutOctets, fgt3300E=fgt3300E, fgVWLHealthCheckLinkID=fgVWLHealthCheckLinkID, fgt60B=fgt60B, fgVpnTunEntPhase2Index=fgVpnTunEntPhase2Index, fgAvSMTPVirusDetected=fgAvSMTPVirusDetected, fgSlaProbeClientMaxJitter=fgSlaProbeClientMaxJitter, fgApPOP3SpamDetected=fgApPOP3SpamDetected, fgSlaProbeClientPktlossSD=fgSlaProbeClientPktlossSD, fgInternalModemTrafficInfoGroup=fgInternalModemTrafficInfoGroup, fgt3100D=fgt3100D, fgWanOptLanOutTraffic=fgWanOptLanOutTraffic, fgAvHTTPVirusBlocked=fgAvHTTPVirusBlocked, fgWcStaWtpId=fgWcStaWtpId, fw41FI=fw41FI, fgFwGtpRtStatsCDropped21=fgFwGtpRtStatsCDropped21, fgWcWtpSessionWtpIpAddressType=fgWcWtpSessionWtpIpAddressType, fgApFTPUpTime=fgApFTPUpTime, fgIntfBcCfgTables=fgIntfBcCfgTables, fgWcStaSignal=fgWcStaSignal, fgNPUEntIndex=fgNPUEntIndex, fgFwIppTrapObjects=fgFwIppTrapObjects, fgFwGtpStatsNoipPolicy=fgFwGtpStatsNoipPolicy, fgSessInfoTable=fgSessInfoTable, fdLteIpv4Addr=fdLteIpv4Addr, PYSNMP_MODULE_ID=fnFortiGateMib, FgWcWlanSecurityType=FgWcWlanSecurityType, fgLinkMonitorBandwidthBi=fgLinkMonitorBandwidthBi, fgVpnDialupOutOctets=fgVpnDialupOutOctets, fgFwGtpRtStatsDDroppedNoState=fgFwGtpRtStatsDDroppedNoState, fgAvIMVirusBlocked=fgAvIMVirusBlocked, fgWcWtpConfigRadioEnable=fgWcWtpConfigRadioEnable, fgApPOP3MaxConnections=fgApPOP3MaxConnections, fgExplicitProxyFilteredApplets=fgExplicitProxyFilteredApplets, fsw5203B=fsw5203B, fgHaAutoSync=fgHaAutoSync, fgWcStaRadioType=fgWcStaRadioType, fgSimInfoEntry=fgSimInfoEntry, fgFwPolTables=fgFwPolTables, fgAppVoIPStatsTable=fgAppVoIPStatsTable, fgt311B=fgt311B, fgWebfilterStatsEntry=fgWebfilterStatsEntry, fgExplicitProxyFilteredActiveX=fgExplicitProxyFilteredActiveX, fdLteProfId=fdLteProfId, fgChassisTrapObjects=fgChassisTrapObjects, fgRxPacksOK=fgRxPacksOK, fgVpnTunEntSelectorDstBeginIp=fgVpnTunEntSelectorDstBeginIp, fgSysMemUsage=fgSysMemUsage, fgSlaProbeClientAvgLatency=fgSlaProbeClientAvgLatency, fgWcWtpSessionRadioCountryCode=fgWcWtpSessionRadioCountryCode, fgRxBytesOK=fgRxBytesOK, fgLastCallTxBytesOK=fgLastCallTxBytesOK, fgAppP2PConnBlocked=fgAppP2PConnBlocked, fgApNNTPConnections=fgApNNTPConnections, fgDeviceObjectGroup=fgDeviceObjectGroup, fgProcessorIntel=fgProcessorIntel, fgtVM64IBM=fgtVM64IBM, fgVpn2TunSelDstBeginIp=fgVpn2TunSelDstBeginIp, fgDpdkEngsObjectGroup=fgDpdkEngsObjectGroup, fgFwUserState=fgFwUserState, fgVpnSslStatsMaxUsers=fgVpnSslStatsMaxUsers, fgTrapPrefix=fgTrapPrefix, fgProcessorPktDroppedCount=fgProcessorPktDroppedCount, fgDNSProxyStatsUdpRatingCacheHit=fgDNSProxyStatsUdpRatingCacheHit, FgHaMode=FgHaMode, fgHwSensorCount=fgHwSensorCount, fgSlaProbeClientNumber=fgSlaProbeClientNumber, fgWcWlanEntry=fgWcWlanEntry, fgWcWtpConfigWtpAdmin=fgWcWtpConfigWtpAdmin, fw502R=fw502R, FgWcWtpChannelWidthType=FgWcWtpChannelWidthType, fgFwGtpStatsTunnel=fgFwGtpStatsTunnel, fgAvIMAPVirusDetected=fgAvIMAPVirusDetected, fdLteIpv6PrefLen=fdLteIpv6PrefLen, fgTrapHaHBFail=fgTrapHaHBFail, fgt5005FA2=fgt5005FA2, fgFgWfHTTPSBlocked=fgFgWfHTTPSBlocked, fgSlaProbeClientAvgLatencyDS=fgSlaProbeClientAvgLatencyDS, fgWcWtpSessionWtpProfileName=fgWcWtpSessionWtpProfileName, fgSysMemCapacity=fgSysMemCapacity, fgWcWtpConfigWtpProfile=fgWcWtpConfigWtpProfile, fgt30D=fgt30D, fgWfHTTPSURLBlocked=fgWfHTTPSURLBlocked, fgInternalLTEModemsInfo=fgInternalLTEModemsInfo, fgVWLHealthCheckLinkEntry=fgVWLHealthCheckLinkEntry, fgObsolteMIBCompliance=fgObsolteMIBCompliance, fgHaStatsSerial=fgHaStatsSerial, fgDhcpLeaseUsage=fgDhcpLeaseUsage, fgServerLoadBalanceObjectGroup=fgServerLoadBalanceObjectGroup, fgLicContractCount=fgLicContractCount, fgSwDeviceEntry=fgSwDeviceEntry, fgt301E=fgt301E, fgAvMAPIVirusDetected=fgAvMAPIVirusDetected, fgWfAppletBlocked=fgWfAppletBlocked, fgProcessorModuleEntry=fgProcessorModuleEntry, FgHaState=FgHaState, fgHwSensorEntValue=fgHwSensorEntValue, fgIntfVlanHbEntIndex=fgIntfVlanHbEntIndex, fgIpsIntrusionsBlocked=fgIpsIntrusionsBlocked, fgTrapFcSwUp=fgTrapFcSwUp, fgTdma=fgTdma, fgAppIMFileTxBlocked=fgAppIMFileTxBlocked, fw60CA=fw60CA, fgtARM64KVM=fgtARM64KVM, fgVWLHealthCheckLinkIfName=fgVWLHealthCheckLinkIfName, fgWcWtpSessionRadioStationCount=fgWcWtpSessionRadioStationCount, fgVpnSslTunnelIndex=fgVpnSslTunnelIndex, fgSysSes6Rate1=fgSysSes6Rate1, fgt200B=fgt200B, fgt70D=fgt70D, fgt60CSFP=fgt60CSFP, fgt200BPOE=fgt200BPOE, fgIntfBcCfgIfEstUpBandwidth=fgIntfBcCfgIfEstUpBandwidth, fgRxPacksDrop=fgRxPacksDrop, fgt1240B=fgt1240B, fgAvVirusDetected=fgAvVirusDetected, fgWanOptStatsTable=fgWanOptStatsTable, fgVpn2DialupSrcEnd=fgVpn2DialupSrcEnd, fgIntfVlanName=fgIntfVlanName, fgExplicitProxyFilterStatsEntry=fgExplicitProxyFilterStatsEntry, fgExplicitProxyFilteredOthScript=fgExplicitProxyFilteredOthScript, fgSlaProbeClientOutofSeqSD=fgSlaProbeClientOutofSeqSD, fgAppProxySIP=fgAppProxySIP, fgSgWbFabricLink=fgSgWbFabricLink)
mibBuilder.exportSymbols("FORTINET-FORTIGATE-MIB", fgWanOptTunnels=fgWanOptTunnels, fgSysSes6Rate60=fgSysSes6Rate60, fgWcWtpConfigWtpId=fgWcWtpConfigWtpId, fgHwSensorEntIndex=fgHwSensorEntIndex, fwf80F=fwf80F, fgt500=fgt500, fgHaSystemMode=fgHaSystemMode, fgIntfVlanHbEntry=fgIntfVlanHbEntry, fgHaStatsNetUsage=fgHaStatsNetUsage, fgProcModIndex=fgProcModIndex, fgFwGtpRtStatsBDroppedMalMsg=fgFwGtpRtStatsBDroppedMalMsg, fgIntfBcCfgSproClassNum=fgIntfBcCfgSproClassNum, fgExplicitProxyFilteredJScript=fgExplicitProxyFilteredJScript, fdLteNetType=fdLteNetType, fgInternalModemSigInfoGroup=fgInternalModemSigInfoGroup, fgVpnSslStatsMaxWebSessions=fgVpnSslStatsMaxWebSessions, fgSlaProbeClient=fgSlaProbeClient, fgSwDeviceName=fgSwDeviceName, fgt71F=fgt71F, fgSlaProbeClientAvgJitterSD=fgSlaProbeClientAvgJitterSD, fgSIAdvSesEphemeralCount=fgSIAdvSesEphemeralCount, fgWcWlanVlanId=fgWcWlanVlanId, fgt800C=fgt800C, fgSwDeviceSerialNum=fgSwDeviceSerialNum, fgWebfilterInfo=fgWebfilterInfo, fgt90D=fgt90D, fgt2201E=fgt2201E, fgApIMAPMaxConnections=fgApIMAPMaxConnections, fgVdNumber=fgVdNumber, fgSysSesRate1=fgSysSesRate1, fgTrapDeviceNew=fgTrapDeviceNew, fgVirtualDomain=fgVirtualDomain, fgFwIppStatsName=fgFwIppStatsName, fgIpSessToPort=fgIpSessToPort, fgVpnTunEntLocGwyIp=fgVpnTunEntLocGwyIp, fgt91E=fgt91E, fgt1500D=fgt1500D, fgAvSMBVirusDetected=fgAvSMBVirusDetected, fgVpnTunTable=fgVpnTunTable, fgFirewallObjectGroup=fgFirewallObjectGroup, fgDhcpTable=fgDhcpTable, fgVpnTunEntPhase2Name=fgVpnTunEntPhase2Name, fgVWLHealthCheckLinkBandwidthBi=fgVWLHealthCheckLinkBandwidthBi, fdLteLinkProto=fdLteLinkProto, fgt3700DX=fgt3700DX, fgUsbportPlugged=fgUsbportPlugged, fgWcWtpConfigRadioTxPowerLevel=fgWcWtpConfigRadioTxPowerLevel, fgNPUDrvDriftSum=fgNPUDrvDriftSum, fgChassisSlotId=fgChassisSlotId, fgFwAuthIpv6UserIndex=fgFwAuthIpv6UserIndex, fgVpn2TunSelSrcBeginIp=fgVpn2TunSelSrcBeginIp, fgt620D=fgt620D, fgIntfBcCfgSproType=fgIntfBcCfgSproType, fgFmTrapDeployInProgress=fgFmTrapDeployInProgress, fgVWLHealthCheckLinkPacketRecv=fgVWLHealthCheckLinkPacketRecv, fgt60F=fgt60F, fgApSIPUpTime=fgApSIPUpTime, fgIntfBcInMaxBandwidth=fgIntfBcInMaxBandwidth, fgWebCacheBypass=fgWebCacheBypass, fgVpnSslStatsMaxTunnels=fgVpnSslStatsMaxTunnels, fgSgWbChassisID=fgSgWbChassisID, fgLicVersionEntry=fgLicVersionEntry, fgDNSProxyStatsUdpFtgRetrans=fgDNSProxyStatsUdpFtgRetrans, fgtARM64AWS=fgtARM64AWS, fgWebCacheRequests=fgWebCacheRequests, fgVWLHealthCheckLinkJitter=fgVWLHealthCheckLinkJitter, fgt60CP=fgt60CP, fgMdmEntIndex=fgMdmEntIndex, fgManIfIp6=fgManIfIp6, fgDNSProxyStatsUdpReq=fgDNSProxyStatsUdpReq, fgByteCacheRAMLimit=fgByteCacheRAMLimit, fgAppProxyIM=fgAppProxyIM, fgVpnSslStatsLoginUsers=fgVpnSslStatsLoginUsers, fgWcStaUser=fgWcStaUser, fgWcWtpSessionRadioOperatingPower=fgWcWtpSessionRadioOperatingPower, fgLinkMonitorServer=fgLinkMonitorServer, fgt50A=fgt50A, fgSlaProbeClientAvgJitterDS=fgSlaProbeClientAvgJitterDS, fgSgWbDataHb=fgSgWbDataHb, fgt3600A=fgt3600A, fgFgWfHTTPLogged=fgFgWfHTTPLogged, fgt500A=fgt500A, fgWcWtpProfileRadioAutoTxPowerLow=fgWcWtpProfileRadioAutoTxPowerLow, fgApPOP3UpTime=fgApPOP3UpTime, fwf60A=fwf60A, fgExplicitProxySessions=fgExplicitProxySessions, fgt60DPOE=fgt60DPOE, fgHwSensorEntAlarmStatus=fgHwSensorEntAlarmStatus, fgFirewall=fgFirewall, fgVpn2TunPhase1Name=fgVpn2TunPhase1Name, FgScanAvDisposition=FgScanAvDisposition, fgFgWfHTTPSExamined=fgFgWfHTTPSExamined, fgSgWbSysVersion=fgSgWbSysVersion, fgAdminLcdProtection=fgAdminLcdProtection, fgLogDeviceName=fgLogDeviceName, fwf30DPOE=fwf30DPOE, fgFwGtpStatsApn=fgFwGtpStatsApn, fdLteIpv6GwPrefLen=fdLteIpv6GwPrefLen, fgt200A=fgt200A, fgAppP2PProtEntProto=fgAppP2PProtEntProto, fgIntfBcCfgIfTable=fgIntfBcCfgIfTable, fgFwAuthIpv6UserName=fgFwAuthIpv6UserName, fgt400EBP=fgt400EBP, fgSIAdvMemEnterProxyConsThrsh=fgSIAdvMemEnterProxyConsThrsh, fgLinkMonitorPacketSend=fgLinkMonitorPacketSend, fgLogDeviceSentCount=fgLogDeviceSentCount, fgTrapAvBypass=fgTrapAvBypass, fgSystemAdvancedObjectGroup=fgSystemAdvancedObjectGroup, fgInetProtoTables=fgInetProtoTables, fgWcWtpSessionRadioEntry=fgWcWtpSessionRadioEntry, fgFwPolicies=fgFwPolicies, fgDpdkEngRxUsage=fgDpdkEngRxUsage, fgIntfBcQPDrops=fgIntfBcQPDrops, fgMdmOpMode=fgMdmOpMode, fgVpn2TunSelSrcBeginIpType=fgVpn2TunSelSrcBeginIpType, fgIntfBcGuaranteedBandwidth=fgIntfBcGuaranteedBandwidth, fgProcessorContainedIn=fgProcessorContainedIn, fgSlaProbeClientMinLatencyDS=fgSlaProbeClientMinLatencyDS, fgServerLoadBalanceRealServerAddress6=fgServerLoadBalanceRealServerAddress6, fgFwAuthIpv6UserAddr=fgFwAuthIpv6UserAddr, fgProcessorFnNP2=fgProcessorFnNP2, fgAvTrapObjects=fgAvTrapObjects, fgMgmt=fgMgmt, fgVdTpMgmtMask=fgVdTpMgmtMask, fgWcWtpSessionRadioOperatingChannel=fgWcWtpSessionRadioOperatingChannel, fgt400=fgt400, fgLogDeviceFailedCount=fgLogDeviceFailedCount, fgExplicitProxyArchNest=fgExplicitProxyArchNest, fgAvIMAPVirusBlocked=fgAvIMAPVirusBlocked, fgIpSessVdom=fgIpSessVdom, fgAppP2PProtoTable=fgAppP2PProtoTable, fgWcWtpTables=fgWcWtpTables, fgExplicitProxyFilteredJS=fgExplicitProxyFilteredJS, fgVpnSslStatsTable=fgVpnSslStatsTable, fgFwIppStatsTable=fgFwIppStatsTable, fgFwIppStatsInusePBAs=fgFwIppStatsInusePBAs, fgFwGtpRtStatsCDropped7=fgFwGtpRtStatsCDropped7, fgFwGtpRtStatsDDroppedMalMsg=fgFwGtpRtStatsDDroppedMalMsg, fwf50E=fwf50E, fgSlaProbeClientAvgLatencySD=fgSlaProbeClientAvgLatencySD, fgProcessorXlr=fgProcessorXlr, fgtVM64GCP=fgtVM64GCP, fgt3000D=fgt3000D, fgLogInfo=fgLogInfo, fgIpSessIndex=fgIpSessIndex, fgWcWtpProfileRadioStationCapacity=fgWcWtpProfileRadioStationCapacity, fgt50B=fgt50B, fgFwHsPolStatsTable=fgFwHsPolStatsTable, fgSlaProbeClientMaxLatencyDS=fgSlaProbeClientMaxLatencyDS, fgIntfBcCfgIfEgressSProfile=fgIntfBcCfgIfEgressSProfile, fgMemCacheHits=fgMemCacheHits, fgSlaProbeClientMaxJitterSD=fgSlaProbeClientMaxJitterSD, fgVpn2TunSelSrcEndIp=fgVpn2TunSelSrcEndIp, fgAdminEntry=fgAdminEntry, fgIntfBcAllocatedBandwidth=fgIntfBcAllocatedBandwidth, fgWanOptProtocol=fgWanOptProtocol, fgFgWfHTTPSLogged=fgFgWfHTTPSLogged, fgVpn2DialupInOctets=fgVpn2DialupInOctets, fgIntrusionPrevtObjectGroup=fgIntrusionPrevtObjectGroup, fgDpdkEngCount=fgDpdkEngCount, fgUsbportEntIndex=fgUsbportEntIndex, fgProcessorEntIndex=fgProcessorEntIndex, fgt3600=fgt3600, fgWfHTTPBlocked=fgWfHTTPBlocked, fgWcStaOnline=fgWcStaOnline, fgFwIppStatsEntry=fgFwIppStatsEntry, fgSysNpuSes6Rate1=fgSysNpuSes6Rate1, fgVWLHealthCheckLinkBandwidthIn=fgVWLHealthCheckLinkBandwidthIn, fgMdmInfoTable=fgMdmInfoTable, fgGpsMdmEntIndex=fgGpsMdmEntIndex, fgFwUsers=fgFwUsers, fgFwPolPktCount=fgFwPolPktCount, fgIpsInfoSevDetections=fgIpsInfoSevDetections, fgLinkMonitorTable=fgLinkMonitorTable, fgFwAuthIpv4UserEntry=fgFwAuthIpv4UserEntry, fgSwPortNativeVlan=fgSwPortNativeVlan, fgApHTTPMemUsage=fgApHTTPMemUsage, fgt1100E=fgt1100E, fgt800D=fgt800D, fgWcdmaEcio=fgWcdmaEcio, fgSgWbServiceGroupID=fgSgWbServiceGroupID, fgDiskCount=fgDiskCount, fgIntfBcs=fgIntfBcs, fgFwIppStatsPercentageTCP=fgFwIppStatsPercentageTCP, fgLicVersionTryTime=fgLicVersionTryTime, fgAppProxyNNTP=fgAppProxyNNTP, fgvm08=fgvm08, fgVWLHealthCheckLink=fgVWLHealthCheckLink, fgApHTTPReqProcessed=fgApHTTPReqProcessed, fgExplicitProxyArchMultiPart=fgExplicitProxyArchMultiPart, fgApSMTPStatsTable=fgApSMTPStatsTable, fgProcModMemCapacity=fgProcModMemCapacity, fgVpnTunEntVdom=fgVpnTunEntVdom, fgDeviceLastSeen=fgDeviceLastSeen, fgWebfilterTables=fgWebfilterTables, fgWcWtpConfigVapAll=fgWcWtpConfigVapAll, fgProcessorFnNP6LITE=fgProcessorFnNP6LITE, fgSgWorkerBladeTable=fgSgWorkerBladeTable, fgWcWtpConfigRadioAutoTxPowerControl=fgWcWtpConfigRadioAutoTxPowerControl, fgLinkMonitorNumber=fgLinkMonitorNumber, fgInternalModemSessInfoGroup=fgInternalModemSessInfoGroup, fgt4200F=fgt4200F, fgtVM64FGCAWS=fgtVM64FGCAWS, fgAvInfo=fgAvInfo, fgFwHsPolPktCount=fgFwHsPolPktCount, fgNPUName=fgNPUName, fgServiceGroupWorkerBladesGroup=fgServiceGroupWorkerBladesGroup, fgtVM64OPC=fgtVM64OPC, FgWcWtpRadioId=FgWcWtpRadioId, fgSIAdvMemCacheInactive=fgSIAdvMemCacheInactive, fgFgWfHTTPAllowed=fgFgWfHTTPAllowed, fgvm32=fgvm32, fgSwPortEntry=fgSwPortEntry, fgSystemInfoAdvanced=fgSystemInfoAdvanced, fgIntfBcEntry=fgIntfBcEntry, fgSwCpu=fgSwCpu, fr70FM=fr70FM, fgFmTrapObjectGroup=fgFmTrapObjectGroup, fgVpnTunEntSelectorSrcPort=fgVpnTunEntSelectorSrcPort, fgSysVersionIps=fgSysVersionIps, fgLinkMonitorState=fgLinkMonitorState, fgIpsStatsTable=fgIpsStatsTable, fgFwAddresses=fgFwAddresses, fgFwGtpRtStatsCDropped10=fgFwGtpRtStatsCDropped10, fgVpnSslTunnelUpTime=fgVpnSslTunnelUpTime, fgt401F=fgt401F, fgIpsTrapSigId=fgIpsTrapSigId, fgMdmLacTac=fgMdmLacTac, fgSIAdvSesEphemeralLimit=fgSIAdvSesEphemeralLimit, fgIntfBcInEntry=fgIntfBcInEntry)
