# PySNMP SMI module. Autogenerated from smidump -f python IPV6-MIB
# by libsmi2pysnmp-0.0.5-alpha at Fri Oct 28 00:30:42 2005,
# Python version (2, 4, 0, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( Ipv6Address, Ipv6AddressIfIdentifier, Ipv6AddressPrefix, Ipv6IfIndex, Ipv6IfIndexOrZero, ) = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address", "Ipv6AddressIfIdentifier", "Ipv6AddressPrefix", "Ipv6IfIndex", "Ipv6IfIndexOrZero")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "mib-2")
( DisplayString, PhysAddress, RowPointer, TimeStamp, TruthValue, VariablePointer, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "RowPointer", "TimeStamp", "TruthValue", "VariablePointer")

# Objects

ipv6MIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 55))
ipv6MIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 55, 1))
ipv6Forwarding = MibScalar((1, 3, 6, 1, 2, 1, 55, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("forwarding", 1), ("notForwarding", 2), ))).setMaxAccess("readwrite")
ipv6DefaultHopLimit = MibScalar((1, 3, 6, 1, 2, 1, 55, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255)).clone(64)).setMaxAccess("readwrite")
ipv6Interfaces = MibScalar((1, 3, 6, 1, 2, 1, 55, 1, 3), Unsigned32()).setMaxAccess("readonly")
ipv6IfTableLastChange = MibScalar((1, 3, 6, 1, 2, 1, 55, 1, 4), TimeStamp()).setMaxAccess("readonly")
ipv6IfTable = MibTable((1, 3, 6, 1, 2, 1, 55, 1, 5))
ipv6IfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 55, 1, 5, 1)).setIndexNames((0, "IPV6-MIB", "ipv6IfIndex"))
ipv6IfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 1), Ipv6IfIndex()).setMaxAccess("noaccess")
ipv6IfDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
ipv6IfLowerLayer = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 3), VariablePointer()).setMaxAccess("readonly")
ipv6IfEffectiveMtu = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
ipv6IfReasmMaxSize = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 5), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
ipv6IfIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 6), Ipv6AddressIfIdentifier()).setMaxAccess("readwrite")
ipv6IfIdentifierLength = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
ipv6IfPhysicalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 8), PhysAddress()).setMaxAccess("readonly")
ipv6IfAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(("up", 1), ("down", 2), ))).setMaxAccess("readwrite")
ipv6IfOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,5,)).subtype(namedValues=namedval.NamedValues(("up", 1), ("down", 2), ("noIfIdentifier", 3), ("unknown", 4), ("notPresent", 5), ))).setMaxAccess("readonly")
ipv6IfLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 11), TimeStamp()).setMaxAccess("readonly")
ipv6IfStatsTable = MibTable((1, 3, 6, 1, 2, 1, 55, 1, 6))
ipv6IfStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 55, 1, 6, 1))
ipv6IfStatsInReceives = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
ipv6IfStatsInHdrErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
ipv6IfStatsInTooBigErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
ipv6IfStatsInNoRoutes = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
ipv6IfStatsInAddrErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
ipv6IfStatsInUnknownProtos = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
ipv6IfStatsInTruncatedPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
ipv6IfStatsInDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
ipv6IfStatsInDelivers = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
ipv6IfStatsOutForwDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
ipv6IfStatsOutRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
ipv6IfStatsOutDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
ipv6IfStatsOutFragOKs = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
ipv6IfStatsOutFragFails = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
ipv6IfStatsOutFragCreates = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
ipv6IfStatsReasmReqds = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
ipv6IfStatsReasmOKs = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
ipv6IfStatsReasmFails = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
ipv6IfStatsInMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 19), Counter32()).setMaxAccess("readonly")
ipv6IfStatsOutMcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 20), Counter32()).setMaxAccess("readonly")
ipv6AddrPrefixTable = MibTable((1, 3, 6, 1, 2, 1, 55, 1, 7))
ipv6AddrPrefixEntry = MibTableRow((1, 3, 6, 1, 2, 1, 55, 1, 7, 1)).setIndexNames((0, "IPV6-MIB", "ipv6IfIndex"), (0, "IPV6-MIB", "ipv6AddrPrefix"), (0, "IPV6-MIB", "ipv6AddrPrefixLength"))
ipv6AddrPrefix = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 7, 1, 1), Ipv6AddressPrefix()).setMaxAccess("noaccess")
ipv6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 128))).setMaxAccess("noaccess")
ipv6AddrPrefixOnLinkFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 7, 1, 3), TruthValue()).setMaxAccess("readonly")
ipv6AddrPrefixAutonomousFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 7, 1, 4), TruthValue()).setMaxAccess("readonly")
ipv6AddrPrefixAdvPreferredLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
ipv6AddrPrefixAdvValidLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
ipv6AddrTable = MibTable((1, 3, 6, 1, 2, 1, 55, 1, 8))
ipv6AddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 55, 1, 8, 1)).setIndexNames((0, "IPV6-MIB", "ipv6IfIndex"), (0, "IPV6-MIB", "ipv6AddrAddress"))
ipv6AddrAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 8, 1, 1), Ipv6Address()).setMaxAccess("noaccess")
ipv6AddrPfxLength = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
ipv6AddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 8, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(("stateless", 1), ("stateful", 2), ("unknown", 3), ))).setMaxAccess("readonly")
ipv6AddrAnycastFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 8, 1, 4), TruthValue()).setMaxAccess("readonly")
ipv6AddrStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 8, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,4,3,1,2,)).subtype(namedValues=namedval.NamedValues(("preferred", 1), ("deprecated", 2), ("invalid", 3), ("inaccessible", 4), ("unknown", 5), ))).setMaxAccess("readonly")
ipv6RouteNumber = MibScalar((1, 3, 6, 1, 2, 1, 55, 1, 9), Gauge32()).setMaxAccess("readonly")
ipv6DiscardedRoutes = MibScalar((1, 3, 6, 1, 2, 1, 55, 1, 10), Counter32()).setMaxAccess("readonly")
ipv6RouteTable = MibTable((1, 3, 6, 1, 2, 1, 55, 1, 11))
ipv6RouteEntry = MibTableRow((1, 3, 6, 1, 2, 1, 55, 1, 11, 1)).setIndexNames((0, "IPV6-MIB", "ipv6RouteDest"), (0, "IPV6-MIB", "ipv6RoutePfxLength"), (0, "IPV6-MIB", "ipv6RouteIndex"))
ipv6RouteDest = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 1), Ipv6Address()).setMaxAccess("noaccess")
ipv6RoutePfxLength = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 128))).setMaxAccess("noaccess")
ipv6RouteIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 3), Unsigned32()).setMaxAccess("noaccess")
ipv6RouteIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 4), Ipv6IfIndexOrZero()).setMaxAccess("readonly")
ipv6RouteNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 5), Ipv6Address()).setMaxAccess("readonly")
ipv6RouteType = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,4,)).subtype(namedValues=namedval.NamedValues(("other", 1), ("discard", 2), ("local", 3), ("remote", 4), ))).setMaxAccess("readonly")
ipv6RouteProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,9,4,6,5,7,1,8,2,)).subtype(namedValues=namedval.NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("ndisc", 4), ("rip", 5), ("ospf", 6), ("bgp", 7), ("idrp", 8), ("igrp", 9), ))).setMaxAccess("readonly")
ipv6RoutePolicy = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 8), Integer32()).setMaxAccess("readonly")
ipv6RouteAge = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 9), Unsigned32()).setMaxAccess("readonly")
ipv6RouteNextHopRDI = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 10), Unsigned32()).setMaxAccess("readonly")
ipv6RouteMetric = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 11), Unsigned32()).setMaxAccess("readonly")
ipv6RouteWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 12), Unsigned32()).setMaxAccess("readonly")
ipv6RouteInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 13), RowPointer()).setMaxAccess("readonly")
ipv6RouteValid = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 14), TruthValue()).setMaxAccess("readwrite")
ipv6NetToMediaTable = MibTable((1, 3, 6, 1, 2, 1, 55, 1, 12))
ipv6NetToMediaEntry = MibTableRow((1, 3, 6, 1, 2, 1, 55, 1, 12, 1)).setIndexNames((0, "IPV6-MIB", "ipv6IfIndex"), (0, "IPV6-MIB", "ipv6NetToMediaNetAddress"))
ipv6NetToMediaNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 12, 1, 1), Ipv6Address()).setMaxAccess("noaccess")
ipv6NetToMediaPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 12, 1, 2), PhysAddress()).setMaxAccess("readonly")
ipv6NetToMediaType = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 12, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(("other", 1), ("dynamic", 2), ("static", 3), ("local", 4), ))).setMaxAccess("readonly")
ipv6IfNetToMediaState = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 12, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(6,4,5,3,1,2,)).subtype(namedValues=namedval.NamedValues(("reachable", 1), ("stale", 2), ("delay", 3), ("probe", 4), ("invalid", 5), ("unknown", 6), ))).setMaxAccess("readonly")
ipv6IfNetToMediaLastUpdated = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 12, 1, 5), TimeStamp()).setMaxAccess("readonly")
ipv6NetToMediaValid = MibTableColumn((1, 3, 6, 1, 2, 1, 55, 1, 12, 1, 6), TruthValue()).setMaxAccess("readwrite")
ipv6Notifications = MibIdentifier((1, 3, 6, 1, 2, 1, 55, 2))
ipv6NotificationPrefix = MibIdentifier((1, 3, 6, 1, 2, 1, 55, 2, 0))
ipv6Conformance = MibIdentifier((1, 3, 6, 1, 2, 1, 55, 3))
ipv6Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 55, 3, 1))
ipv6Groups = MibIdentifier((1, 3, 6, 1, 2, 1, 55, 3, 2))

# Augmentions
ipv6IfEntry.registerAugmentions(("IPV6-MIB", "ipv6IfStatsEntry"))
apply(ipv6IfStatsEntry.setIndexNames, ipv6IfEntry.getIndexNames())

# Notifications

ipv6IfStateChange = NotificationType((1, 3, 6, 1, 2, 1, 55, 2, 0, 1)).setObjects(("IPV6-MIB", "ipv6IfOperStatus"), ("IPV6-MIB", "ipv6IfDescr"), )

# Groups

ipv6GeneralGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 55, 3, 2, 1)).setObjects(("IPV6-MIB", "ipv6Forwarding"), ("IPV6-MIB", "ipv6IfAdminStatus"), ("IPV6-MIB", "ipv6IfStatsInNoRoutes"), ("IPV6-MIB", "ipv6IfIdentifierLength"), ("IPV6-MIB", "ipv6NetToMediaValid"), ("IPV6-MIB", "ipv6IfStatsReasmFails"), ("IPV6-MIB", "ipv6IfStatsInMcastPkts"), ("IPV6-MIB", "ipv6NetToMediaType"), ("IPV6-MIB", "ipv6IfStatsOutMcastPkts"), ("IPV6-MIB", "ipv6IfStatsInDelivers"), ("IPV6-MIB", "ipv6IfStatsInTruncatedPkts"), ("IPV6-MIB", "ipv6IfReasmMaxSize"), ("IPV6-MIB", "ipv6IfLowerLayer"), ("IPV6-MIB", "ipv6IfStatsInReceives"), ("IPV6-MIB", "ipv6DiscardedRoutes"), ("IPV6-MIB", "ipv6IfStatsOutFragCreates"), ("IPV6-MIB", "ipv6RouteNextHop"), ("IPV6-MIB", "ipv6IfStatsOutRequests"), ("IPV6-MIB", "ipv6RouteValid"), ("IPV6-MIB", "ipv6RoutePolicy"), ("IPV6-MIB", "ipv6IfStatsOutForwDatagrams"), ("IPV6-MIB", "ipv6NetToMediaPhysAddress"), ("IPV6-MIB", "ipv6AddrPfxLength"), ("IPV6-MIB", "ipv6DefaultHopLimit"), ("IPV6-MIB", "ipv6AddrPrefixAutonomousFlag"), ("IPV6-MIB", "ipv6AddrStatus"), ("IPV6-MIB", "ipv6IfStatsInHdrErrors"), ("IPV6-MIB", "ipv6RouteMetric"), ("IPV6-MIB", "ipv6RouteProtocol"), ("IPV6-MIB", "ipv6IfStatsOutFragOKs"), ("IPV6-MIB", "ipv6IfNetToMediaLastUpdated"), ("IPV6-MIB", "ipv6RouteInfo"), ("IPV6-MIB", "ipv6IfStatsReasmOKs"), ("IPV6-MIB", "ipv6IfLastChange"), ("IPV6-MIB", "ipv6IfStatsOutFragFails"), ("IPV6-MIB", "ipv6Interfaces"), ("IPV6-MIB", "ipv6AddrPrefixAdvValidLifetime"), ("IPV6-MIB", "ipv6RouteAge"), ("IPV6-MIB", "ipv6RouteIfIndex"), ("IPV6-MIB", "ipv6RouteNumber"), ("IPV6-MIB", "ipv6IfEffectiveMtu"), ("IPV6-MIB", "ipv6RouteWeight"), ("IPV6-MIB", "ipv6IfDescr"), ("IPV6-MIB", "ipv6IfPhysicalAddress"), ("IPV6-MIB", "ipv6IfStatsInUnknownProtos"), ("IPV6-MIB", "ipv6AddrAnycastFlag"), ("IPV6-MIB", "ipv6IfStatsInDiscards"), ("IPV6-MIB", "ipv6AddrPrefixOnLinkFlag"), ("IPV6-MIB", "ipv6IfNetToMediaState"), ("IPV6-MIB", "ipv6RouteNextHopRDI"), ("IPV6-MIB", "ipv6IfOperStatus"), ("IPV6-MIB", "ipv6IfStatsReasmReqds"), ("IPV6-MIB", "ipv6IfStatsOutDiscards"), ("IPV6-MIB", "ipv6AddrType"), ("IPV6-MIB", "ipv6IfStatsInAddrErrors"), ("IPV6-MIB", "ipv6AddrPrefixAdvPreferredLifetime"), ("IPV6-MIB", "ipv6RouteType"), ("IPV6-MIB", "ipv6IfStatsInTooBigErrors"), ("IPV6-MIB", "ipv6IfIdentifier"), ("IPV6-MIB", "ipv6IfTableLastChange"), )
ipv6NotificationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 55, 3, 2, 2)).setObjects(("IPV6-MIB", "ipv6IfStateChange"), )

# Exports

# Objects
mibBuilder.exportSymbols("IPV6-MIB", ipv6MIB=ipv6MIB, ipv6MIBObjects=ipv6MIBObjects, ipv6Forwarding=ipv6Forwarding, ipv6DefaultHopLimit=ipv6DefaultHopLimit, ipv6Interfaces=ipv6Interfaces, ipv6IfTableLastChange=ipv6IfTableLastChange, ipv6IfTable=ipv6IfTable, ipv6IfEntry=ipv6IfEntry, ipv6IfIndex=ipv6IfIndex, ipv6IfDescr=ipv6IfDescr, ipv6IfLowerLayer=ipv6IfLowerLayer, ipv6IfEffectiveMtu=ipv6IfEffectiveMtu, ipv6IfReasmMaxSize=ipv6IfReasmMaxSize, ipv6IfIdentifier=ipv6IfIdentifier, ipv6IfIdentifierLength=ipv6IfIdentifierLength, ipv6IfPhysicalAddress=ipv6IfPhysicalAddress, ipv6IfAdminStatus=ipv6IfAdminStatus, ipv6IfOperStatus=ipv6IfOperStatus, ipv6IfLastChange=ipv6IfLastChange, ipv6IfStatsTable=ipv6IfStatsTable, ipv6IfStatsEntry=ipv6IfStatsEntry, ipv6IfStatsInReceives=ipv6IfStatsInReceives, ipv6IfStatsInHdrErrors=ipv6IfStatsInHdrErrors, ipv6IfStatsInTooBigErrors=ipv6IfStatsInTooBigErrors, ipv6IfStatsInNoRoutes=ipv6IfStatsInNoRoutes, ipv6IfStatsInAddrErrors=ipv6IfStatsInAddrErrors, ipv6IfStatsInUnknownProtos=ipv6IfStatsInUnknownProtos, ipv6IfStatsInTruncatedPkts=ipv6IfStatsInTruncatedPkts, ipv6IfStatsInDiscards=ipv6IfStatsInDiscards, ipv6IfStatsInDelivers=ipv6IfStatsInDelivers, ipv6IfStatsOutForwDatagrams=ipv6IfStatsOutForwDatagrams, ipv6IfStatsOutRequests=ipv6IfStatsOutRequests, ipv6IfStatsOutDiscards=ipv6IfStatsOutDiscards, ipv6IfStatsOutFragOKs=ipv6IfStatsOutFragOKs, ipv6IfStatsOutFragFails=ipv6IfStatsOutFragFails, ipv6IfStatsOutFragCreates=ipv6IfStatsOutFragCreates, ipv6IfStatsReasmReqds=ipv6IfStatsReasmReqds, ipv6IfStatsReasmOKs=ipv6IfStatsReasmOKs, ipv6IfStatsReasmFails=ipv6IfStatsReasmFails, ipv6IfStatsInMcastPkts=ipv6IfStatsInMcastPkts, ipv6IfStatsOutMcastPkts=ipv6IfStatsOutMcastPkts, ipv6AddrPrefixTable=ipv6AddrPrefixTable, ipv6AddrPrefixEntry=ipv6AddrPrefixEntry, ipv6AddrPrefix=ipv6AddrPrefix, ipv6AddrPrefixLength=ipv6AddrPrefixLength, ipv6AddrPrefixOnLinkFlag=ipv6AddrPrefixOnLinkFlag, ipv6AddrPrefixAutonomousFlag=ipv6AddrPrefixAutonomousFlag, ipv6AddrPrefixAdvPreferredLifetime=ipv6AddrPrefixAdvPreferredLifetime, ipv6AddrPrefixAdvValidLifetime=ipv6AddrPrefixAdvValidLifetime, ipv6AddrTable=ipv6AddrTable, ipv6AddrEntry=ipv6AddrEntry, ipv6AddrAddress=ipv6AddrAddress, ipv6AddrPfxLength=ipv6AddrPfxLength, ipv6AddrType=ipv6AddrType, ipv6AddrAnycastFlag=ipv6AddrAnycastFlag, ipv6AddrStatus=ipv6AddrStatus, ipv6RouteNumber=ipv6RouteNumber, ipv6DiscardedRoutes=ipv6DiscardedRoutes, ipv6RouteTable=ipv6RouteTable, ipv6RouteEntry=ipv6RouteEntry, ipv6RouteDest=ipv6RouteDest, ipv6RoutePfxLength=ipv6RoutePfxLength, ipv6RouteIndex=ipv6RouteIndex, ipv6RouteIfIndex=ipv6RouteIfIndex, ipv6RouteNextHop=ipv6RouteNextHop, ipv6RouteType=ipv6RouteType, ipv6RouteProtocol=ipv6RouteProtocol, ipv6RoutePolicy=ipv6RoutePolicy, ipv6RouteAge=ipv6RouteAge, ipv6RouteNextHopRDI=ipv6RouteNextHopRDI, ipv6RouteMetric=ipv6RouteMetric, ipv6RouteWeight=ipv6RouteWeight, ipv6RouteInfo=ipv6RouteInfo, ipv6RouteValid=ipv6RouteValid, ipv6NetToMediaTable=ipv6NetToMediaTable, ipv6NetToMediaEntry=ipv6NetToMediaEntry, ipv6NetToMediaNetAddress=ipv6NetToMediaNetAddress, ipv6NetToMediaPhysAddress=ipv6NetToMediaPhysAddress, ipv6NetToMediaType=ipv6NetToMediaType, ipv6IfNetToMediaState=ipv6IfNetToMediaState, ipv6IfNetToMediaLastUpdated=ipv6IfNetToMediaLastUpdated, ipv6NetToMediaValid=ipv6NetToMediaValid, ipv6Notifications=ipv6Notifications, ipv6NotificationPrefix=ipv6NotificationPrefix, ipv6Conformance=ipv6Conformance, ipv6Compliances=ipv6Compliances, ipv6Groups=ipv6Groups)

# Notifications
mibBuilder.exportSymbols("IPV6-MIB", ipv6IfStateChange=ipv6IfStateChange)

# Groups
mibBuilder.exportSymbols("IPV6-MIB", ipv6GeneralGroup=ipv6GeneralGroup, ipv6NotificationGroup=ipv6NotificationGroup)
