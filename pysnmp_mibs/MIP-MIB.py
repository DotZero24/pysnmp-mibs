# PySNMP SMI module. Autogenerated from smidump -f python MIP-MIB
# by libsmi2pysnmp-0.0.7-alpha at Tue Jun 20 21:10:11 2006,
# Python version (2, 4, 3, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Gauge32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "mib-2")
( RowStatus, TextualConvention, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TimeStamp", "TruthValue")

# Types

class RegistrationFlags(Bits):
    namedValues = namedval.NamedValues(("vjCompression", 0), ("gre", 1), ("minEnc", 2), ("decapsulationbyMN", 3), ("broadcastDatagram", 4), ("simultaneousBindings", 5), )
    pass


# Objects

mipMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 44)).setRevisions(("1996-06-04 00:00",))
mipMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1))
mipSystem = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 1))
mipEntities = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 1, 1), Bits().subtype(namedValues=namedval.NamedValues(("mobileNode", 0), ("foreignAgent", 1), ("homeAgent", 2), ))).setMaxAccess("readonly")
mipEnable = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(("enabled", 1), ("disabled", 2), ))).setMaxAccess("readwrite")
mipEncapsulationSupported = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 1, 3), Bits().subtype(namedValues=namedval.NamedValues(("ipInIp", 0), ("gre", 1), ("minEnc", 2), ("other", 3), ))).setMaxAccess("readonly")
mipSecurity = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 2))
mipSecAssocTable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 2, 1))
mipSecAssocEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 2, 1, 1)).setIndexNames((0, "MIP-MIB", "mipSecPeerAddress"), (0, "MIP-MIB", "mipSecSPI"))
mipSecPeerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 1, 1, 1), IpAddress()).setMaxAccess("noaccess")
mipSecSPI = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 4294967295L))).setMaxAccess("noaccess")
mipSecAlgorithmType = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("other", 1), ("md5", 2), ))).setMaxAccess("readcreate")
mipSecAlgorithmMode = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(("other", 1), ("prefixSuffix", 2), ))).setMaxAccess("readcreate")
mipSecKey = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(16, 16))).setMaxAccess("readcreate")
mipSecReplayMethod = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,)).subtype(namedValues=namedval.NamedValues(("other", 1), ("timestamps", 2), ("nonces", 3), ))).setMaxAccess("readcreate")
mipSecTotalViolations = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 2, 2), Counter32()).setMaxAccess("readonly")
mipSecViolationTable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 2, 3))
mipSecViolationEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 2, 3, 1)).setIndexNames((0, "MIP-MIB", "mipSecViolatorAddress"))
mipSecViolatorAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 3, 1, 1), IpAddress()).setMaxAccess("notifyonly")
mipSecViolationCounter = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
mipSecRecentViolationSPI = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
mipSecRecentViolationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
mipSecRecentViolationIDLow = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
mipSecRecentViolationIDHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
mipSecRecentViolationReason = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 2, 3, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,6,3,2,1,4,)).subtype(namedValues=namedval.NamedValues(("noMobilitySecurityAssociation", 1), ("badAuthenticator", 2), ("badIdentifier", 3), ("badSPI", 4), ("missingSecurityExtension", 5), ("other", 6), ))).setMaxAccess("readonly")
mipMN = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 3))
mnSystem = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 3, 1))
mnState = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,2,4,1,3,)).subtype(namedValues=namedval.NamedValues(("home", 1), ("registered", 2), ("pending", 3), ("isolated", 4), ("unknown", 5), ))).setMaxAccess("readonly")
mnHomeAddress = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
mnHATable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 3, 1, 3))
mnHAEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 3, 1, 3, 1)).setIndexNames((0, "MIP-MIB", "mnHAAddress"))
mnHAAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 1, 3, 1, 1), IpAddress()).setMaxAccess("noaccess")
mnCurrentHA = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
mnHAStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
mnDiscovery = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 3, 2))
mnFATable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 1))
mnFAEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 1, 1)).setIndexNames((0, "MIP-MIB", "mnFAAddress"), (0, "MIP-MIB", "mnCOA"))
mnFAAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
mnCOA = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
mnRecentAdvReceived = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 2))
mnAdvSourceAddress = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 2, 1), IpAddress()).setMaxAccess("readonly")
mnAdvSequence = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 2, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
mnAdvFlags = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 2, 3), Bits().subtype(namedValues=namedval.NamedValues(("vjCompression", 0), ("gre", 1), ("minEnc", 2), ("foreignAgent", 3), ("homeAgent", 4), ("busy", 5), ("regRequired", 6), ))).setMaxAccess("readonly")
mnAdvMaxRegLifetime = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 2, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 65535))).setMaxAccess("readonly").setUnits("seconds")
mnAdvMaxAdvLifetime = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 2, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 65535))).setMaxAccess("readonly").setUnits("seconds")
mnAdvTimeReceived = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 2, 6), TimeStamp()).setMaxAccess("readonly")
mnSolicitationsSent = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 3), Counter32()).setMaxAccess("readonly")
mnAdvertisementsReceived = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 4), Counter32()).setMaxAccess("readonly")
mnAdvsDroppedInvalidExtension = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 5), Counter32()).setMaxAccess("readonly")
mnAdvsIgnoredUnknownExtension = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 6), Counter32()).setMaxAccess("readonly")
mnMoveFromHAToFA = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 7), Counter32()).setMaxAccess("readonly")
mnMoveFromFAToFA = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 8), Counter32()).setMaxAccess("readonly")
mnMoveFromFAToHA = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 9), Counter32()).setMaxAccess("readonly")
mnGratuitousARPsSend = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 10), Counter32()).setMaxAccess("readonly")
mnAgentRebootsDectected = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 2, 11), Counter32()).setMaxAccess("readonly")
mnRegistration = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 3, 3))
mnRegistrationTable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1))
mnRegistrationEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1)).setIndexNames((0, "MIP-MIB", "mnRegAgentAddress"), (0, "MIP-MIB", "mnRegCOA"))
mnRegAgentAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
mnRegCOA = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
mnRegFlags = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 3), RegistrationFlags()).setMaxAccess("readonly")
mnRegIDLow = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
mnRegIDHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
mnRegTimeRequested = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
mnRegTimeRemaining = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
mnRegTimeSent = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
mnRegIsAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
mnCOAIsLocal = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
mnRegRequestsSent = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 2), Counter32()).setMaxAccess("readonly")
mnDeRegRequestsSent = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 3), Counter32()).setMaxAccess("readonly")
mnRegRepliesRecieved = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 4), Counter32()).setMaxAccess("readonly")
mnDeRegRepliesRecieved = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 5), Counter32()).setMaxAccess("readonly")
mnRepliesInvalidHomeAddress = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 6), Counter32()).setMaxAccess("readonly")
mnRepliesUnknownHA = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 7), Counter32()).setMaxAccess("readonly")
mnRepliesUnknownFA = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 8), Counter32()).setMaxAccess("readonly")
mnRepliesInvalidID = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 9), Counter32()).setMaxAccess("readonly")
mnRepliesDroppedInvalidExtension = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 10), Counter32()).setMaxAccess("readonly")
mnRepliesIgnoredUnknownExtension = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 11), Counter32()).setMaxAccess("readonly")
mnRepliesHAAuthenticationFailure = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 12), Counter32()).setMaxAccess("readonly")
mnRepliesFAAuthenticationFailure = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 13), Counter32()).setMaxAccess("readonly")
mnRegRequestsAccepted = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 14), Counter32()).setMaxAccess("readonly")
mnRegRequestsDeniedByHA = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 15), Counter32()).setMaxAccess("readonly")
mnRegRequestsDeniedByFA = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 16), Counter32()).setMaxAccess("readonly")
mnRegRequestsDeniedByHADueToID = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 17), Counter32()).setMaxAccess("readonly")
mnRegRequestsWithDirectedBroadcast = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 3, 3, 18), Counter32()).setMaxAccess("readonly")
mipMA = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 4))
maAdvertisement = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 4, 2))
maAdvConfigTable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1))
maAdvConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1)).setIndexNames((0, "MIP-MIB", "maInterfaceAddress"))
maInterfaceAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 1), IpAddress()).setMaxAccess("noaccess")
maAdvMaxRegLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
maAdvPrefixLengthInclusion = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 3), TruthValue()).setMaxAccess("readcreate")
maAdvAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
maAdvMaxInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(4, 1800))).setMaxAccess("readcreate")
maAdvMinInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(3, 1800))).setMaxAccess("readcreate")
maAdvMaxAdvLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(4, 9000))).setMaxAccess("readcreate")
maAdvResponseSolicitationOnly = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 8), TruthValue()).setMaxAccess("readcreate")
maAdvStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
maAdvertisementsSent = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 2), Counter32()).setMaxAccess("readonly")
maAdvsSentForSolicitation = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 3), Counter32()).setMaxAccess("readonly")
maSolicitationsReceived = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 4, 2, 4), Counter32()).setMaxAccess("readonly")
mipFA = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 5))
faSystem = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 5, 1))
faCOATable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 5, 1, 1))
faCOAEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 5, 1, 1, 1)).setIndexNames((0, "MIP-MIB", "faSupportedCOA"))
faSupportedCOA = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 1, 1, 1, 1), IpAddress()).setMaxAccess("noaccess")
faCOAStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
faAdvertisement = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 5, 2))
faIsBusy = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 2, 1), TruthValue()).setMaxAccess("readonly")
faRegistrationRequired = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 2, 2), TruthValue()).setMaxAccess("readwrite")
faRegistration = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 5, 3))
faVisitorTable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1))
faVisitorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1)).setIndexNames((0, "MIP-MIB", "faVisitorIPAddress"))
faVisitorIPAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
faVisitorHomeAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
faVisitorHomeAgentAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
faVisitorTimeGranted = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
faVisitorTimeRemaining = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
faVisitorRegFlags = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 6), RegistrationFlags()).setMaxAccess("readonly")
faVisitorRegIDLow = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
faVisitorRegIDHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
faVisitorRegIsAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
faRegRequestsReceived = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 2), Counter32()).setMaxAccess("readonly")
faRegRequestsRelayed = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 3), Counter32()).setMaxAccess("readonly")
faReasonUnspecified = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 4), Counter32()).setMaxAccess("readonly")
faAdmProhibited = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 5), Counter32()).setMaxAccess("readonly")
faInsufficientResource = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 6), Counter32()).setMaxAccess("readonly")
faMNAuthenticationFailure = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 7), Counter32()).setMaxAccess("readonly")
faRegLifetimeTooLong = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 8), Counter32()).setMaxAccess("readonly")
faPoorlyFormedRequests = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 9), Counter32()).setMaxAccess("readonly")
faEncapsulationUnavailable = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 10), Counter32()).setMaxAccess("readonly")
faVJCompressionUnavailable = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 11), Counter32()).setMaxAccess("readonly")
faHAUnreachable = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 12), Counter32()).setMaxAccess("readonly")
faRegRepliesRecieved = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 13), Counter32()).setMaxAccess("readonly")
faRegRepliesRelayed = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 14), Counter32()).setMaxAccess("readonly")
faHAAuthenticationFailure = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 15), Counter32()).setMaxAccess("readonly")
faPoorlyFormedReplies = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 5, 3, 16), Counter32()).setMaxAccess("readonly")
mipHA = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 6))
haRegistration = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 1, 6, 3))
haMobilityBindingTable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1))
haMobilityBindingEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1)).setIndexNames((0, "MIP-MIB", "haMobilityBindingMN"), (0, "MIP-MIB", "haMobilityBindingCOA"))
haMobilityBindingMN = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
haMobilityBindingCOA = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
haMobilityBindingSourceAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
haMobilityBindingRegFlags = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1, 4), RegistrationFlags()).setMaxAccess("readonly")
haMobilityBindingRegIDLow = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
haMobilityBindingRegIDHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
haMobilityBindingTimeGranted = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
haMobilityBindingTimeRemaining = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
haCounterTable = MibTable((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 2))
haCounterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 2, 1)).setIndexNames((0, "MIP-MIB", "haMobilityBindingMN"))
haServiceRequestsAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
haServiceRequestsDenied = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
haOverallServiceTime = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
haRecentServiceAcceptedTime = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
haRecentServiceDeniedTime = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 2, 1, 6), TimeStamp()).setMaxAccess("readonly")
haRecentServiceDeniedCode = MibTableColumn((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 2, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(128,134,133,131,130,136,129,132,135,)).subtype(namedValues=namedval.NamedValues(("reasonUnspecified", 128), ("admProhibited", 129), ("insufficientResource", 130), ("mnAuthenticationFailure", 131), ("faAuthenticationFailure", 132), ("idMismatch", 133), ("poorlyFormedRequest", 134), ("tooManyBindings", 135), ("unknownHA", 136), ))).setMaxAccess("readonly")
haRegistrationAccepted = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 3), Counter32()).setMaxAccess("readonly")
haMultiBindingUnsupported = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 4), Counter32()).setMaxAccess("readonly")
haReasonUnspecified = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 5), Counter32()).setMaxAccess("readonly")
haAdmProhibited = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 6), Counter32()).setMaxAccess("readonly")
haInsufficientResource = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 7), Counter32()).setMaxAccess("readonly")
haMNAuthenticationFailure = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 8), Counter32()).setMaxAccess("readonly")
haFAAuthenticationFailure = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 9), Counter32()).setMaxAccess("readonly")
haIDMismatch = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 10), Counter32()).setMaxAccess("readonly")
haPoorlyFormedRequest = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 11), Counter32()).setMaxAccess("readonly")
haTooManyBindings = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 12), Counter32()).setMaxAccess("readonly")
haUnknownHA = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 13), Counter32()).setMaxAccess("readonly")
haGratuitiousARPsSent = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 14), Counter32()).setMaxAccess("readonly")
haProxyARPsSent = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 15), Counter32()).setMaxAccess("readonly")
haRegRequestsReceived = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 16), Counter32()).setMaxAccess("readonly")
haDeRegRequestsReceived = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 17), Counter32()).setMaxAccess("readonly")
haRegRepliesSent = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 18), Counter32()).setMaxAccess("readonly")
haDeRegRepliesSent = MibScalar((1, 3, 6, 1, 2, 1, 44, 1, 6, 3, 19), Counter32()).setMaxAccess("readonly")
mipMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 2))
mipMIBNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 2, 0))
mipMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 3))
mipGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 3, 1))
mipCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 44, 3, 2))

# Augmentions

# Notifications

mipAuthFailure = NotificationType((1, 3, 6, 1, 2, 1, 44, 2, 0, 1)).setObjects(("MIP-MIB", "mipSecRecentViolationIDLow"), ("MIP-MIB", "mipSecRecentViolationReason"), ("MIP-MIB", "mipSecViolatorAddress"), ("MIP-MIB", "mipSecRecentViolationSPI"), ("MIP-MIB", "mipSecRecentViolationIDHigh"), )

# Groups

haRegistrationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 11)).setObjects(("MIP-MIB", "haMobilityBindingSourceAddress"), ("MIP-MIB", "haMultiBindingUnsupported"), ("MIP-MIB", "haDeRegRequestsReceived"), ("MIP-MIB", "haMobilityBindingTimeGranted"), ("MIP-MIB", "haFAAuthenticationFailure"), ("MIP-MIB", "haPoorlyFormedRequest"), ("MIP-MIB", "haMobilityBindingRegIDHigh"), ("MIP-MIB", "haUnknownHA"), ("MIP-MIB", "haDeRegRepliesSent"), ("MIP-MIB", "haMobilityBindingCOA"), ("MIP-MIB", "haMobilityBindingMN"), ("MIP-MIB", "haMobilityBindingTimeRemaining"), ("MIP-MIB", "haRegRequestsReceived"), ("MIP-MIB", "haRegistrationAccepted"), ("MIP-MIB", "haTooManyBindings"), ("MIP-MIB", "haMobilityBindingRegIDLow"), ("MIP-MIB", "haInsufficientResource"), ("MIP-MIB", "haProxyARPsSent"), ("MIP-MIB", "haReasonUnspecified"), ("MIP-MIB", "haIDMismatch"), ("MIP-MIB", "haAdmProhibited"), ("MIP-MIB", "haMNAuthenticationFailure"), ("MIP-MIB", "haGratuitiousARPsSent"), ("MIP-MIB", "haRegRepliesSent"), ("MIP-MIB", "haMobilityBindingRegFlags"), )
faSystemGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 8)).setObjects(("MIP-MIB", "faCOAStatus"), )
mipSecNotificationsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 13)).setObjects(("MIP-MIB", "mipAuthFailure"), )
mipSecAssociationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 2)).setObjects(("MIP-MIB", "mipSecReplayMethod"), ("MIP-MIB", "mipSecKey"), ("MIP-MIB", "mipSecAlgorithmMode"), ("MIP-MIB", "mipSecAlgorithmType"), )
mnSystemGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 4)).setObjects(("MIP-MIB", "mnState"), ("MIP-MIB", "mnHAStatus"), ("MIP-MIB", "mnHomeAddress"), ("MIP-MIB", "mnCurrentHA"), )
mipSystemGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 1)).setObjects(("MIP-MIB", "mipEntities"), ("MIP-MIB", "mipEncapsulationSupported"), ("MIP-MIB", "mipEnable"), )
haRegNodeCountersGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 12)).setObjects(("MIP-MIB", "haServiceRequestsDenied"), ("MIP-MIB", "haRecentServiceAcceptedTime"), ("MIP-MIB", "haOverallServiceTime"), ("MIP-MIB", "haRecentServiceDeniedTime"), ("MIP-MIB", "haRecentServiceDeniedCode"), ("MIP-MIB", "haServiceRequestsAccepted"), )
mnDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 5)).setObjects(("MIP-MIB", "mnMoveFromFAToHA"), ("MIP-MIB", "mnAdvTimeReceived"), ("MIP-MIB", "mnSolicitationsSent"), ("MIP-MIB", "mnAdvSequence"), ("MIP-MIB", "mnAdvSourceAddress"), ("MIP-MIB", "mnAgentRebootsDectected"), ("MIP-MIB", "mnGratuitousARPsSend"), ("MIP-MIB", "mnCOA"), ("MIP-MIB", "mnAdvertisementsReceived"), ("MIP-MIB", "mnAdvFlags"), ("MIP-MIB", "mnFAAddress"), ("MIP-MIB", "mnAdvsDroppedInvalidExtension"), ("MIP-MIB", "mnMoveFromFAToFA"), ("MIP-MIB", "mnMoveFromHAToFA"), ("MIP-MIB", "mnAdvsIgnoredUnknownExtension"), ("MIP-MIB", "mnAdvMaxRegLifetime"), ("MIP-MIB", "mnAdvMaxAdvLifetime"), )
mnRegistrationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 6)).setObjects(("MIP-MIB", "mnRepliesInvalidID"), ("MIP-MIB", "mnRegRequestsDeniedByHA"), ("MIP-MIB", "mnRegIDLow"), ("MIP-MIB", "mnRegRequestsSent"), ("MIP-MIB", "mnRegCOA"), ("MIP-MIB", "mnRegRequestsWithDirectedBroadcast"), ("MIP-MIB", "mnRegIDHigh"), ("MIP-MIB", "mnRegTimeRemaining"), ("MIP-MIB", "mnRegRequestsAccepted"), ("MIP-MIB", "mnRegAgentAddress"), ("MIP-MIB", "mnRepliesIgnoredUnknownExtension"), ("MIP-MIB", "mnRepliesInvalidHomeAddress"), ("MIP-MIB", "mnRepliesHAAuthenticationFailure"), ("MIP-MIB", "mnRegRepliesRecieved"), ("MIP-MIB", "mnRegIsAccepted"), ("MIP-MIB", "mnDeRegRequestsSent"), ("MIP-MIB", "mnRegRequestsDeniedByFA"), ("MIP-MIB", "mnCOAIsLocal"), ("MIP-MIB", "mnRepliesUnknownHA"), ("MIP-MIB", "mnRegFlags"), ("MIP-MIB", "mnRepliesFAAuthenticationFailure"), ("MIP-MIB", "mnDeRegRepliesRecieved"), ("MIP-MIB", "mnRepliesUnknownFA"), ("MIP-MIB", "mnRegRequestsDeniedByHADueToID"), ("MIP-MIB", "mnRegTimeSent"), ("MIP-MIB", "mnRepliesDroppedInvalidExtension"), ("MIP-MIB", "mnRegTimeRequested"), )
faAdvertisementGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 9)).setObjects(("MIP-MIB", "faRegistrationRequired"), ("MIP-MIB", "faIsBusy"), )
maAdvertisementGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 7)).setObjects(("MIP-MIB", "maAdvsSentForSolicitation"), ("MIP-MIB", "maAdvPrefixLengthInclusion"), ("MIP-MIB", "maSolicitationsReceived"), ("MIP-MIB", "maAdvMaxRegLifetime"), ("MIP-MIB", "maAdvertisementsSent"), ("MIP-MIB", "maAdvResponseSolicitationOnly"), ("MIP-MIB", "maAdvMaxInterval"), ("MIP-MIB", "maAdvAddress"), ("MIP-MIB", "maAdvMinInterval"), ("MIP-MIB", "maAdvMaxAdvLifetime"), ("MIP-MIB", "maAdvStatus"), )
faRegistrationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 10)).setObjects(("MIP-MIB", "faVisitorRegIsAccepted"), ("MIP-MIB", "faPoorlyFormedReplies"), ("MIP-MIB", "faVisitorHomeAgentAddress"), ("MIP-MIB", "faPoorlyFormedRequests"), ("MIP-MIB", "faVisitorTimeRemaining"), ("MIP-MIB", "faVisitorRegIDLow"), ("MIP-MIB", "faHAAuthenticationFailure"), ("MIP-MIB", "faInsufficientResource"), ("MIP-MIB", "faRegRequestsReceived"), ("MIP-MIB", "faVisitorRegFlags"), ("MIP-MIB", "faVisitorRegIDHigh"), ("MIP-MIB", "faReasonUnspecified"), ("MIP-MIB", "faRegRepliesRecieved"), ("MIP-MIB", "faVJCompressionUnavailable"), ("MIP-MIB", "faVisitorTimeGranted"), ("MIP-MIB", "faRegRepliesRelayed"), ("MIP-MIB", "faHAUnreachable"), ("MIP-MIB", "faMNAuthenticationFailure"), ("MIP-MIB", "faAdmProhibited"), ("MIP-MIB", "faVisitorHomeAddress"), ("MIP-MIB", "faVisitorIPAddress"), ("MIP-MIB", "faRegRequestsRelayed"), ("MIP-MIB", "faEncapsulationUnavailable"), ("MIP-MIB", "faRegLifetimeTooLong"), )
mipSecViolationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44, 3, 1, 3)).setObjects(("MIP-MIB", "mipSecRecentViolationSPI"), ("MIP-MIB", "mipSecRecentViolationIDLow"), ("MIP-MIB", "mipSecTotalViolations"), ("MIP-MIB", "mipSecRecentViolationReason"), ("MIP-MIB", "mipSecRecentViolationTime"), ("MIP-MIB", "mipSecViolationCounter"), ("MIP-MIB", "mipSecRecentViolationIDHigh"), )

# Exports

# Module identity
mibBuilder.exportSymbols("MIP-MIB", PYSNMP_MODULE_ID=mipMIB)

# Types
mibBuilder.exportSymbols("MIP-MIB", RegistrationFlags=RegistrationFlags)

# Objects
mibBuilder.exportSymbols("MIP-MIB", mipMIB=mipMIB, mipMIBObjects=mipMIBObjects, mipSystem=mipSystem, mipEntities=mipEntities, mipEnable=mipEnable, mipEncapsulationSupported=mipEncapsulationSupported, mipSecurity=mipSecurity, mipSecAssocTable=mipSecAssocTable, mipSecAssocEntry=mipSecAssocEntry, mipSecPeerAddress=mipSecPeerAddress, mipSecSPI=mipSecSPI, mipSecAlgorithmType=mipSecAlgorithmType, mipSecAlgorithmMode=mipSecAlgorithmMode, mipSecKey=mipSecKey, mipSecReplayMethod=mipSecReplayMethod, mipSecTotalViolations=mipSecTotalViolations, mipSecViolationTable=mipSecViolationTable, mipSecViolationEntry=mipSecViolationEntry, mipSecViolatorAddress=mipSecViolatorAddress, mipSecViolationCounter=mipSecViolationCounter, mipSecRecentViolationSPI=mipSecRecentViolationSPI, mipSecRecentViolationTime=mipSecRecentViolationTime, mipSecRecentViolationIDLow=mipSecRecentViolationIDLow, mipSecRecentViolationIDHigh=mipSecRecentViolationIDHigh, mipSecRecentViolationReason=mipSecRecentViolationReason, mipMN=mipMN, mnSystem=mnSystem, mnState=mnState, mnHomeAddress=mnHomeAddress, mnHATable=mnHATable, mnHAEntry=mnHAEntry, mnHAAddress=mnHAAddress, mnCurrentHA=mnCurrentHA, mnHAStatus=mnHAStatus, mnDiscovery=mnDiscovery, mnFATable=mnFATable, mnFAEntry=mnFAEntry, mnFAAddress=mnFAAddress, mnCOA=mnCOA, mnRecentAdvReceived=mnRecentAdvReceived, mnAdvSourceAddress=mnAdvSourceAddress, mnAdvSequence=mnAdvSequence, mnAdvFlags=mnAdvFlags, mnAdvMaxRegLifetime=mnAdvMaxRegLifetime, mnAdvMaxAdvLifetime=mnAdvMaxAdvLifetime, mnAdvTimeReceived=mnAdvTimeReceived, mnSolicitationsSent=mnSolicitationsSent, mnAdvertisementsReceived=mnAdvertisementsReceived, mnAdvsDroppedInvalidExtension=mnAdvsDroppedInvalidExtension, mnAdvsIgnoredUnknownExtension=mnAdvsIgnoredUnknownExtension, mnMoveFromHAToFA=mnMoveFromHAToFA, mnMoveFromFAToFA=mnMoveFromFAToFA, mnMoveFromFAToHA=mnMoveFromFAToHA, mnGratuitousARPsSend=mnGratuitousARPsSend, mnAgentRebootsDectected=mnAgentRebootsDectected, mnRegistration=mnRegistration, mnRegistrationTable=mnRegistrationTable, mnRegistrationEntry=mnRegistrationEntry, mnRegAgentAddress=mnRegAgentAddress, mnRegCOA=mnRegCOA, mnRegFlags=mnRegFlags, mnRegIDLow=mnRegIDLow, mnRegIDHigh=mnRegIDHigh, mnRegTimeRequested=mnRegTimeRequested, mnRegTimeRemaining=mnRegTimeRemaining, mnRegTimeSent=mnRegTimeSent, mnRegIsAccepted=mnRegIsAccepted, mnCOAIsLocal=mnCOAIsLocal, mnRegRequestsSent=mnRegRequestsSent, mnDeRegRequestsSent=mnDeRegRequestsSent, mnRegRepliesRecieved=mnRegRepliesRecieved, mnDeRegRepliesRecieved=mnDeRegRepliesRecieved, mnRepliesInvalidHomeAddress=mnRepliesInvalidHomeAddress, mnRepliesUnknownHA=mnRepliesUnknownHA, mnRepliesUnknownFA=mnRepliesUnknownFA, mnRepliesInvalidID=mnRepliesInvalidID, mnRepliesDroppedInvalidExtension=mnRepliesDroppedInvalidExtension, mnRepliesIgnoredUnknownExtension=mnRepliesIgnoredUnknownExtension, mnRepliesHAAuthenticationFailure=mnRepliesHAAuthenticationFailure, mnRepliesFAAuthenticationFailure=mnRepliesFAAuthenticationFailure, mnRegRequestsAccepted=mnRegRequestsAccepted, mnRegRequestsDeniedByHA=mnRegRequestsDeniedByHA, mnRegRequestsDeniedByFA=mnRegRequestsDeniedByFA, mnRegRequestsDeniedByHADueToID=mnRegRequestsDeniedByHADueToID, mnRegRequestsWithDirectedBroadcast=mnRegRequestsWithDirectedBroadcast, mipMA=mipMA, maAdvertisement=maAdvertisement, maAdvConfigTable=maAdvConfigTable, maAdvConfigEntry=maAdvConfigEntry, maInterfaceAddress=maInterfaceAddress, maAdvMaxRegLifetime=maAdvMaxRegLifetime, maAdvPrefixLengthInclusion=maAdvPrefixLengthInclusion, maAdvAddress=maAdvAddress, maAdvMaxInterval=maAdvMaxInterval, maAdvMinInterval=maAdvMinInterval, maAdvMaxAdvLifetime=maAdvMaxAdvLifetime, maAdvResponseSolicitationOnly=maAdvResponseSolicitationOnly, maAdvStatus=maAdvStatus, maAdvertisementsSent=maAdvertisementsSent, maAdvsSentForSolicitation=maAdvsSentForSolicitation, maSolicitationsReceived=maSolicitationsReceived, mipFA=mipFA, faSystem=faSystem, faCOATable=faCOATable, faCOAEntry=faCOAEntry, faSupportedCOA=faSupportedCOA, faCOAStatus=faCOAStatus, faAdvertisement=faAdvertisement, faIsBusy=faIsBusy, faRegistrationRequired=faRegistrationRequired, faRegistration=faRegistration, faVisitorTable=faVisitorTable, faVisitorEntry=faVisitorEntry, faVisitorIPAddress=faVisitorIPAddress, faVisitorHomeAddress=faVisitorHomeAddress, faVisitorHomeAgentAddress=faVisitorHomeAgentAddress, faVisitorTimeGranted=faVisitorTimeGranted, faVisitorTimeRemaining=faVisitorTimeRemaining, faVisitorRegFlags=faVisitorRegFlags, faVisitorRegIDLow=faVisitorRegIDLow, faVisitorRegIDHigh=faVisitorRegIDHigh, faVisitorRegIsAccepted=faVisitorRegIsAccepted, faRegRequestsReceived=faRegRequestsReceived, faRegRequestsRelayed=faRegRequestsRelayed, faReasonUnspecified=faReasonUnspecified, faAdmProhibited=faAdmProhibited)
mibBuilder.exportSymbols("MIP-MIB", faInsufficientResource=faInsufficientResource, faMNAuthenticationFailure=faMNAuthenticationFailure, faRegLifetimeTooLong=faRegLifetimeTooLong, faPoorlyFormedRequests=faPoorlyFormedRequests, faEncapsulationUnavailable=faEncapsulationUnavailable, faVJCompressionUnavailable=faVJCompressionUnavailable, faHAUnreachable=faHAUnreachable, faRegRepliesRecieved=faRegRepliesRecieved, faRegRepliesRelayed=faRegRepliesRelayed, faHAAuthenticationFailure=faHAAuthenticationFailure, faPoorlyFormedReplies=faPoorlyFormedReplies, mipHA=mipHA, haRegistration=haRegistration, haMobilityBindingTable=haMobilityBindingTable, haMobilityBindingEntry=haMobilityBindingEntry, haMobilityBindingMN=haMobilityBindingMN, haMobilityBindingCOA=haMobilityBindingCOA, haMobilityBindingSourceAddress=haMobilityBindingSourceAddress, haMobilityBindingRegFlags=haMobilityBindingRegFlags, haMobilityBindingRegIDLow=haMobilityBindingRegIDLow, haMobilityBindingRegIDHigh=haMobilityBindingRegIDHigh, haMobilityBindingTimeGranted=haMobilityBindingTimeGranted, haMobilityBindingTimeRemaining=haMobilityBindingTimeRemaining, haCounterTable=haCounterTable, haCounterEntry=haCounterEntry, haServiceRequestsAccepted=haServiceRequestsAccepted, haServiceRequestsDenied=haServiceRequestsDenied, haOverallServiceTime=haOverallServiceTime, haRecentServiceAcceptedTime=haRecentServiceAcceptedTime, haRecentServiceDeniedTime=haRecentServiceDeniedTime, haRecentServiceDeniedCode=haRecentServiceDeniedCode, haRegistrationAccepted=haRegistrationAccepted, haMultiBindingUnsupported=haMultiBindingUnsupported, haReasonUnspecified=haReasonUnspecified, haAdmProhibited=haAdmProhibited, haInsufficientResource=haInsufficientResource, haMNAuthenticationFailure=haMNAuthenticationFailure, haFAAuthenticationFailure=haFAAuthenticationFailure, haIDMismatch=haIDMismatch, haPoorlyFormedRequest=haPoorlyFormedRequest, haTooManyBindings=haTooManyBindings, haUnknownHA=haUnknownHA, haGratuitiousARPsSent=haGratuitiousARPsSent, haProxyARPsSent=haProxyARPsSent, haRegRequestsReceived=haRegRequestsReceived, haDeRegRequestsReceived=haDeRegRequestsReceived, haRegRepliesSent=haRegRepliesSent, haDeRegRepliesSent=haDeRegRepliesSent, mipMIBNotificationPrefix=mipMIBNotificationPrefix, mipMIBNotifications=mipMIBNotifications, mipMIBConformance=mipMIBConformance, mipGroups=mipGroups, mipCompliances=mipCompliances)

# Notifications
mibBuilder.exportSymbols("MIP-MIB", mipAuthFailure=mipAuthFailure)

# Groups
mibBuilder.exportSymbols("MIP-MIB", haRegistrationGroup=haRegistrationGroup, faSystemGroup=faSystemGroup, mipSecNotificationsGroup=mipSecNotificationsGroup, mipSecAssociationGroup=mipSecAssociationGroup, mnSystemGroup=mnSystemGroup, mipSystemGroup=mipSystemGroup, haRegNodeCountersGroup=haRegNodeCountersGroup, mnDiscoveryGroup=mnDiscoveryGroup, mnRegistrationGroup=mnRegistrationGroup, faAdvertisementGroup=faAdvertisementGroup, maAdvertisementGroup=maAdvertisementGroup, faRegistrationGroup=faRegistrationGroup, mipSecViolationGroup=mipSecViolationGroup)
