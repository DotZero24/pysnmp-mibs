_G='rldot1dStpTrapVrblifIndex'
_F='rldot1dStpTrapVrblVID'
_E='EDGECORE-BRIDGEMIBOBJECTS-MIB'
_D='current'
_C='rndErrorSeverity'
_B='rndErrorDesc'
_A='EDGECORE-DEVICEPARAMS-MIB'
if'mibBuilder'not in globals():import sys;sys.stderr.write(__doc__);sys.exit(1)
Integer,OctetString,ObjectIdentifier=mibBuilder.importSymbols('ASN1','Integer','OctetString','ObjectIdentifier')
NamedValues,=mibBuilder.importSymbols('ASN1-ENUMERATION','NamedValues')
ConstraintsIntersection,ConstraintsUnion,SingleValueConstraint,ValueRangeConstraint,ValueSizeConstraint=mibBuilder.importSymbols('ASN1-REFINEMENT','ConstraintsIntersection','ConstraintsUnion','SingleValueConstraint','ValueRangeConstraint','ValueSizeConstraint')
rldot1dStpTrapVrblVID,rldot1dStpTrapVrblifIndex=mibBuilder.importSymbols(_E,_F,_G)
rndErrorDesc,rndErrorSeverity=mibBuilder.importSymbols(_A,_B,_C)
rndNotifications,=mibBuilder.importSymbols('EDGECORE-MIB','rndNotifications')
ModuleCompliance,NotificationGroup=mibBuilder.importSymbols('SNMPv2-CONF','ModuleCompliance','NotificationGroup')
Bits,Counter32,Counter64,Gauge32,Integer32,IpAddress,ModuleIdentity,MibIdentifier,NotificationType,ObjectIdentity,MibScalar,MibTable,MibTableRow,MibTableColumn,TimeTicks,Unsigned32,iso=mibBuilder.importSymbols('SNMPv2-SMI','Bits','Counter32','Counter64','Gauge32','Integer32','IpAddress','ModuleIdentity','MibIdentifier','NotificationType','ObjectIdentity','MibScalar','MibTable','MibTableRow','MibTableColumn','TimeTicks','Unsigned32','iso')
DisplayString,PhysAddress,TextualConvention=mibBuilder.importSymbols('SNMPv2-TC','DisplayString','PhysAddress','TextualConvention')
rxOverflowHWFault=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,3))
rxOverflowHWFault.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rxOverflowHWFault.setStatus(_D)
txOverflowHWFault=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,4))
txOverflowHWFault.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:txOverflowHWFault.setStatus(_D)
routeTableOverflow=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,5))
routeTableOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:routeTableOverflow.setStatus(_D)
resetRequired=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,10))
resetRequired.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:resetRequired.setStatus(_D)
endTftp=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,12))
endTftp.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:endTftp.setStatus(_D)
abortTftp=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,13))
abortTftp.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:abortTftp.setStatus(_D)
startTftp=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,14))
startTftp.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:startTftp.setStatus(_D)
faultBackUp=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,23))
faultBackUp.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:faultBackUp.setStatus(_D)
mainLinkUp=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,24))
mainLinkUp.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:mainLinkUp.setStatus(_D)
ipxRipTblOverflow=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,36))
ipxRipTblOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:ipxRipTblOverflow.setStatus(_D)
ipxSapTblOverflow=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,37))
ipxSapTblOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:ipxSapTblOverflow.setStatus(_D)
facsAccessVoilation=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,49))
facsAccessVoilation.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:facsAccessVoilation.setStatus(_D)
autoConfigurationCompleted=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,50))
autoConfigurationCompleted.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:autoConfigurationCompleted.setStatus(_D)
forwardingTabOverflow=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,51))
forwardingTabOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:forwardingTabOverflow.setStatus(_D)
framRelaySwitchConnectionUp=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,53))
framRelaySwitchConnectionUp.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:framRelaySwitchConnectionUp.setStatus(_D)
framRelaySwitchConnectionDown=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,54))
framRelaySwitchConnectionDown.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:framRelaySwitchConnectionDown.setStatus(_D)
errorsDuringInit=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,61))
errorsDuringInit.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:errorsDuringInit.setStatus(_D)
vlanDynPortAdded=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,66))
vlanDynPortAdded.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:vlanDynPortAdded.setStatus(_D)
vlanDynPortRemoved=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,67))
vlanDynPortRemoved.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:vlanDynPortRemoved.setStatus(_D)
rsSDclientsTableOverflow=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,68))
rsSDclientsTableOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsSDclientsTableOverflow.setStatus(_D)
rsSDinactiveServer=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,69))
rsSDinactiveServer.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsSDinactiveServer.setStatus(_D)
rsIpZhrConnectionsTableOverflow=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,70))
rsIpZhrConnectionsTableOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsIpZhrConnectionsTableOverflow.setStatus(_D)
rsIpZhrReqStaticConnNotAccepted=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,71))
rsIpZhrReqStaticConnNotAccepted.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsIpZhrReqStaticConnNotAccepted.setStatus(_D)
rsIpZhrVirtualIpAsSource=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,72))
rsIpZhrVirtualIpAsSource.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsIpZhrVirtualIpAsSource.setStatus(_D)
rsIpZhrNotAllocVirtualIp=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,73))
rsIpZhrNotAllocVirtualIp.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsIpZhrNotAllocVirtualIp.setStatus(_D)
rsSnmpSetRequestInSpecialCfgState=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,74))
rsSnmpSetRequestInSpecialCfgState.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsSnmpSetRequestInSpecialCfgState.setStatus(_D)
rsPingCompletion=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,136))
rsPingCompletion.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsPingCompletion.setStatus(_D)
pppSecurityViolation=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,137))
pppSecurityViolation.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:pppSecurityViolation.setStatus(_D)
frDLCIStatudChange=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,138))
frDLCIStatudChange.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:frDLCIStatudChange.setStatus(_D)
papFailedCommunication=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,139))
papFailedCommunication.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:papFailedCommunication.setStatus(_D)
chapFailedCommunication=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,140))
chapFailedCommunication.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:chapFailedCommunication.setStatus(_D)
rsWSDRedundancySwitch=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,141))
rsWSDRedundancySwitch.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsWSDRedundancySwitch.setStatus(_D)
rsDhcpAllocationFailure=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,142))
rsDhcpAllocationFailure.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rsDhcpAllocationFailure.setStatus(_D)
rlIpFftStnOverflow=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,145))
rlIpFftStnOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlIpFftStnOverflow.setStatus(_D)
rlIpFftSubOverflow=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,146))
rlIpFftSubOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlIpFftSubOverflow.setStatus(_D)
rlIpxFftStnOverflow=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,147))
rlIpxFftStnOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlIpxFftStnOverflow.setStatus(_D)
rlIpxFftSubOverflow=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,148))
rlIpxFftSubOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlIpxFftSubOverflow.setStatus(_D)
rlIpmFftOverflow=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,149))
rlIpmFftOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlIpmFftOverflow.setStatus(_D)
rlPhysicalDescriptionChanged=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,150))
rlPhysicalDescriptionChanged.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlPhysicalDescriptionChanged.setStatus(_D)
rldot1dStpPortStateForwarding=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,151))
rldot1dStpPortStateForwarding.setObjects(*((_A,_B),(_A,_C),(_E,_G),(_E,_F)))
if mibBuilder.loadTexts:rldot1dStpPortStateForwarding.setStatus(_D)
rldot1dStpPortStateNotForwarding=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,152))
rldot1dStpPortStateNotForwarding.setObjects(*((_A,_B),(_A,_C),(_E,_G),(_E,_F)))
if mibBuilder.loadTexts:rldot1dStpPortStateNotForwarding.setStatus(_D)
rlPolicyDropPacketTrap=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,153))
rlPolicyDropPacketTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlPolicyDropPacketTrap.setStatus(_D)
rlPolicyForwardPacketTrap=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,154))
rlPolicyForwardPacketTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlPolicyForwardPacketTrap.setStatus(_D)
rlIgmpProxyTableOverflow=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,156))
rlIgmpProxyTableOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlIgmpProxyTableOverflow.setStatus(_D)
rlIgmpV1MsgReceived=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,157))
rlIgmpV1MsgReceived.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlIgmpV1MsgReceived.setStatus(_D)
rlVrrpEntriesDeleted=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,158))
rlVrrpEntriesDeleted.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlVrrpEntriesDeleted.setStatus(_D)
rlHotSwapTrap=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,159))
rlHotSwapTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlHotSwapTrap.setStatus(_D)
rlTrunkPortAddedTrap=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,160))
rlTrunkPortAddedTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlTrunkPortAddedTrap.setStatus(_D)
rlTrunkPortRemovedTrap=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,161))
rlTrunkPortRemovedTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlTrunkPortRemovedTrap.setStatus(_D)
rlTrunkPortNotCapableTrap=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,162))
rlTrunkPortNotCapableTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlTrunkPortNotCapableTrap.setStatus(_D)
rlLockPortTrap=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,170))
rlLockPortTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlLockPortTrap.setStatus(_D)
vlanDynVlanAdded=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,171))
vlanDynVlanAdded.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:vlanDynVlanAdded.setStatus(_D)
vlanDynVlanRemoved=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,172))
vlanDynVlanRemoved.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:vlanDynVlanRemoved.setStatus(_D)
vlanDynamicToStatic=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,173))
vlanDynamicToStatic.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:vlanDynamicToStatic.setStatus(_D)
vlanStaticToDynamic=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,174))
vlanStaticToDynamic.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:vlanStaticToDynamic.setStatus(_D)
dstrSysLog=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,175))
dstrSysLog.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:dstrSysLog.setStatus(_D)
rlEnvMonFanStateChange=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,176))
rlEnvMonFanStateChange.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlEnvMonFanStateChange.setStatus(_D)
rlEnvMonPowerSupplyStateChange=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,177))
rlEnvMonPowerSupplyStateChange.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlEnvMonPowerSupplyStateChange.setStatus(_D)
rlStackStateChange=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,178))
rlStackStateChange.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlStackStateChange.setStatus(_D)
rlEnvMonTemperatureRisingAlarm=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,179))
rlEnvMonTemperatureRisingAlarm.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlEnvMonTemperatureRisingAlarm.setStatus(_D)
rlBrgMacAddFailedTrap=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,183))
rlBrgMacAddFailedTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlBrgMacAddFailedTrap.setStatus(_D)
rldot1xPortStatusAuthorizedTrap=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,184))
rldot1xPortStatusAuthorizedTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rldot1xPortStatusAuthorizedTrap.setStatus(_D)
rldot1xPortStatusUnauthorizedTrap=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,185))
rldot1xPortStatusUnauthorizedTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rldot1xPortStatusUnauthorizedTrap.setStatus(_D)
swIfTablePortLock=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,192))
swIfTablePortLock.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:swIfTablePortLock.setStatus(_D)
swIfTablePortUnLock=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,193))
swIfTablePortUnLock.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:swIfTablePortUnLock.setStatus(_D)
rlAAAUserLocked=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,194))
rlAAAUserLocked.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlAAAUserLocked.setStatus(_D)
bpduGuardPortSuspended=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,202))
bpduGuardPortSuspended.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:bpduGuardPortSuspended.setStatus(_D)
rldot1xSupplicantMacAuthorizedTrap=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,203))
rldot1xSupplicantMacAuthorizedTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rldot1xSupplicantMacAuthorizedTrap.setStatus(_D)
rldot1xSupplicantMacUnauthorizedTrap=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,204))
rldot1xSupplicantMacUnauthorizedTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rldot1xSupplicantMacUnauthorizedTrap.setStatus(_D)
stpLoopbackDetection=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,205))
stpLoopbackDetection.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:stpLoopbackDetection.setStatus(_D)
stpLoopbackDetectionResolved=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,206))
stpLoopbackDetectionResolved.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:stpLoopbackDetectionResolved.setStatus(_D)
loopbackDetectionPortSuspended=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,207))
loopbackDetectionPortSuspended.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:loopbackDetectionPortSuspended.setStatus(_D)
rlPortSuspended=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,213))
rlPortSuspended.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlPortSuspended.setStatus(_D)
rlSpecialBpduDbOverflow=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,214))
rlSpecialBpduDbOverflow.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlSpecialBpduDbOverflow.setStatus(_D)
rldot1xSupplicantLoggedOutTrap=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,215))
rldot1xSupplicantLoggedOutTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rldot1xSupplicantLoggedOutTrap.setStatus(_D)
rldot1xPortControlModeNotAutoTrap=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,216))
rldot1xPortControlModeNotAutoTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rldot1xPortControlModeNotAutoTrap.setStatus(_D)
rlEeeLldpMultipleNeighbours=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,217))
rlEeeLldpMultipleNeighbours.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlEeeLldpMultipleNeighbours.setStatus(_D)
rlEeeLldpSingleNeighbour=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,218))
rlEeeLldpSingleNeighbour.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlEeeLldpSingleNeighbour.setStatus(_D)
rlStackVersionUpgradeTrap=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,222))
rlStackVersionUpgradeTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlStackVersionUpgradeTrap.setStatus(_D)
rlStackVersionDowngradeTrap=NotificationType((1,3,6,1,4,1,259,10,1,14,89,0,223))
rlStackVersionDowngradeTrap.setObjects(*((_A,_B),(_A,_C)))
if mibBuilder.loadTexts:rlStackVersionDowngradeTrap.setStatus(_D)
mibBuilder.exportSymbols('EDGECORE-TRAPS-MIB',**{'rxOverflowHWFault':rxOverflowHWFault,'txOverflowHWFault':txOverflowHWFault,'routeTableOverflow':routeTableOverflow,'resetRequired':resetRequired,'endTftp':endTftp,'abortTftp':abortTftp,'startTftp':startTftp,'faultBackUp':faultBackUp,'mainLinkUp':mainLinkUp,'ipxRipTblOverflow':ipxRipTblOverflow,'ipxSapTblOverflow':ipxSapTblOverflow,'facsAccessVoilation':facsAccessVoilation,'autoConfigurationCompleted':autoConfigurationCompleted,'forwardingTabOverflow':forwardingTabOverflow,'framRelaySwitchConnectionUp':framRelaySwitchConnectionUp,'framRelaySwitchConnectionDown':framRelaySwitchConnectionDown,'errorsDuringInit':errorsDuringInit,'vlanDynPortAdded':vlanDynPortAdded,'vlanDynPortRemoved':vlanDynPortRemoved,'rsSDclientsTableOverflow':rsSDclientsTableOverflow,'rsSDinactiveServer':rsSDinactiveServer,'rsIpZhrConnectionsTableOverflow':rsIpZhrConnectionsTableOverflow,'rsIpZhrReqStaticConnNotAccepted':rsIpZhrReqStaticConnNotAccepted,'rsIpZhrVirtualIpAsSource':rsIpZhrVirtualIpAsSource,'rsIpZhrNotAllocVirtualIp':rsIpZhrNotAllocVirtualIp,'rsSnmpSetRequestInSpecialCfgState':rsSnmpSetRequestInSpecialCfgState,'rsPingCompletion':rsPingCompletion,'pppSecurityViolation':pppSecurityViolation,'frDLCIStatudChange':frDLCIStatudChange,'papFailedCommunication':papFailedCommunication,'chapFailedCommunication':chapFailedCommunication,'rsWSDRedundancySwitch':rsWSDRedundancySwitch,'rsDhcpAllocationFailure':rsDhcpAllocationFailure,'rlIpFftStnOverflow':rlIpFftStnOverflow,'rlIpFftSubOverflow':rlIpFftSubOverflow,'rlIpxFftStnOverflow':rlIpxFftStnOverflow,'rlIpxFftSubOverflow':rlIpxFftSubOverflow,'rlIpmFftOverflow':rlIpmFftOverflow,'rlPhysicalDescriptionChanged':rlPhysicalDescriptionChanged,'rldot1dStpPortStateForwarding':rldot1dStpPortStateForwarding,'rldot1dStpPortStateNotForwarding':rldot1dStpPortStateNotForwarding,'rlPolicyDropPacketTrap':rlPolicyDropPacketTrap,'rlPolicyForwardPacketTrap':rlPolicyForwardPacketTrap,'rlIgmpProxyTableOverflow':rlIgmpProxyTableOverflow,'rlIgmpV1MsgReceived':rlIgmpV1MsgReceived,'rlVrrpEntriesDeleted':rlVrrpEntriesDeleted,'rlHotSwapTrap':rlHotSwapTrap,'rlTrunkPortAddedTrap':rlTrunkPortAddedTrap,'rlTrunkPortRemovedTrap':rlTrunkPortRemovedTrap,'rlTrunkPortNotCapableTrap':rlTrunkPortNotCapableTrap,'rlLockPortTrap':rlLockPortTrap,'vlanDynVlanAdded':vlanDynVlanAdded,'vlanDynVlanRemoved':vlanDynVlanRemoved,'vlanDynamicToStatic':vlanDynamicToStatic,'vlanStaticToDynamic':vlanStaticToDynamic,'dstrSysLog':dstrSysLog,'rlEnvMonFanStateChange':rlEnvMonFanStateChange,'rlEnvMonPowerSupplyStateChange':rlEnvMonPowerSupplyStateChange,'rlStackStateChange':rlStackStateChange,'rlEnvMonTemperatureRisingAlarm':rlEnvMonTemperatureRisingAlarm,'rlBrgMacAddFailedTrap':rlBrgMacAddFailedTrap,'rldot1xPortStatusAuthorizedTrap':rldot1xPortStatusAuthorizedTrap,'rldot1xPortStatusUnauthorizedTrap':rldot1xPortStatusUnauthorizedTrap,'swIfTablePortLock':swIfTablePortLock,'swIfTablePortUnLock':swIfTablePortUnLock,'rlAAAUserLocked':rlAAAUserLocked,'bpduGuardPortSuspended':bpduGuardPortSuspended,'rldot1xSupplicantMacAuthorizedTrap':rldot1xSupplicantMacAuthorizedTrap,'rldot1xSupplicantMacUnauthorizedTrap':rldot1xSupplicantMacUnauthorizedTrap,'stpLoopbackDetection':stpLoopbackDetection,'stpLoopbackDetectionResolved':stpLoopbackDetectionResolved,'loopbackDetectionPortSuspended':loopbackDetectionPortSuspended,'rlPortSuspended':rlPortSuspended,'rlSpecialBpduDbOverflow':rlSpecialBpduDbOverflow,'rldot1xSupplicantLoggedOutTrap':rldot1xSupplicantLoggedOutTrap,'rldot1xPortControlModeNotAutoTrap':rldot1xPortControlModeNotAutoTrap,'rlEeeLldpMultipleNeighbours':rlEeeLldpMultipleNeighbours,'rlEeeLldpSingleNeighbour':rlEeeLldpSingleNeighbour,'rlStackVersionUpgradeTrap':rlStackVersionUpgradeTrap,'rlStackVersionDowngradeTrap':rlStackVersionDowngradeTrap})