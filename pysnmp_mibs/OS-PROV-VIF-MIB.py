#
# PySNMP MIB module OS-PROV-VIF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/rob/Code/pysnmp-mibs/mibs/mrv/OS-PROV-VIF-MIB
# Produced by pysmi-1.1.12 at Mon Aug  4 17:02:34 2025
# On host macmini.vegmond.io platform Darwin version 24.5.0 by user rob
# Using Python version 3.12.8 (main, Dec  3 2024, 18:42:41) [Clang 16.0.0 (clang-1600.0.26.4)]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
InetAddressType, InetAddress, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressPrefixLength")
oaOptiSwitch, EntryValidator = mibBuilder.importSymbols("OS-COMMON-TC-MIB", "oaOptiSwitch", "EntryValidator")
osEthServId, osEthServEntry = mibBuilder.importSymbols("OS-ETH-SERV-MIB", "osEthServId", "osEthServEntry")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32, Integer32, Gauge32, ModuleIdentity, TimeTicks, NotificationType, Counter32, Bits, IpAddress, iso, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32", "Integer32", "Gauge32", "ModuleIdentity", "TimeTicks", "NotificationType", "Counter32", "Bits", "IpAddress", "iso", "ObjectIdentity", "Counter64")
TextualConvention, DisplayString, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "MacAddress")
osProvVif = ModuleIdentity((1, 3, 6, 1, 4, 1, 6926, 2, 12))
osProvVif.setRevisions(('2019-05-26 00:00', '2017-10-22 00:00', '2015-01-18 00:00', '2011-10-24 00:00', '2010-10-24 00:00', '2009-01-09 00:00',))
if mibBuilder.loadTexts: osProvVif.setLastUpdated('201905260000Z')
if mibBuilder.loadTexts: osProvVif.setOrganization('MRV Communications, Inc.')
osProvVifCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 6926, 2, 12, 1))
osProvVifConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6926, 2, 12, 100))
osProvVifMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6926, 2, 12, 100, 1))
osProvVifMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6926, 2, 12, 100, 2))
osProvVifAddrTypesSupported = MibScalar((1, 3, 6, 1, 4, 1, 6926, 2, 12, 1, 1), Bits().clone(namedValues=NamedValues(("ipv4", 0), ("ipv6", 1), ("ipv4z", 2), ("ipv6z", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osProvVifAddrTypesSupported.setStatus('current')
osProvVifMgmtTypesSupported = MibScalar((1, 3, 6, 1, 4, 1, 6926, 2, 12, 1, 2), Bits().clone(namedValues=NamedValues(("ipv4", 0), ("ipv6", 1), ("ipv4z", 2), ("ipv6z", 3), ("dns", 4), ("all", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osProvVifMgmtTypesSupported.setStatus('current')
osProvVifTable = MibTable((1, 3, 6, 1, 4, 1, 6926, 2, 12, 5), )
if mibBuilder.loadTexts: osProvVifTable.setStatus('current')
osProvVifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6926, 2, 12, 5, 1), )
osEthServEntry.registerAugmentions(("OS-PROV-VIF-MIB", "osProvVifEntry"))
osProvVifEntry.setIndexNames(*osEthServEntry.getIndexNames())
if mibBuilder.loadTexts: osProvVifEntry.setStatus('current')
osProvVifIpDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 12, 5, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osProvVifIpDhcp.setStatus('current')
osProvVifIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 12, 5, 1, 5), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osProvVifIpType.setStatus('obsolete')
osProvVifIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 12, 5, 1, 6), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osProvVifIpAddr.setStatus('current')
osProvVifPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 12, 5, 1, 7), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osProvVifPrefixLength.setStatus('current')
osProvVifSlaAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 12, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inService", 0), ("serviceTurnUp", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osProvVifSlaAvailable.setStatus('current')
osProvVifRespMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 12, 5, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osProvVifRespMac.setStatus('current')
osProvVifMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 12, 5, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 16000)).clone(1632)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: osProvVifMtuSize.setStatus('current')
osProvVifIpv6Dhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 12, 5, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osProvVifIpv6Dhcp.setStatus('current')
osProvVifIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 12, 5, 1, 16), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osProvVifIpv6Addr.setStatus('current')
osProvVifIpv6PrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 12, 5, 1, 17), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osProvVifIpv6PrefixLength.setStatus('current')
osProvVifMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 6926, 2, 12, 6), )
if mibBuilder.loadTexts: osProvVifMgmtTable.setStatus('current')
osProvVifMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6926, 2, 12, 6, 1), ).setIndexNames((0, "OS-ETH-SERV-MIB", "osEthServId"), (0, "OS-PROV-VIF-MIB", "osProvVifMgmtIpType"), (0, "OS-PROV-VIF-MIB", "osProvVifMgmtIpAddr"), (0, "OS-PROV-VIF-MIB", "osProvVifMgmtPfxLen"))
if mibBuilder.loadTexts: osProvVifMgmtEntry.setStatus('current')
osProvVifMgmtIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 16, 99))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("dns", 16), ("all", 99))))
if mibBuilder.loadTexts: osProvVifMgmtIpType.setStatus('current')
osProvVifMgmtIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 12, 6, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: osProvVifMgmtIpAddr.setStatus('current')
osProvVifMgmtPfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 12, 6, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: osProvVifMgmtPfxLen.setStatus('current')
osProvVifMgmtPrtcls = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 12, 6, 1, 4), Bits().clone(namedValues=NamedValues(("ssh", 0), ("telnet", 1), ("tftp", 2), ("snmp", 3), ("http", 4), ("reserved", 5), ("netconf", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: osProvVifMgmtPrtcls.setStatus('current')
osProvVifMgmtValidator = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 12, 6, 1, 5), EntryValidator()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: osProvVifMgmtValidator.setStatus('current')
osProvVifMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6926, 2, 12, 100, 1, 1)).setObjects(("OS-PROV-VIF-MIB", "osProvVifMandatoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    osProvVifMIBCompliance = osProvVifMIBCompliance.setStatus('current')
osProvVifMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6926, 2, 12, 100, 2, 1)).setObjects(("OS-PROV-VIF-MIB", "osProvVifAddrTypesSupported"), ("OS-PROV-VIF-MIB", "osProvVifMgmtTypesSupported"), ("OS-PROV-VIF-MIB", "osProvVifIpDhcp"), ("OS-PROV-VIF-MIB", "osProvVifIpAddr"), ("OS-PROV-VIF-MIB", "osProvVifPrefixLength"), ("OS-PROV-VIF-MIB", "osProvVifSlaAvailable"), ("OS-PROV-VIF-MIB", "osProvVifRespMac"), ("OS-PROV-VIF-MIB", "osProvVifMtuSize"), ("OS-PROV-VIF-MIB", "osProvVifIpv6Dhcp"), ("OS-PROV-VIF-MIB", "osProvVifIpv6Addr"), ("OS-PROV-VIF-MIB", "osProvVifIpv6PrefixLength"), ("OS-PROV-VIF-MIB", "osProvVifMgmtPrtcls"), ("OS-PROV-VIF-MIB", "osProvVifMgmtValidator"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    osProvVifMandatoryGroup = osProvVifMandatoryGroup.setStatus('current')
osProvVifObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6926, 2, 12, 100, 2, 3)).setObjects(("OS-PROV-VIF-MIB", "osProvVifIpType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    osProvVifObsoleteGroup = osProvVifObsoleteGroup.setStatus('obsolete')
mibBuilder.exportSymbols("OS-PROV-VIF-MIB", osProvVifMgmtValidator=osProvVifMgmtValidator, osProvVifMIBCompliance=osProvVifMIBCompliance, osProvVifMgmtPfxLen=osProvVifMgmtPfxLen, osProvVifMgmtTypesSupported=osProvVifMgmtTypesSupported, osProvVifIpDhcp=osProvVifIpDhcp, osProvVifCapabilities=osProvVifCapabilities, osProvVifMgmtPrtcls=osProvVifMgmtPrtcls, osProvVifMIBGroups=osProvVifMIBGroups, osProvVifIpv6Dhcp=osProvVifIpv6Dhcp, osProvVifIpv6PrefixLength=osProvVifIpv6PrefixLength, osProvVifRespMac=osProvVifRespMac, osProvVifConformance=osProvVifConformance, osProvVifMandatoryGroup=osProvVifMandatoryGroup, osProvVifIpv6Addr=osProvVifIpv6Addr, osProvVifPrefixLength=osProvVifPrefixLength, osProvVifAddrTypesSupported=osProvVifAddrTypesSupported, osProvVifMtuSize=osProvVifMtuSize, osProvVifMgmtIpAddr=osProvVifMgmtIpAddr, osProvVifSlaAvailable=osProvVifSlaAvailable, osProvVifTable=osProvVifTable, osProvVifMgmtEntry=osProvVifMgmtEntry, osProvVifEntry=osProvVifEntry, osProvVifObsoleteGroup=osProvVifObsoleteGroup, osProvVifIpAddr=osProvVifIpAddr, osProvVifMgmtTable=osProvVifMgmtTable, osProvVifMgmtIpType=osProvVifMgmtIpType, osProvVifIpType=osProvVifIpType, osProvVifMIBCompliances=osProvVifMIBCompliances, osProvVif=osProvVif, PYSNMP_MODULE_ID=osProvVif)
