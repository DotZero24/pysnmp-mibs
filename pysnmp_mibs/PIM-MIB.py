# PySNMP SMI module. Autogenerated from smidump -f python PIM-MIB
# by libsmi2pysnmp-0.0.6-alpha at Thu Apr  6 13:19:29 2006,
# Python version (2, 4, 0, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
( ipMRouteGroup, ipMRouteNextHopAddress, ipMRouteNextHopGroup, ipMRouteNextHopIfIndex, ipMRouteNextHopSource, ipMRouteNextHopSourceMask, ipMRouteSource, ipMRouteSourceMask, ) = mibBuilder.importSymbols("IPMROUTE-STD-MIB", "ipMRouteGroup", "ipMRouteNextHopAddress", "ipMRouteNextHopGroup", "ipMRouteNextHopIfIndex", "ipMRouteNextHopSource", "ipMRouteNextHopSourceMask", "ipMRouteSource", "ipMRouteSourceMask")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, experimental, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "experimental")
( RowStatus, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue")

# Objects

pimMIB = ModuleIdentity((1, 3, 6, 1, 3, 61)).setRevisions(("2000-09-28 00:00",))
pimMIBObjects = MibIdentifier((1, 3, 6, 1, 3, 61, 1))
pimTraps = MibIdentifier((1, 3, 6, 1, 3, 61, 1, 0))
pim = MibIdentifier((1, 3, 6, 1, 3, 61, 1, 1))
pimJoinPruneInterval = MibScalar((1, 3, 6, 1, 3, 61, 1, 1, 1), Integer32()).setMaxAccess("readwrite").setUnits("seconds")
pimInterfaceTable = MibTable((1, 3, 6, 1, 3, 61, 1, 1, 2))
pimInterfaceEntry = MibTableRow((1, 3, 6, 1, 3, 61, 1, 1, 2, 1)).setIndexNames((0, "PIM-MIB", "pimInterfaceIfIndex"))
pimInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
pimInterfaceAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
pimInterfaceNetMask = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
pimInterfaceMode = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(("dense", 1), ("sparse", 2), ("sparseDense", 3), )).clone(1)).setMaxAccess("readwrite")
pimInterfaceDR = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
pimInterfaceHelloInterval = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 6), Integer32().clone(30)).setMaxAccess("readwrite")
pimInterfaceStatus = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 7), RowStatus()).setMaxAccess("readwrite")
pimInterfaceJoinPruneInterval = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
pimInterfaceCBSRPreference = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 255)).clone(0)).setMaxAccess("readwrite")
pimNeighborTable = MibTable((1, 3, 6, 1, 3, 61, 1, 1, 3))
pimNeighborEntry = MibTableRow((1, 3, 6, 1, 3, 61, 1, 1, 3, 1)).setIndexNames((0, "PIM-MIB", "pimNeighborAddress"))
pimNeighborAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 3, 1, 1), IpAddress()).setMaxAccess("noaccess")
pimNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 3, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
pimNeighborUpTime = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
pimNeighborExpiryTime = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
pimNeighborMode = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 3, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("dense", 1), ("sparse", 2), ))).setMaxAccess("readonly")
pimIpMRouteTable = MibTable((1, 3, 6, 1, 3, 61, 1, 1, 4))
pimIpMRouteEntry = MibTableRow((1, 3, 6, 1, 3, 61, 1, 1, 4, 1)).setIndexNames((0, "IPMROUTE-STD-MIB", "ipMRouteGroup"), (0, "IPMROUTE-STD-MIB", "ipMRouteSource"), (0, "IPMROUTE-STD-MIB", "ipMRouteSourceMask"))
pimIpMRouteUpstreamAssertTimer = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 4, 1, 1), TimeTicks()).setMaxAccess("readonly")
pimIpMRouteAssertMetric = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
pimIpMRouteAssertMetricPref = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
pimIpMRouteAssertRPTBit = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
pimIpMRouteFlags = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 4, 1, 5), Bits().subtype(namedValues=namedval.NamedValues(("rpt", 0), ("spt", 1), ))).setMaxAccess("readonly")
pimRPTable = MibTable((1, 3, 6, 1, 3, 61, 1, 1, 5))
pimRPEntry = MibTableRow((1, 3, 6, 1, 3, 61, 1, 1, 5, 1)).setIndexNames((0, "PIM-MIB", "pimRPGroupAddress"), (0, "PIM-MIB", "pimRPAddress"))
pimRPGroupAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 5, 1, 1), IpAddress()).setMaxAccess("noaccess")
pimRPAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("noaccess")
pimRPState = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 5, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(("up", 1), ("down", 2), ))).setMaxAccess("readonly")
pimRPStateTimer = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 5, 1, 4), TimeTicks()).setMaxAccess("readonly")
pimRPLastChange = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 5, 1, 5), TimeTicks()).setMaxAccess("readonly")
pimRPRowStatus = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 5, 1, 6), RowStatus()).setMaxAccess("readwrite")
pimRPSetTable = MibTable((1, 3, 6, 1, 3, 61, 1, 1, 6))
pimRPSetEntry = MibTableRow((1, 3, 6, 1, 3, 61, 1, 1, 6, 1)).setIndexNames((0, "PIM-MIB", "pimRPSetComponent"), (0, "PIM-MIB", "pimRPSetGroupAddress"), (0, "PIM-MIB", "pimRPSetGroupMask"), (0, "PIM-MIB", "pimRPSetAddress"))
pimRPSetGroupAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 6, 1, 1), IpAddress()).setMaxAccess("noaccess")
pimRPSetGroupMask = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 6, 1, 2), IpAddress()).setMaxAccess("noaccess")
pimRPSetAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 6, 1, 3), IpAddress()).setMaxAccess("noaccess")
pimRPSetHoldTime = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
pimRPSetExpiryTime = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 6, 1, 5), TimeTicks()).setMaxAccess("readonly")
pimRPSetComponent = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 255))).setMaxAccess("noaccess")
pimIpMRouteNextHopTable = MibTable((1, 3, 6, 1, 3, 61, 1, 1, 7))
pimIpMRouteNextHopEntry = MibTableRow((1, 3, 6, 1, 3, 61, 1, 1, 7, 1)).setIndexNames((0, "IPMROUTE-STD-MIB", "ipMRouteNextHopGroup"), (0, "IPMROUTE-STD-MIB", "ipMRouteNextHopSource"), (0, "IPMROUTE-STD-MIB", "ipMRouteNextHopSourceMask"), (0, "IPMROUTE-STD-MIB", "ipMRouteNextHopIfIndex"), (0, "IPMROUTE-STD-MIB", "ipMRouteNextHopAddress"))
pimIpMRouteNextHopPruneReason = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 7, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(("other", 1), ("prune", 2), ("assert", 3), ))).setMaxAccess("readonly")
pimCandidateRPTable = MibTable((1, 3, 6, 1, 3, 61, 1, 1, 11))
pimCandidateRPEntry = MibTableRow((1, 3, 6, 1, 3, 61, 1, 1, 11, 1)).setIndexNames((0, "PIM-MIB", "pimCandidateRPGroupAddress"), (0, "PIM-MIB", "pimCandidateRPGroupMask"))
pimCandidateRPGroupAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 11, 1, 1), IpAddress()).setMaxAccess("noaccess")
pimCandidateRPGroupMask = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 11, 1, 2), IpAddress()).setMaxAccess("noaccess")
pimCandidateRPAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 11, 1, 3), IpAddress()).setMaxAccess("readwrite")
pimCandidateRPRowStatus = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 11, 1, 4), RowStatus()).setMaxAccess("readwrite")
pimComponentTable = MibTable((1, 3, 6, 1, 3, 61, 1, 1, 12))
pimComponentEntry = MibTableRow((1, 3, 6, 1, 3, 61, 1, 1, 12, 1)).setIndexNames((0, "PIM-MIB", "pimComponentIndex"))
pimComponentIndex = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 255))).setMaxAccess("noaccess")
pimComponentBSRAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
pimComponentBSRExpiryTime = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 12, 1, 3), TimeTicks()).setMaxAccess("readonly")
pimComponentCRPHoldTime = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255)).clone(0)).setMaxAccess("readwrite")
pimComponentStatus = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 12, 1, 5), RowStatus()).setMaxAccess("readwrite")
pimMIBConformance = MibIdentifier((1, 3, 6, 1, 3, 61, 2))
pimMIBCompliances = MibIdentifier((1, 3, 6, 1, 3, 61, 2, 1))
pimMIBGroups = MibIdentifier((1, 3, 6, 1, 3, 61, 2, 2))

# Augmentions

# Notifications

pimNeighborLoss = NotificationType((1, 3, 6, 1, 3, 61, 1, 0, 1)).setObjects(("PIM-MIB", "pimNeighborIfIndex"), )

# Groups

pimAssertGroup = ObjectGroup((1, 3, 6, 1, 3, 61, 2, 2, 7)).setObjects(("PIM-MIB", "pimIpMRouteAssertRPTBit"), ("PIM-MIB", "pimIpMRouteAssertMetric"), ("PIM-MIB", "pimIpMRouteAssertMetricPref"), )
pimNotificationGroup = ObjectGroup((1, 3, 6, 1, 3, 61, 2, 2, 1)).setObjects(("PIM-MIB", "pimNeighborLoss"), )
pimNextHopGroup = ObjectGroup((1, 3, 6, 1, 3, 61, 2, 2, 6)).setObjects(("PIM-MIB", "pimIpMRouteNextHopPruneReason"), )
pimDenseV2MIBGroup = ObjectGroup((1, 3, 6, 1, 3, 61, 2, 2, 5)).setObjects(("PIM-MIB", "pimInterfaceMode"), ("PIM-MIB", "pimInterfaceDR"), ("PIM-MIB", "pimNeighborIfIndex"), ("PIM-MIB", "pimInterfaceStatus"), ("PIM-MIB", "pimNeighborExpiryTime"), ("PIM-MIB", "pimInterfaceHelloInterval"), ("PIM-MIB", "pimInterfaceNetMask"), ("PIM-MIB", "pimNeighborUpTime"), ("PIM-MIB", "pimInterfaceAddress"), )
pimV1MIBGroup = ObjectGroup((1, 3, 6, 1, 3, 61, 2, 2, 4)).setObjects(("PIM-MIB", "pimJoinPruneInterval"), ("PIM-MIB", "pimInterfaceMode"), ("PIM-MIB", "pimInterfaceStatus"), ("PIM-MIB", "pimRPRowStatus"), ("PIM-MIB", "pimNeighborIfIndex"), ("PIM-MIB", "pimRPLastChange"), ("PIM-MIB", "pimRPStateTimer"), ("PIM-MIB", "pimNeighborExpiryTime"), ("PIM-MIB", "pimRPState"), ("PIM-MIB", "pimInterfaceHelloInterval"), ("PIM-MIB", "pimInterfaceJoinPruneInterval"), ("PIM-MIB", "pimNeighborMode"), ("PIM-MIB", "pimInterfaceNetMask"), ("PIM-MIB", "pimInterfaceDR"), ("PIM-MIB", "pimNeighborUpTime"), ("PIM-MIB", "pimInterfaceAddress"), )
pimV2MIBGroup = ObjectGroup((1, 3, 6, 1, 3, 61, 2, 2, 2)).setObjects(("PIM-MIB", "pimJoinPruneInterval"), ("PIM-MIB", "pimInterfaceMode"), ("PIM-MIB", "pimInterfaceDR"), ("PIM-MIB", "pimRPSetExpiryTime"), ("PIM-MIB", "pimNeighborIfIndex"), ("PIM-MIB", "pimInterfaceStatus"), ("PIM-MIB", "pimComponentCRPHoldTime"), ("PIM-MIB", "pimComponentBSRAddress"), ("PIM-MIB", "pimNeighborExpiryTime"), ("PIM-MIB", "pimInterfaceHelloInterval"), ("PIM-MIB", "pimComponentStatus"), ("PIM-MIB", "pimInterfaceCBSRPreference"), ("PIM-MIB", "pimInterfaceJoinPruneInterval"), ("PIM-MIB", "pimIpMRouteFlags"), ("PIM-MIB", "pimInterfaceNetMask"), ("PIM-MIB", "pimRPSetHoldTime"), ("PIM-MIB", "pimIpMRouteUpstreamAssertTimer"), ("PIM-MIB", "pimComponentBSRExpiryTime"), ("PIM-MIB", "pimNeighborUpTime"), ("PIM-MIB", "pimInterfaceAddress"), )
pimV2CandidateRPMIBGroup = ObjectGroup((1, 3, 6, 1, 3, 61, 2, 2, 3)).setObjects(("PIM-MIB", "pimCandidateRPAddress"), ("PIM-MIB", "pimCandidateRPRowStatus"), )

# Exports

# Module identity
mibBuilder.exportSymbols("PIM-MIB", PYSNMP_MODULE_ID=pimMIB)

# Objects
mibBuilder.exportSymbols("PIM-MIB", pimMIB=pimMIB, pimMIBObjects=pimMIBObjects, pimTraps=pimTraps, pim=pim, pimJoinPruneInterval=pimJoinPruneInterval, pimInterfaceTable=pimInterfaceTable, pimInterfaceEntry=pimInterfaceEntry, pimInterfaceIfIndex=pimInterfaceIfIndex, pimInterfaceAddress=pimInterfaceAddress, pimInterfaceNetMask=pimInterfaceNetMask, pimInterfaceMode=pimInterfaceMode, pimInterfaceDR=pimInterfaceDR, pimInterfaceHelloInterval=pimInterfaceHelloInterval, pimInterfaceStatus=pimInterfaceStatus, pimInterfaceJoinPruneInterval=pimInterfaceJoinPruneInterval, pimInterfaceCBSRPreference=pimInterfaceCBSRPreference, pimNeighborTable=pimNeighborTable, pimNeighborEntry=pimNeighborEntry, pimNeighborAddress=pimNeighborAddress, pimNeighborIfIndex=pimNeighborIfIndex, pimNeighborUpTime=pimNeighborUpTime, pimNeighborExpiryTime=pimNeighborExpiryTime, pimNeighborMode=pimNeighborMode, pimIpMRouteTable=pimIpMRouteTable, pimIpMRouteEntry=pimIpMRouteEntry, pimIpMRouteUpstreamAssertTimer=pimIpMRouteUpstreamAssertTimer, pimIpMRouteAssertMetric=pimIpMRouteAssertMetric, pimIpMRouteAssertMetricPref=pimIpMRouteAssertMetricPref, pimIpMRouteAssertRPTBit=pimIpMRouteAssertRPTBit, pimIpMRouteFlags=pimIpMRouteFlags, pimRPTable=pimRPTable, pimRPEntry=pimRPEntry, pimRPGroupAddress=pimRPGroupAddress, pimRPAddress=pimRPAddress, pimRPState=pimRPState, pimRPStateTimer=pimRPStateTimer, pimRPLastChange=pimRPLastChange, pimRPRowStatus=pimRPRowStatus, pimRPSetTable=pimRPSetTable, pimRPSetEntry=pimRPSetEntry, pimRPSetGroupAddress=pimRPSetGroupAddress, pimRPSetGroupMask=pimRPSetGroupMask, pimRPSetAddress=pimRPSetAddress, pimRPSetHoldTime=pimRPSetHoldTime, pimRPSetExpiryTime=pimRPSetExpiryTime, pimRPSetComponent=pimRPSetComponent, pimIpMRouteNextHopTable=pimIpMRouteNextHopTable, pimIpMRouteNextHopEntry=pimIpMRouteNextHopEntry, pimIpMRouteNextHopPruneReason=pimIpMRouteNextHopPruneReason, pimCandidateRPTable=pimCandidateRPTable, pimCandidateRPEntry=pimCandidateRPEntry, pimCandidateRPGroupAddress=pimCandidateRPGroupAddress, pimCandidateRPGroupMask=pimCandidateRPGroupMask, pimCandidateRPAddress=pimCandidateRPAddress, pimCandidateRPRowStatus=pimCandidateRPRowStatus, pimComponentTable=pimComponentTable, pimComponentEntry=pimComponentEntry, pimComponentIndex=pimComponentIndex, pimComponentBSRAddress=pimComponentBSRAddress, pimComponentBSRExpiryTime=pimComponentBSRExpiryTime, pimComponentCRPHoldTime=pimComponentCRPHoldTime, pimComponentStatus=pimComponentStatus, pimMIBConformance=pimMIBConformance, pimMIBCompliances=pimMIBCompliances, pimMIBGroups=pimMIBGroups)

# Notifications
mibBuilder.exportSymbols("PIM-MIB", pimNeighborLoss=pimNeighborLoss)

# Groups
mibBuilder.exportSymbols("PIM-MIB", pimAssertGroup=pimAssertGroup, pimNotificationGroup=pimNotificationGroup, pimNextHopGroup=pimNextHopGroup, pimDenseV2MIBGroup=pimDenseV2MIBGroup, pimV1MIBGroup=pimV1MIBGroup, pimV2MIBGroup=pimV2MIBGroup, pimV2CandidateRPMIBGroup=pimV2CandidateRPMIBGroup)
