#
# PySNMP MIB module OS-PROV-LPBK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/rob/Code/pysnmp-mibs/mibs/mrv/OS-PROV-LPBK-MIB
# Produced by pysmi-1.1.12 at Mon Aug  4 17:02:33 2025
# On host macmini.vegmond.io platform Darwin version 24.5.0 by user rob
# Using Python version 3.12.8 (main, Dec  3 2024, 18:42:41) [Clang 16.0.0 (clang-1600.0.26.4)]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
oaOptiSwitch, TagList, EntryValidator = mibBuilder.importSymbols("OS-COMMON-TC-MIB", "oaOptiSwitch", "TagList", "EntryValidator")
osEthServId, = mibBuilder.importSymbols("OS-ETH-SERV-MIB", "osEthServId")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32, Integer32, Gauge32, ModuleIdentity, TimeTicks, NotificationType, Counter32, Bits, IpAddress, iso, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32", "Integer32", "Gauge32", "ModuleIdentity", "TimeTicks", "NotificationType", "Counter32", "Bits", "IpAddress", "iso", "ObjectIdentity", "Counter64")
TextualConvention, DisplayString, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "MacAddress")
osProvLpbk = ModuleIdentity((1, 3, 6, 1, 4, 1, 6926, 2, 26))
osProvLpbk.setRevisions(('2013-06-02 00:00',))
if mibBuilder.loadTexts: osProvLpbk.setLastUpdated('201010260000Z')
if mibBuilder.loadTexts: osProvLpbk.setOrganization('MRV Communications, Inc.')
osProvLpbkObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6926, 2, 26, 1))
osProvLpbkConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6926, 2, 26, 100))
osProvLpbkMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6926, 2, 26, 100, 1))
osProvLpbkMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6926, 2, 26, 100, 2))
osProvLpbkTable = MibTable((1, 3, 6, 1, 4, 1, 6926, 2, 26, 1, 3), )
if mibBuilder.loadTexts: osProvLpbkTable.setStatus('current')
osProvLpbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6926, 2, 26, 1, 3, 1), ).setIndexNames((0, "OS-ETH-SERV-MIB", "osEthServId"), (0, "OS-PROV-LPBK-MIB", "osProvLpbkDir"), (0, "OS-PROV-LPBK-MIB", "osProvLpbkInd"))
if mibBuilder.loadTexts: osProvLpbkEntry.setStatus('current')
osProvLpbkDir = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 26, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sport", 1), ("cport", 2))))
if mibBuilder.loadTexts: osProvLpbkDir.setStatus('current')
osProvLpbkInd = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 26, 1, 3, 1, 6), Unsigned32())
if mibBuilder.loadTexts: osProvLpbkInd.setStatus('current')
osProvLpbkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 26, 1, 3, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: osProvLpbkPort.setStatus('current')
osProvLpbkTags = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 26, 1, 3, 1, 8), TagList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: osProvLpbkTags.setStatus('current')
osProvLpbkIncludesUntagged = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 26, 1, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osProvLpbkIncludesUntagged.setStatus('current')
osProvLpbkDestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 26, 1, 3, 1, 10), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osProvLpbkDestMacAddress.setStatus('current')
osProvLpbkDestMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 26, 1, 3, 1, 11), MacAddress().clone(hexValue="ffffffffffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osProvLpbkDestMacMask.setStatus('current')
osProvLpbkSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 26, 1, 3, 1, 12), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osProvLpbkSrcMacAddress.setStatus('current')
osProvLpbkSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 26, 1, 3, 1, 13), MacAddress().clone(hexValue="ffffffffffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osProvLpbkSrcMacMask.setStatus('current')
osProvLpbkAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 26, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("reflect", 3), ("macSwap", 4))).clone('macSwap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osProvLpbkAction.setStatus('current')
osProvLpbkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 26, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("nothing", 2), ("delete", 3), ("create", 4), ("enable", 5), ("disable", 6))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osProvLpbkAdminStatus.setStatus('current')
osProvLpbkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 26, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osProvLpbkOperStatus.setStatus('current')
osProvLpbkCfgBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 2, 26, 1, 3, 1, 17), Bits().clone(namedValues=NamedValues(("reserved", 0), ("portCfg", 3), ("tagsCfg", 5), ("actionCfg", 11), ("enableCfg", 12), ("incUntaggedCfg", 13), ("dstMacAddrCfg", 14), ("srcMacAddrCfg", 15), ("dstMacMaskCfg", 16), ("srcMacMaskCfg", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osProvLpbkCfgBits.setStatus('current')
osProvLpbkMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6926, 2, 26, 100, 1, 1)).setObjects(("OS-PROV-LPBK-MIB", "osProvLpbkMandatoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    osProvLpbkMIBCompliance = osProvLpbkMIBCompliance.setStatus('current')
osProvLpbkMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6926, 2, 26, 100, 2, 1)).setObjects(("OS-PROV-LPBK-MIB", "osProvLpbkPort"), ("OS-PROV-LPBK-MIB", "osProvLpbkTags"), ("OS-PROV-LPBK-MIB", "osProvLpbkIncludesUntagged"), ("OS-PROV-LPBK-MIB", "osProvLpbkDestMacAddress"), ("OS-PROV-LPBK-MIB", "osProvLpbkDestMacMask"), ("OS-PROV-LPBK-MIB", "osProvLpbkSrcMacAddress"), ("OS-PROV-LPBK-MIB", "osProvLpbkSrcMacMask"), ("OS-PROV-LPBK-MIB", "osProvLpbkAction"), ("OS-PROV-LPBK-MIB", "osProvLpbkAdminStatus"), ("OS-PROV-LPBK-MIB", "osProvLpbkOperStatus"), ("OS-PROV-LPBK-MIB", "osProvLpbkCfgBits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    osProvLpbkMandatoryGroup = osProvLpbkMandatoryGroup.setStatus('current')
mibBuilder.exportSymbols("OS-PROV-LPBK-MIB", osProvLpbkTags=osProvLpbkTags, osProvLpbkMIBCompliance=osProvLpbkMIBCompliance, osProvLpbkMIBCompliances=osProvLpbkMIBCompliances, osProvLpbkSrcMacMask=osProvLpbkSrcMacMask, osProvLpbkInd=osProvLpbkInd, osProvLpbkObjects=osProvLpbkObjects, osProvLpbkMandatoryGroup=osProvLpbkMandatoryGroup, osProvLpbkOperStatus=osProvLpbkOperStatus, osProvLpbkConformance=osProvLpbkConformance, osProvLpbkEntry=osProvLpbkEntry, osProvLpbk=osProvLpbk, osProvLpbkAdminStatus=osProvLpbkAdminStatus, osProvLpbkMIBGroups=osProvLpbkMIBGroups, PYSNMP_MODULE_ID=osProvLpbk, osProvLpbkAction=osProvLpbkAction, osProvLpbkSrcMacAddress=osProvLpbkSrcMacAddress, osProvLpbkDestMacMask=osProvLpbkDestMacMask, osProvLpbkIncludesUntagged=osProvLpbkIncludesUntagged, osProvLpbkDir=osProvLpbkDir, osProvLpbkPort=osProvLpbkPort, osProvLpbkDestMacAddress=osProvLpbkDestMacAddress, osProvLpbkCfgBits=osProvLpbkCfgBits, osProvLpbkTable=osProvLpbkTable)
