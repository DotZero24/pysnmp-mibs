# PySNMP SMI module. Autogenerated from smidump -f python ENTITY-SENSOR-MIB
# by libsmi2pysnmp-0.0.4-alpha at Tue Jun 28 11:30:45 2005,
# Python version (2, 4, 0, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( entPhysicalIndex, entityPhysicalGroup, ) = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "entityPhysicalGroup")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibVariable, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibVariable", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "mib-2")
( TextualConvention, TimeStamp, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp")

# Types

class EntitySensorDataScale(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(1,9,15,11,6,14,4,17,7,5,13,8,10,3,12,16,2,)
    namedValues = namedval.NamedValues(("yocto", 1), ("kilo", 10), ("mega", 11), ("giga", 12), ("tera", 13), ("exa", 14), ("peta", 15), ("zetta", 16), ("yotta", 17), ("zepto", 2), ("atto", 3), ("femto", 4), ("pico", 5), ("nano", 6), ("micro", 7), ("milli", 8), ("units", 9), )
    pass

class EntitySensorDataType(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(5,6,4,12,2,3,8,11,7,1,9,10,)
    namedValues = namedval.NamedValues(("other", 1), ("rpm", 10), ("cmm", 11), ("truthvalue", 12), ("unknown", 2), ("voltsAC", 3), ("voltsDC", 4), ("amperes", 5), ("watts", 6), ("hertz", 7), ("celsius", 8), ("percentRH", 9), )
    pass

class EntitySensorPrecision(Integer32):
    subtypeSpec = Integer32.subtypeSpec+constraint.ValueRangeConstraint(-8,9)
    pass

class EntitySensorStatus(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(1,3,2,)
    namedValues = namedval.NamedValues(("ok", 1), ("unavailable", 2), ("nonoperational", 3), )
    pass

class EntitySensorValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec+constraint.ValueRangeConstraint(-1000000000,1000000000)
    pass


# Objects

entitySensorMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 99))
entitySensorObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 99, 1))
entPhySensorTable = MibTable((1, 3, 6, 1, 2, 1, 99, 1, 1))
entPhySensorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 99, 1, 1, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
entPhySensorType = MibTableColumn((1, 3, 6, 1, 2, 1, 99, 1, 1, 1, 1)).setColumnInitializer(MibVariable((), EntitySensorDataType()).setMaxAccess("readonly"))
entPhySensorScale = MibTableColumn((1, 3, 6, 1, 2, 1, 99, 1, 1, 1, 2)).setColumnInitializer(MibVariable((), EntitySensorDataScale()).setMaxAccess("readonly"))
entPhySensorPrecision = MibTableColumn((1, 3, 6, 1, 2, 1, 99, 1, 1, 1, 3)).setColumnInitializer(MibVariable((), EntitySensorPrecision()).setMaxAccess("readonly"))
entPhySensorValue = MibTableColumn((1, 3, 6, 1, 2, 1, 99, 1, 1, 1, 4)).setColumnInitializer(MibVariable((), EntitySensorValue()).setMaxAccess("readonly"))
entPhySensorOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 99, 1, 1, 1, 5)).setColumnInitializer(MibVariable((), EntitySensorStatus()).setMaxAccess("readonly"))
entPhySensorUnitsDisplay = MibTableColumn((1, 3, 6, 1, 2, 1, 99, 1, 1, 1, 6)).setColumnInitializer(MibVariable((), SnmpAdminString()).setMaxAccess("readonly"))
entPhySensorValueTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 99, 1, 1, 1, 7)).setColumnInitializer(MibVariable((), TimeStamp()).setMaxAccess("readonly"))
entPhySensorValueUpdateRate = MibTableColumn((1, 3, 6, 1, 2, 1, 99, 1, 1, 1, 8)).setColumnInitializer(MibVariable((), Unsigned32()).setMaxAccess("readonly"))
entitySensorConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 99, 3))
entitySensorCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 99, 3, 1))
entitySensorGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 99, 3, 2))

# Augmentions

# Groups

entitySensorValueGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 99, 3, 2, 1)).setObjects(("ENTITY-SENSOR-MIB", "entPhySensorScale"), ("ENTITY-SENSOR-MIB", "entPhySensorUnitsDisplay"), ("ENTITY-SENSOR-MIB", "entPhySensorValueUpdateRate"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("ENTITY-SENSOR-MIB", "entPhySensorValueTimeStamp"), ("ENTITY-SENSOR-MIB", "entPhySensorOperStatus"), ("ENTITY-SENSOR-MIB", "entPhySensorType"), ("ENTITY-SENSOR-MIB", "entPhySensorPrecision"), )

# Exports

# Types
mibBuilder.exportSymbols("ENTITY-SENSOR-MIB", EntitySensorDataScale=EntitySensorDataScale, EntitySensorDataType=EntitySensorDataType, EntitySensorPrecision=EntitySensorPrecision, EntitySensorStatus=EntitySensorStatus, EntitySensorValue=EntitySensorValue)

# Objects
mibBuilder.exportSymbols("ENTITY-SENSOR-MIB", entitySensorMIB=entitySensorMIB, entitySensorObjects=entitySensorObjects, entPhySensorTable=entPhySensorTable, entPhySensorEntry=entPhySensorEntry, entPhySensorType=entPhySensorType, entPhySensorScale=entPhySensorScale, entPhySensorPrecision=entPhySensorPrecision, entPhySensorValue=entPhySensorValue, entPhySensorOperStatus=entPhySensorOperStatus, entPhySensorUnitsDisplay=entPhySensorUnitsDisplay, entPhySensorValueTimeStamp=entPhySensorValueTimeStamp, entPhySensorValueUpdateRate=entPhySensorValueUpdateRate, entitySensorConformance=entitySensorConformance, entitySensorCompliances=entitySensorCompliances, entitySensorGroups=entitySensorGroups)

# Groups
mibBuilder.exportSymbols("ENTITY-SENSOR-MIB", entitySensorValueGroup=entitySensorValueGroup)
